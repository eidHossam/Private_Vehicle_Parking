
Exit_Gate_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001428  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008000a0  008000a0  000014fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000500  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004966  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019a2  00000000  00000000  000063ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e44  00000000  00000000  00007d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce4  00000000  00000000  0000abb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001de4  00000000  00000000  0000b898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d57  00000000  00000000  0000d67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  0000f3d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_4>
      14:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_10>
      2c:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_11>
      30:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_12>
      34:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_13>
      38:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_14>
      3c:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <main>
      8a:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer0_DelayCallback>:
/** @defgroup ISR_CALLBACK
  * @{
  */
static void Timer0_DelayCallback(void)
{
    fptr_st_AlarmManager = st_AlarmManager_FailedIDAuthentication;
      92:	81 e5       	ldi	r24, 0x51	; 81
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
      9a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
      9e:	08 95       	ret

000000a0 <st_AlarmManager_Idle>:
/**
 * @brief this state makes the module go into idle mode until some user action is done.
 * 
 */
void st_AlarmManager_Idle(void)
{
      a0:	08 95       	ret

000000a2 <st_AlarmManager_FailedIDAuthentication>:
void st_AlarmManager_FailedIDAuthentication(void)
{
    static uint8_t LOC_u8ToggleCount = 0;

    /*Turn on both the red LED and the buzzer*/
    HAL_LED_ToggleState(RED_LED_PORT, RED_LED_PIN);
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	83 e3       	ldi	r24, 0x33	; 51
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 bf 04 	call	0x97e	; 0x97e <HAL_LED_ToggleState>
    HAL_Buzzer_ToggleState(BUZZER_PORT, BUZZER_PIN);
      ac:	62 e0       	ldi	r22, 0x02	; 2
      ae:	83 e3       	ldi	r24, 0x33	; 51
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 c6 02 	call	0x58c	; 0x58c <HAL_Buzzer_ToggleState>

    if(LOC_u8ToggleCount == 0)
      b6:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <LOC_u8ToggleCount.1811>
      ba:	81 11       	cpse	r24, r1
      bc:	0a c0       	rjmp	.+20     	; 0xd2 <st_AlarmManager_FailedIDAuthentication+0x30>
    {
        LCD_Clear_Screen();
      be:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_Clear_Screen>

        LCD_Cursor_XY(LCD_SECOND_LINE, 3);
      c2:	63 e0       	ldi	r22, 0x03	; 3
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Cursor_XY>
        LCD_Send_String(stringfy("INVALID ID!"));
      ca:	80 e6       	ldi	r24, 0x60	; 96
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_Send_String>
    }

    if(LOC_u8ToggleCount < FAILED_ID_ALARM_TOGGLE_COUNT)
      d2:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <LOC_u8ToggleCount.1811>
      d6:	83 30       	cpi	r24, 0x03	; 3
      d8:	70 f4       	brcc	.+28     	; 0xf6 <st_AlarmManager_FailedIDAuthentication+0x54>
    {
        MCAL_TIMER0_SingleIntervalDelayms(333, Timer0_DelayCallback);
      da:	49 e4       	ldi	r20, 0x49	; 73
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	6d e4       	ldi	r22, 0x4D	; 77
      e0:	71 e0       	ldi	r23, 0x01	; 1
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 19 07 	call	0xe32	; 0xe32 <MCAL_TIMER0_SingleIntervalDelayms>
        LOC_u8ToggleCount++;
      ea:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <LOC_u8ToggleCount.1811>
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <LOC_u8ToggleCount.1811>
      f4:	04 c0       	rjmp	.+8      	; 0xfe <st_AlarmManager_FailedIDAuthentication+0x5c>
    }else{

        LOC_u8ToggleCount = 0;
      f6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <LOC_u8ToggleCount.1811>

        AM_UAI_AlarmOff();
      fa:	0e 94 ad 02 	call	0x55a	; 0x55a <AM_UAI_AlarmOff>
    }

    fptr_st_AlarmManager = st_AlarmManager_Idle;
      fe:	80 e5       	ldi	r24, 0x50	; 80
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     106:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
     10a:	08 95       	ret

0000010c <st_AlarmManager_SuccessfullIDAuthentication>:
void st_AlarmManager_SuccessfullIDAuthentication(void)
{
    static uint8_t LOC_u8Counter = 0;
    eLEDStatus_t LOC_eLEDState;

    if(LOC_u8Counter == 0)
     10c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     110:	81 11       	cpse	r24, r1
     112:	11 c0       	rjmp	.+34     	; 0x136 <st_AlarmManager_SuccessfullIDAuthentication+0x2a>
    {
        LCD_Clear_Screen();
     114:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_Clear_Screen>

        LCD_Cursor_XY(LCD_SECOND_LINE, 4);
     118:	64 e0       	ldi	r22, 0x04	; 4
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Cursor_XY>
        LCD_Send_String(stringfy("VALID ID!"));
     120:	82 e6       	ldi	r24, 0x62	; 98
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_Send_String>

        LOC_eLEDState = LED_On;

        LOC_u8Counter++;
     128:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     12c:	8f 5f       	subi	r24, 0xFF	; 255
     12e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
        LCD_Clear_Screen();

        LCD_Cursor_XY(LCD_SECOND_LINE, 4);
        LCD_Send_String(stringfy("VALID ID!"));

        LOC_eLEDState = LED_On;
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	03 c0       	rjmp	.+6      	; 0x13c <st_AlarmManager_SuccessfullIDAuthentication+0x30>

        LOC_u8Counter++;
    }else{
        LOC_eLEDState = LED_Off;

        LOC_u8Counter = 0;
     136:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>

        LOC_eLEDState = LED_On;

        LOC_u8Counter++;
    }else{
        LOC_eLEDState = LED_Off;
     13a:	40 e0       	ldi	r20, 0x00	; 0

        LOC_u8Counter = 0;
    }

    HAL_LED_SetState(GREEN_LED_PORT, GREEN_LED_PIN, LOC_eLEDState);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	83 e3       	ldi	r24, 0x33	; 51
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_LED_SetState>

    fptr_st_AlarmManager = st_AlarmManager_Idle;
     146:	80 e5       	ldi	r24, 0x50	; 80
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     14e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
     152:	08 95       	ret

00000154 <st_AlarmManager_Init>:
 */
void st_AlarmManager_Init(void)
{

    /*Initialize the green LED used to indicate a successfull ID authentication*/
    HAL_LED_Init(GREEN_LED_PORT, GREEN_LED_PIN);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	83 e3       	ldi	r24, 0x33	; 51
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 aa 04 	call	0x954	; 0x954 <HAL_LED_Init>

    /*Initialize the red LED used to indicate a failed ID authentication*/
    HAL_LED_Init(RED_LED_PORT, RED_LED_PIN);
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	83 e3       	ldi	r24, 0x33	; 51
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 aa 04 	call	0x954	; 0x954 <HAL_LED_Init>

    /*Initialize the buzzer HAL driver*/
    HAL_Buzzer_Init(BUZZER_PORT, BUZZER_PIN);
     168:	62 e0       	ldi	r22, 0x02	; 2
     16a:	83 e3       	ldi	r24, 0x33	; 51
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 b4 02 	call	0x568	; 0x568 <HAL_Buzzer_Init>

    /*Set the initial state of the module to be idle waiting for an incoming signal*/
    fptr_st_AlarmManager = st_AlarmManager_Idle;
     172:	80 e5       	ldi	r24, 0x50	; 80
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     17a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
     17e:	08 95       	ret

00000180 <UAI_AM_InvalidID>:
 * it that ID authentication process is a failure.
 * 
 */
void UAI_AM_InvalidID(void)
{
    fptr_st_AlarmManager = st_AlarmManager_FailedIDAuthentication;
     180:	81 e5       	ldi	r24, 0x51	; 81
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     188:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
     18c:	08 95       	ret

0000018e <UAI_AM_ValidID>:
 * it that ID authentication process is a failure.
 * 
 */
void UAI_AM_ValidID(void)
{
    fptr_st_AlarmManager =st_AlarmManager_SuccessfullIDAuthentication;
     18e:	86 e8       	ldi	r24, 0x86	; 134
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     196:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
     19a:	08 95       	ret

0000019c <UAI_AM_TurnOffAlarmGateClosed>:
 * it that the car passed the gate and we need to turn off the alarm.
 * 
 */
void UAI_AM_TurnOffAlarmGateClosed(void)
{
    fptr_st_AlarmManager = st_AlarmManager_SuccessfullIDAuthentication;
     19c:	86 e8       	ldi	r24, 0x86	; 134
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     1a4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_AlarmManager>
     1a8:	08 95       	ret

000001aa <ExitGate_ECU_APP_SETUP>:
* Note			:   none.
======================================================================================================================
*/
void ExitGate_ECU_APP_SETUP(void)
{
    st_UAI_Init();
     1aa:	0e 94 94 02 	call	0x528	; 0x528 <st_UAI_Init>

    st_GateController_Init();
     1ae:	0e 94 2f 01 	call	0x25e	; 0x25e <st_GateController_Init>

    st_AlarmManager_Init();
     1b2:	0e 94 aa 00 	call	0x154	; 0x154 <st_AlarmManager_Init>
     1b6:	08 95       	ret

000001b8 <ExitGate_ECU_APP_Loop>:
* Note			:   none.
======================================================================================================================
*/
void ExitGate_ECU_APP_Loop(void)
{
    fptr_st_UserAdminInterface();
     1b8:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <fptr_st_UserAdminInterface>
     1bc:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     1c0:	09 95       	icall

    fptr_st_GateController();
     1c2:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <fptr_st_GateController>
     1c6:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <fptr_st_GateController+0x1>
     1ca:	09 95       	icall

    fptr_st_AlarmManager();
     1cc:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <fptr_st_AlarmManager>
     1d0:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <fptr_st_AlarmManager+0x1>
     1d4:	09 95       	icall
     1d6:	08 95       	ret

000001d8 <Timer0_DelaycheckCar_Callback>:
/** @defgroup ISR_CALLBACK_FUNCTIONS
  * @{
  */
static void Timer0_DelaycheckCar_Callback(void)
{
    fptr_st_GateController = st_GateController_CheckCarPassed;
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     1e0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     1e4:	08 95       	ret

000001e6 <st_GateController_Idle>:
 * @brief This state puts the module in an idle state 
 * waiting for a signal from the User_Admin_Interface module. 
 * 
 */
void st_GateController_Idle(void)
{
     1e6:	08 95       	ret

000001e8 <st_GateController_OpenGate>:
 * @note :The gate opens by turning the servo motor +90 degree
 */
void st_GateController_OpenGate(void)
{   
    /*Turns the servo motor to open the gate*/
    HAL_ServoMotorTurn(ServoMotor_90Degree);
     1e8:	8a ef       	ldi	r24, 0xFA	; 250
     1ea:	0e 94 09 05 	call	0xa12	; 0xa12 <HAL_ServoMotorTurn>

    /** TODO: Wait for 3 seconds then move to the state that 
     * checks if the car already passed the gate using the PIR sensor.
    */
    MCAL_TIMER0_SingleIntervalDelayms(GATE_OPENED_TIME_MS, Timer0_DelaycheckCar_Callback);
     1ee:	4c ee       	ldi	r20, 0xEC	; 236
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	64 ef       	ldi	r22, 0xF4	; 244
     1f4:	71 e0       	ldi	r23, 0x01	; 1
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 19 07 	call	0xe32	; 0xe32 <MCAL_TIMER0_SingleIntervalDelayms>

    /*Idle until the delay is over*/
    fptr_st_GateController = st_GateController_Idle;
     1fe:	83 ef       	ldi	r24, 0xF3	; 243
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     206:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     20a:	08 95       	ret

0000020c <st_GateController_CheckCarPassed>:
 */
void st_GateController_CheckCarPassed(void)
{
    ePIRStatus_t LOC_ePIRStatus;

    LOC_ePIRStatus = HAL_PIR_ReadStatus(PIR_PORT, PIR_PIN);
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	86 e3       	ldi	r24, 0x36	; 54
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <HAL_PIR_ReadStatus>

    /*If no motion is detected then the car passed so we should close the gate*/
    if(PIR_NoMotionDetected == LOC_ePIRStatus)
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	39 f4       	brne	.+14     	; 0x228 <st_GateController_CheckCarPassed+0x1c>
    {

      fptr_st_GateController = st_GateController_CloseGate;
     21a:	83 e2       	ldi	r24, 0x23	; 35
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     222:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     226:	08 95       	ret

    }else{ /*If the car didn't pass the gate yet then we should wait for another 
             gate timer interval.*/

      MCAL_TIMER0_SingleIntervalDelayms(GATE_OPENED_TIME_MS, Timer0_DelaycheckCar_Callback);
     228:	4c ee       	ldi	r20, 0xEC	; 236
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	64 ef       	ldi	r22, 0xF4	; 244
     22e:	71 e0       	ldi	r23, 0x01	; 1
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 19 07 	call	0xe32	; 0xe32 <MCAL_TIMER0_SingleIntervalDelayms>

      /*Return to the idle state*/
      fptr_st_GateController = st_GateController_Idle;
     238:	83 ef       	ldi	r24, 0xF3	; 243
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     240:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     244:	08 95       	ret

00000246 <st_GateController_CloseGate>:
 * 
 */
void st_GateController_CloseGate(void)
{
    /*Turns the servo motor to close the gate*/
    HAL_ServoMotorTurn(ServoMotor_0Degree);
     246:	80 ef       	ldi	r24, 0xF0	; 240
     248:	0e 94 09 05 	call	0xa12	; 0xa12 <HAL_ServoMotorTurn>

    /*Sends a signal to the User_Admin_Interface to inform it that the gate closed*/
    GC_UAI_GateClosed();
     24c:	0e 94 a4 02 	call	0x548	; 0x548 <GC_UAI_GateClosed>

    /*Go back to the idle state to wait for another request*/
    fptr_st_GateController = st_GateController_Idle;
     250:	83 ef       	ldi	r24, 0xF3	; 243
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     258:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     25c:	08 95       	ret

0000025e <st_GateController_Init>:
 * 
 */
void st_GateController_Init(void)
{
    /*Initialize the gates servo motor to be on the 0 degree position*/
    HAL_ServoMotorInit();
     25e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <HAL_ServoMotorInit>
    
    /*Initialize the PIR sensor to detect when the car successfully passes the gate*/
    HAL_PIR_Init(PIR_PORT, PIR_PIN);
     262:	62 e0       	ldi	r22, 0x02	; 2
     264:	86 e3       	ldi	r24, 0x36	; 54
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 c2 04 	call	0x984	; 0x984 <HAL_PIR_Init>

    /*Set the initial state to be idle until there is a request to be processed*/
    fptr_st_GateController = st_GateController_Idle;
     26c:	83 ef       	ldi	r24, 0xF3	; 243
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     274:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     278:	08 95       	ret

0000027a <UAI_GC_OpenGateReuest>:
 * to request it to open the gate.
 * 
 */
void UAI_GC_OpenGateReuest(void)
{
    fptr_st_GateController = st_GateController_OpenGate;
     27a:	84 ef       	ldi	r24, 0xF4	; 244
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <fptr_st_GateController+0x1>
     282:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <fptr_st_GateController>
     286:	08 95       	ret

00000288 <Timer0_SingleIntervalDelaycallback>:
* @brief		  :  This function is the callback function for the Timer0_SingleIntervalDelayms function.
======================================================================================================================
*/
static void Timer0_SingleIntervalDelaycallback(void)
{
  fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     288:	8b ef       	ldi	r24, 0xFB	; 251
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     290:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     294:	08 95       	ret

00000296 <st_UAI_Idle>:
/**
 * @brief this state makes the module go into idle mode until some user action is done.
 * 
 */
void st_UAI_Idle(void)
{
     296:	08 95       	ret

00000298 <USART_Init>:

/** @defgroup Private Functions
  * @{
  */
static void USART_Init()
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	29 97       	sbiw	r28, 0x09	; 9
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
    sUSART_config_t cfg;

    cfg.USART_CLKOperation = USART_CLKOP_NormalAsynch;
     2ac:	19 82       	std	Y+1, r1	; 0x01
    cfg.USART_baudRate = USART_BAUD_RATE_9600;
     2ae:	80 e8       	ldi	r24, 0x80	; 128
     2b0:	95 e2       	ldi	r25, 0x25	; 37
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	8b 83       	std	Y+3, r24	; 0x03
     2b8:	9c 83       	std	Y+4, r25	; 0x04
     2ba:	ad 83       	std	Y+5, r26	; 0x05
     2bc:	be 83       	std	Y+6, r27	; 0x06
    cfg.USART_Mode = USART_ModeTXRX;
     2be:	88 e1       	ldi	r24, 0x18	; 24
     2c0:	8a 83       	std	Y+2, r24	; 0x02
    cfg.USART_wordLength = USART_8BitWord;
     2c2:	86 e0       	ldi	r24, 0x06	; 6
     2c4:	8f 83       	std	Y+7, r24	; 0x07
    cfg.USART_parityCTRL = USART_ParityMode_Disabled;
     2c6:	19 86       	std	Y+9, r1	; 0x09
    cfg.USART_stopBits = USART_1StopBit;
     2c8:	18 86       	std	Y+8, r1	; 0x08

    MCAL_UART_Init(&cfg);
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	0e 94 93 08 	call	0x1126	; 0x1126 <MCAL_UART_Init>

    MCAL_UART_Interrupt_EN(USART_IRQ_RXC, USART_RX_ISR_Callback);
     2d2:	69 e7       	ldi	r22, 0x79	; 121
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	80 e8       	ldi	r24, 0x80	; 128
     2d8:	0e 94 30 09 	call	0x1260	; 0x1260 <MCAL_UART_Interrupt_EN>

    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
     2dc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MCAL_UART_Disable>
}
     2e0:	29 96       	adiw	r28, 0x09	; 9
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <USART_RX_ISR_Callback>:
static void USART_RX_ISR_Callback(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    /*Get the character the user typed*/
    MCAL_UART_Get_Data((uint16_t *)(&Glob_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
     2f2:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <sLOC_u8CharCounter.1911>
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	8b 55       	subi	r24, 0x5B	; 91
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	0e 94 0b 09 	call	0x1216	; 0x1216 <MCAL_UART_Get_Data>

    /*Send the character again to show it on the terminal*/
    MCAL_UART_Send_Data((uint16_t *)(&Glob_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
     302:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <sLOC_u8CharCounter.1911>
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	8b 55       	subi	r24, 0x5B	; 91
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <MCAL_UART_Send_Data>
        
    sLOC_u8CharCounter++;
     312:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <sLOC_u8CharCounter.1911>
     316:	ef 5f       	subi	r30, 0xFF	; 255
     318:	e0 93 a3 00 	sts	0x00A3, r30	; 0x8000a3 <sLOC_u8CharCounter.1911>

    if(sLOC_u8CharCounter == DRIVER_ID_SIZE)
     31c:	e3 30       	cpi	r30, 0x03	; 3
     31e:	71 f4       	brne	.+28     	; 0x33c <USART_RX_ISR_Callback+0x4a>
    {
        /*Add a NULL character at the end*/
        Glob_u8DriverID[sLOC_u8CharCounter] = '\0';
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	eb 55       	subi	r30, 0x5B	; 91
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	10 82       	st	Z, r1

        sLOC_u8CharCounter = 0;
     328:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <sLOC_u8CharCounter.1911>
 
        /*Disable the UART to stop it from serving another customer 
          until processing this customer's request*/
        MCAL_UART_Disable();
     32c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <MCAL_UART_Disable>

        fptr_st_UserAdminInterface = st_UAI_SendIDToAdmin;
     330:	88 e1       	ldi	r24, 0x18	; 24
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     338:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     33c:	08 95       	ret

0000033e <SPI_Init>:
    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
}

static void SPI_Init()
{
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	2b 97       	sbiw	r28, 0x0b	; 11
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
    SPI_Config_t LOC_sSPI_cfg;
    GPIO_Pin_Config_t LOC_sGPIO_CFG;

    LOC_sSPI_cfg.SPI_Mode       = SPI_MODE_SLAVE;
     352:	19 82       	std	Y+1, r1	; 0x01
    LOC_sSPI_cfg.SPI_DataOrder  = SPI_FIRST_BIT_LSB;
     354:	80 e2       	ldi	r24, 0x20	; 32
     356:	8a 83       	std	Y+2, r24	; 0x02
    LOC_sSPI_cfg.SPI_CPOL       = SPI_IDLE_HIGH;
     358:	88 e0       	ldi	r24, 0x08	; 8
     35a:	8b 83       	std	Y+3, r24	; 0x03
    LOC_sSPI_cfg.SPI_CPHA       = SPI_SAMPLE_SECOND_EDGE;
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	8c 83       	std	Y+4, r24	; 0x04
    LOC_sSPI_cfg.SPI_IRQ_EN     = SPI_IRQ_ENABLE;
     360:	80 e8       	ldi	r24, 0x80	; 128
     362:	8f 83       	std	Y+7, r24	; 0x07
    LOC_sSPI_cfg.SPI_IRQHandler = SPI_ISR_Callback;
     364:	87 e8       	ldi	r24, 0x87	; 135
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	99 87       	std	Y+9, r25	; 0x09
     36a:	88 87       	std	Y+8, r24	; 0x08

    MCAL_SPI_Init(&LOC_sSPI_cfg);
     36c:	ce 01       	movw	r24, r28
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	0e 94 00 06 	call	0xc00	; 0xc00 <MCAL_SPI_Init>

    /*Configure the pin to be used to interrupt the admin ECU to request attention*/
    LOC_sGPIO_CFG.pinMode = GPIO_MODE_OUTPUT;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	8b 87       	std	Y+11, r24	; 0x0b
    LOC_sGPIO_CFG.pinNumber = ADMIN_ECU_INTERRUPT_PIN;
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	8a 87       	std	Y+10, r24	; 0x0a
    MCAL_GPIO_Init(ADMIN_ECU_INTERRUPT_PORT, &LOC_sGPIO_CFG);
     37c:	be 01       	movw	r22, r28
     37e:	66 5f       	subi	r22, 0xF6	; 246
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	86 e3       	ldi	r24, 0x36	; 54
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>

}
     38a:	2b 96       	adiw	r28, 0x0b	; 11
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <SPI_SendingID>:
*/
static void SPI_SendingID(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    if(sLOC_u8CharCounter == 0)
     39c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <sLOC_u8CharCounter.1915>
     3a0:	81 11       	cpse	r24, r1
     3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <SPI_SendingID+0x14>
    {
        MCAL_SPI_SendData((uint8_t *)&Glob_u8GateAddress, PollingDisable);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	8e e9       	ldi	r24, 0x9E	; 158
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 2b 06 	call	0xc56	; 0xc56 <MCAL_SPI_SendData>
     3ae:	06 c0       	rjmp	.+12     	; 0x3bc <SPI_SendingID+0x20>
    }else{
        MCAL_SPI_SendData(&Glob_u8DriverID[sLOC_u8CharCounter - 1], PollingDisable);
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	8c 55       	subi	r24, 0x5C	; 92
     3b6:	9f 4f       	sbci	r25, 0xFF	; 255
     3b8:	0e 94 2b 06 	call	0xc56	; 0xc56 <MCAL_SPI_SendData>
    }
            
    sLOC_u8CharCounter++;
     3bc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <sLOC_u8CharCounter.1915>
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
     3c2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <sLOC_u8CharCounter.1915>

    if(sLOC_u8CharCounter == (DRIVER_ID_SIZE + 1))
     3c6:	84 30       	cpi	r24, 0x04	; 4
     3c8:	a9 f4       	brne	.+42     	; 0x3f4 <SPI_SendingID+0x58>
    {
        MCAL_TIMER0_Stop();
     3ca:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MCAL_TIMER0_Stop>

        sLOC_u8CharCounter = 0;
     3ce:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <sLOC_u8CharCounter.1915>
        
        Glob_u8ModuleCurrentState = UAI_WAITING_AUTHENTICATION_RESULT;
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Glob_u8ModuleCurrentState>
        
        /*Enable the timer to prevent getting stuck in this state forever*/
        MCAL_TIMER0_SingleIntervalDelayms(TIME_BEFORE_RESET_MS, Timer0_SingleIntervalDelaycallback);
     3d8:	44 e4       	ldi	r20, 0x44	; 68
     3da:	51 e0       	ldi	r21, 0x01	; 1
     3dc:	68 ee       	ldi	r22, 0xE8	; 232
     3de:	73 e0       	ldi	r23, 0x03	; 3
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 19 07 	call	0xe32	; 0xe32 <MCAL_TIMER0_SingleIntervalDelayms>

        fptr_st_UserAdminInterface = st_UAI_Idle;
     3e8:	8b e4       	ldi	r24, 0x4B	; 75
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     3f0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     3f4:	08 95       	ret

000003f6 <st_UAI_ShowWelcomeMsg>:
 * @brief this state prints the welcome message to guide the user on what to do.  
 * 
 */
void st_UAI_ShowWelcomeMsg(void)
{
    Glob_u8ModuleCurrentState = UAI_IDLE; 
     3f6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <Glob_u8ModuleCurrentState>

    LCD_Clear_Screen();
     3fa:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_FIRST_LINE, 4);
     3fe:	64 e0       	ldi	r22, 0x04	; 4
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Welcome!"));
     406:	8c e6       	ldi	r24, 0x6C	; 108
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Please enter the 3 digits ID"));
     416:	85 e7       	ldi	r24, 0x75	; 117
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_Send_String>

    /*Enable the UART module to take the user input*/
    MCAL_UART_Enable();
     41e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <MCAL_UART_Enable>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     422:	8b e4       	ldi	r24, 0x4B	; 75
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     42a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     42e:	08 95       	ret

00000430 <st_UAI_SendIDToAdmin>:
 * 
 */
void st_UAI_SendIDToAdmin(void)
{    
    
    LCD_Clear_Screen();
     430:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_Clear_Screen>
    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Processing!"));
     43c:	82 e9       	ldi	r24, 0x92	; 146
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_Send_String>

    /*Set the current state of the module*/
    Glob_u8ModuleCurrentState = UAI_SENDING_ID;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Glob_u8ModuleCurrentState>

    MCAL_TIMER0_SingleIntervalDelayms(TIME_BEFORE_RESET_MS, Timer0_SingleIntervalDelaycallback);
     44a:	44 e4       	ldi	r20, 0x44	; 68
     44c:	51 e0       	ldi	r21, 0x01	; 1
     44e:	68 ee       	ldi	r22, 0xE8	; 232
     450:	73 e0       	ldi	r23, 0x03	; 3
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 19 07 	call	0xe32	; 0xe32 <MCAL_TIMER0_SingleIntervalDelayms>

    /*Toggle the ADMIN_ECU_INTERRUPT_PIN to alert the admin that we need attention*/
    MCAL_GPIO_TogglePin(ADMIN_ECU_INTERRUPT_PORT, ADMIN_ECU_INTERRUPT_PIN);
     45a:	63 e0       	ldi	r22, 0x03	; 3
     45c:	86 e3       	ldi	r24, 0x36	; 54
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 79 05 	call	0xaf2	; 0xaf2 <MCAL_GPIO_TogglePin>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     464:	8b e4       	ldi	r24, 0x4B	; 75
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     46c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     470:	08 95       	ret

00000472 <st_UAI_IDAuthenticationPassed>:
 * 
 */
void st_UAI_IDAuthenticationPassed(void)
{
    /*Send a signal to the alarm manager*/
    UAI_AM_ValidID();
     472:	0e 94 c7 00 	call	0x18e	; 0x18e <UAI_AM_ValidID>

    /*Send a signal to the gate controller to open the gate*/
    UAI_GC_OpenGateReuest();
     476:	0e 94 3d 01 	call	0x27a	; 0x27a <UAI_GC_OpenGateReuest>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     47a:	8b e4       	ldi	r24, 0x4B	; 75
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     482:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     486:	08 95       	ret

00000488 <st_UAI_IDAuthenticationFailed>:
 * 
 */
void st_UAI_IDAuthenticationFailed(void)
{
    /*Send a signal to the Alarm_Manager module.*/
    UAI_AM_InvalidID();    
     488:	0e 94 c0 00 	call	0x180	; 0x180 <UAI_AM_InvalidID>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     48c:	8b e4       	ldi	r24, 0x4B	; 75
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     494:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     498:	08 95       	ret

0000049a <SPI_GetAuthenticationResult>:
* @Func_name	:   SPI_GetAuthenticationResult
* @brief		:   This function checks the authentication process result.
======================================================================================================================
*/
void SPI_GetAuthenticationResult(void)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	1f 92       	push	r1
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
    static boolean LOC_boolDetectedGateAddress = FALSE;
    uint8_t LOC_u8RxBuffer = GATE_ECU_ADDRESS;
     4a4:	8e e7       	ldi	r24, 0x7E	; 126
     4a6:	89 83       	std	Y+1, r24	; 0x01

    MCAL_SPI_ReceiveData(&LOC_u8RxBuffer, PollingEnable);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	0e 94 33 06 	call	0xc66	; 0xc66 <MCAL_SPI_ReceiveData>

    /*If we already received the gate ID from the last transmission 
      then check the authentication result*/
    if(LOC_boolDetectedGateAddress)
     4b2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <LOC_boolDetectedGateAddress.1919>
     4b6:	88 23       	and	r24, r24
     4b8:	d9 f0       	breq	.+54     	; 0x4f0 <SPI_GetAuthenticationResult+0x56>
    { 
        /*Stop the timer as we are already done from this state*/
        MCAL_TIMER0_Stop();
     4ba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MCAL_TIMER0_Stop>

        LOC_boolDetectedGateAddress = FALSE;
     4be:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <LOC_boolDetectedGateAddress.1919>

        /*check if the data we got matches the successful authentication code*/
        if(LOC_u8RxBuffer == AUTHENTICATION_RESULT_PASS)
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	8f 3f       	cpi	r24, 0xFF	; 255
     4c6:	39 f4       	brne	.+14     	; 0x4d6 <SPI_GetAuthenticationResult+0x3c>
        {
            fptr_st_UserAdminInterface = st_UAI_IDAuthenticationPassed;
     4c8:	89 e3       	ldi	r24, 0x39	; 57
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     4d0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <SPI_GetAuthenticationResult+0x48>
        }else{
            fptr_st_UserAdminInterface = st_UAI_IDAuthenticationFailed;
     4d6:	84 e4       	ldi	r24, 0x44	; 68
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     4de:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
        }

        LOC_u8RxBuffer = 0x00u;
     4e2:	19 82       	std	Y+1, r1	; 0x01
        
        /*Write zero in the transmit buffer to avoid confusion in the next time*/
        MCAL_SPI_SendData(&LOC_u8RxBuffer, PollingDisable);
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	ce 01       	movw	r24, r28
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	0e 94 2b 06 	call	0xc56	; 0xc56 <MCAL_SPI_SendData>
     4ee:	0b c0       	rjmp	.+22     	; 0x506 <SPI_GetAuthenticationResult+0x6c>

    }else{

        /*check if the received data matches the the gate address*/
        if(LOC_u8RxBuffer == Glob_u8GateAddress)
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	8e 37       	cpi	r24, 0x7E	; 126
     4f4:	41 f4       	brne	.+16     	; 0x506 <SPI_GetAuthenticationResult+0x6c>
        {
            MCAL_SPI_SendData(&LOC_u8RxBuffer , PollingEnable);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	0e 94 2b 06 	call	0xc56	; 0xc56 <MCAL_SPI_SendData>
            LOC_boolDetectedGateAddress = TRUE;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <LOC_boolDetectedGateAddress.1919>
        }else{

        }
    }
}
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <SPI_ISR_Callback>:
* @note			:   none.
======================================================================================================================
*/
static void SPI_ISR_Callback(void)
{
    switch (Glob_u8ModuleCurrentState)
     50e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Glob_u8ModuleCurrentState>
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	19 f0       	breq	.+6      	; 0x51c <SPI_ISR_Callback+0xe>
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	21 f0       	breq	.+8      	; 0x522 <SPI_ISR_Callback+0x14>
     51a:	08 95       	ret
        /* If we didn't send a request just ignore this interrupt as it's probably
           done to communicate with the other gate ECU. (Can be changed later if needed)*/
        break;

    case UAI_SENDING_ID:
        SPI_SendingID();
     51c:	0e 94 ce 01 	call	0x39c	; 0x39c <SPI_SendingID>
        break;
     520:	08 95       	ret

    case UAI_WAITING_AUTHENTICATION_RESULT:
        SPI_GetAuthenticationResult();
     522:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_GetAuthenticationResult>
     526:	08 95       	ret

00000528 <st_UAI_Init>:
 * 
 */
void st_UAI_Init(void)
{
    /*Initialize the USART module to get the input from the user*/
    USART_Init();
     528:	0e 94 4c 01 	call	0x298	; 0x298 <USART_Init>

    /*Initialize the SPI module to communicate with the admin ECU*/
    SPI_Init();
     52c:	0e 94 9f 01 	call	0x33e	; 0x33e <SPI_Init>

    /*Initialize the LCD module to print messages to the driver*/
    LCD_Init();
     530:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_Init>
    /*Turn off the cursor for a more clean feel*/
    LCD_Send_Command(LCD_CURSOR_OFF);
     534:	8c e0       	ldi	r24, 0x0C	; 12
     536:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
    
    /*Set the initial state*/
    fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     53a:	8b ef       	ldi	r24, 0xFB	; 251
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     542:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     546:	08 95       	ret

00000548 <GC_UAI_GateClosed>:
 * 
 */
void GC_UAI_GateClosed(void)
{
  /*Send a signal to turn off the alarm*/
  UAI_AM_TurnOffAlarmGateClosed();
     548:	0e 94 ce 00 	call	0x19c	; 0x19c <UAI_AM_TurnOffAlarmGateClosed>

  /*Return to the original state to serve the next customer*/
  fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     54c:	8b ef       	ldi	r24, 0xFB	; 251
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     554:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     558:	08 95       	ret

0000055a <AM_UAI_AlarmOff>:
 * it that the alarm duration has ended.
 * 
 */
void AM_UAI_AlarmOff()
{
 fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     55a:	8b ef       	ldi	r24, 0xFB	; 251
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <fptr_st_UserAdminInterface+0x1>
     562:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <fptr_st_UserAdminInterface>
     566:	08 95       	ret

00000568 <HAL_Buzzer_Init>:
 * @param copy_BuzzerPin  :   The GPIO pin that is connected to the Buzzer.
 * @param copy_BuzzerState :   The new state of the Buzzer must be a value of @ref BUZZER_DEFINE.
 */
void HAL_Buzzer_SetState(volatile GPIO_typedef* GPIOx, uint8_t copy_BuzzerPin, eBuzzerState_t copy_BuzzerState)
{
    MCAL_GPIO_WritePin(GPIOx, copy_BuzzerPin, copy_BuzzerState);
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	00 d0       	rcall	.+0      	; 0x56e <HAL_Buzzer_Init+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	21 e0       	ldi	r18, 0x01	; 1
     574:	2a 83       	std	Y+2, r18	; 0x02
     576:	69 83       	std	Y+1, r22	; 0x01
     578:	be 01       	movw	r22, r28
     57a:	6f 5f       	subi	r22, 0xFF	; 255
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <HAL_Buzzer_ToggleState>:
 * @param GPIOx         :   The GPIO port that is connected to the Buzzer.
 * @param copy_BuzzerPin  :   The GPIO pin that is connected to the Buzzer.
 */
void HAL_Buzzer_ToggleState(volatile GPIO_typedef* GPIOx, uint8_t copy_BuzzerPin)
{
    MCAL_GPIO_TogglePin(GPIOx, copy_BuzzerPin);
     58c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <MCAL_GPIO_TogglePin>
     590:	08 95       	ret

00000592 <_delay_ms>:
	
	config.pinNumber = LCD_D7;
	config.pinMode = GPIO_MODE_OUTPUT;
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
#endif
}
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <_delay_ms+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	19 82       	std	Y+1, r1	; 0x01
     59e:	0b c0       	rjmp	.+22     	; 0x5b6 <_delay_ms+0x24>
     5a0:	1a 82       	std	Y+2, r1	; 0x02
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <_delay_ms+0x18>
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	9f 5f       	subi	r25, 0xFF	; 255
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	94 36       	cpi	r25, 0x64	; 100
     5ae:	d0 f3       	brcs	.-12     	; 0x5a4 <_delay_ms+0x12>
     5b0:	99 81       	ldd	r25, Y+1	; 0x01
     5b2:	9f 5f       	subi	r25, 0xFF	; 255
     5b4:	99 83       	std	Y+1, r25	; 0x01
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	98 17       	cp	r25, r24
     5ba:	90 f3       	brcs	.-28     	; 0x5a0 <_delay_ms+0xe>
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <LCD_Enable_Pulse>:
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	89 e3       	ldi	r24, 0x39	; 57
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     5d2:	82 e3       	ldi	r24, 0x32	; 50
     5d4:	0e 94 c9 02 	call	0x592	; 0x592 <_delay_ms>
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	89 e3       	ldi	r24, 0x39	; 57
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     5e4:	08 95       	ret

000005e6 <LCD_Send_Command>:
     5e6:	cf 93       	push	r28
     5e8:	c8 2f       	mov	r28, r24
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	89 e3       	ldi	r24, 0x39	; 57
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	89 e3       	ldi	r24, 0x39	; 57
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     602:	4c 2f       	mov	r20, r28
     604:	40 71       	andi	r20, 0x10	; 16
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	55 95       	asr	r21
     60a:	47 95       	ror	r20
     60c:	55 95       	asr	r21
     60e:	47 95       	ror	r20
     610:	55 95       	asr	r21
     612:	47 95       	ror	r20
     614:	55 95       	asr	r21
     616:	47 95       	ror	r20
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	89 e3       	ldi	r24, 0x39	; 57
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     622:	4c 2f       	mov	r20, r28
     624:	40 72       	andi	r20, 0x20	; 32
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	55 95       	asr	r21
     62a:	47 95       	ror	r20
     62c:	55 95       	asr	r21
     62e:	47 95       	ror	r20
     630:	55 95       	asr	r21
     632:	47 95       	ror	r20
     634:	55 95       	asr	r21
     636:	47 95       	ror	r20
     638:	55 95       	asr	r21
     63a:	47 95       	ror	r20
     63c:	63 e0       	ldi	r22, 0x03	; 3
     63e:	89 e3       	ldi	r24, 0x39	; 57
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     646:	4c 2f       	mov	r20, r28
     648:	40 74       	andi	r20, 0x40	; 64
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	04 2e       	mov	r0, r20
     64e:	45 2f       	mov	r20, r21
     650:	00 0c       	add	r0, r0
     652:	44 1f       	adc	r20, r20
     654:	55 0b       	sbc	r21, r21
     656:	00 0c       	add	r0, r0
     658:	44 1f       	adc	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	64 e0       	ldi	r22, 0x04	; 4
     65e:	89 e3       	ldi	r24, 0x39	; 57
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     666:	4c 2f       	mov	r20, r28
     668:	44 1f       	adc	r20, r20
     66a:	44 27       	eor	r20, r20
     66c:	44 1f       	adc	r20, r20
     66e:	65 e0       	ldi	r22, 0x05	; 5
     670:	89 e3       	ldi	r24, 0x39	; 57
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     678:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_Enable_Pulse>
     67c:	4c 2f       	mov	r20, r28
     67e:	41 70       	andi	r20, 0x01	; 1
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	89 e3       	ldi	r24, 0x39	; 57
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     68a:	4c 2f       	mov	r20, r28
     68c:	42 70       	andi	r20, 0x02	; 2
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	55 95       	asr	r21
     692:	47 95       	ror	r20
     694:	63 e0       	ldi	r22, 0x03	; 3
     696:	89 e3       	ldi	r24, 0x39	; 57
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     69e:	4c 2f       	mov	r20, r28
     6a0:	44 70       	andi	r20, 0x04	; 4
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	55 95       	asr	r21
     6a6:	47 95       	ror	r20
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	89 e3       	ldi	r24, 0x39	; 57
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     6b6:	c8 70       	andi	r28, 0x08	; 8
     6b8:	4c 2f       	mov	r20, r28
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	55 95       	asr	r21
     6be:	47 95       	ror	r20
     6c0:	55 95       	asr	r21
     6c2:	47 95       	ror	r20
     6c4:	55 95       	asr	r21
     6c6:	47 95       	ror	r20
     6c8:	65 e0       	ldi	r22, 0x05	; 5
     6ca:	89 e3       	ldi	r24, 0x39	; 57
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     6d2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_Enable_Pulse>
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <LCD_Init>:
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	84 e1       	ldi	r24, 0x14	; 20
     6e2:	0e 94 c9 02 	call	0x592	; 0x592 <_delay_ms>
     6e6:	c7 ee       	ldi	r28, 0xE7	; 231
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
     6ea:	18 82       	st	Y, r1
     6ec:	11 e0       	ldi	r17, 0x01	; 1
     6ee:	19 83       	std	Y+1, r17	; 0x01
     6f0:	be 01       	movw	r22, r28
     6f2:	89 e3       	ldi	r24, 0x39	; 57
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     6fa:	18 83       	st	Y, r17
     6fc:	19 83       	std	Y+1, r17	; 0x01
     6fe:	be 01       	movw	r22, r28
     700:	89 e3       	ldi	r24, 0x39	; 57
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	89 e3       	ldi	r24, 0x39	; 57
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	89 e3       	ldi	r24, 0x39	; 57
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     720:	8f e0       	ldi	r24, 0x0F	; 15
     722:	0e 94 c9 02 	call	0x592	; 0x592 <_delay_ms>
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	88 83       	st	Y, r24
     72a:	19 83       	std	Y+1, r17	; 0x01
     72c:	be 01       	movw	r22, r28
     72e:	89 e3       	ldi	r24, 0x39	; 57
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	88 83       	st	Y, r24
     73a:	19 83       	std	Y+1, r17	; 0x01
     73c:	be 01       	movw	r22, r28
     73e:	89 e3       	ldi	r24, 0x39	; 57
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	88 83       	st	Y, r24
     74a:	19 83       	std	Y+1, r17	; 0x01
     74c:	be 01       	movw	r22, r28
     74e:	89 e3       	ldi	r24, 0x39	; 57
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     756:	85 e0       	ldi	r24, 0x05	; 5
     758:	88 83       	st	Y, r24
     75a:	19 83       	std	Y+1, r17	; 0x01
     75c:	be 01       	movw	r22, r28
     75e:	89 e3       	ldi	r24, 0x39	; 57
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	0e 94 c9 02 	call	0x592	; 0x592 <_delay_ms>
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     772:	88 e2       	ldi	r24, 0x28	; 40
     774:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     77e:	80 e8       	ldi	r24, 0x80	; 128
     780:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     784:	8f e0       	ldi	r24, 0x0F	; 15
     786:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	08 95       	ret

00000792 <LCD_Cursor_XY>:
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	60 31       	cpi	r22, 0x10	; 16
     798:	18 f5       	brcc	.+70     	; 0x7e0 <LCD_Cursor_XY+0x4e>
     79a:	84 30       	cpi	r24, 0x04	; 4
     79c:	08 f5       	brcc	.+66     	; 0x7e0 <LCD_Cursor_XY+0x4e>
     79e:	d6 2f       	mov	r29, r22
     7a0:	c8 2f       	mov	r28, r24
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	59 f0       	breq	.+22     	; 0x7bc <LCD_Cursor_XY+0x2a>
     7a6:	28 f0       	brcs	.+10     	; 0x7b2 <LCD_Cursor_XY+0x20>
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	69 f0       	breq	.+26     	; 0x7c6 <LCD_Cursor_XY+0x34>
     7ac:	83 30       	cpi	r24, 0x03	; 3
     7ae:	81 f0       	breq	.+32     	; 0x7d0 <LCD_Cursor_XY+0x3e>
     7b0:	13 c0       	rjmp	.+38     	; 0x7d8 <LCD_Cursor_XY+0x46>
     7b2:	80 e8       	ldi	r24, 0x80	; 128
     7b4:	86 0f       	add	r24, r22
     7b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <LCD_Cursor_XY+0x46>
     7bc:	80 ec       	ldi	r24, 0xC0	; 192
     7be:	86 0f       	add	r24, r22
     7c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <LCD_Cursor_XY+0x46>
     7c6:	80 e9       	ldi	r24, 0x90	; 144
     7c8:	86 0f       	add	r24, r22
     7ca:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <LCD_Cursor_XY+0x46>
     7d0:	80 ed       	ldi	r24, 0xD0	; 208
     7d2:	86 0f       	add	r24, r22
     7d4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
     7d8:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <lineCounter>
     7dc:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <charCounter>
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <LCD_Clear_Screen>:
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_CLEAR_SCREEN);
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
	charCounter = 0;
     7ec:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <charCounter>
	lineCounter = 0;
     7f0:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <lineCounter>
     7f4:	08 95       	ret

000007f6 <Check_End_Of_Line>:
============================================================================================================
 */
void Check_End_Of_Line()
{
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
     7f6:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <charCounter>
     7fa:	90 31       	cpi	r25, 0x10	; 16
     7fc:	68 f0       	brcs	.+26     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7fe:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <lineCounter>
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	48 f4       	brcc	.+18     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	{
		charCounter = 0;
     806:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <charCounter>
		lineCounter++;
     80a:	8f 5f       	subi	r24, 0xFF	; 255
     80c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <lineCounter>
		LCD_Cursor_XY(lineCounter, 0);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_Cursor_XY>
     816:	08 95       	ret
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
     818:	90 31       	cpi	r25, 0x10	; 16
     81a:	68 f0       	brcs	.+26     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     81c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <lineCounter>
     820:	83 30       	cpi	r24, 0x03	; 3
     822:	49 f4       	brne	.+18     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	{
		LCD_Clear_Screen();
     824:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <LCD_Send_Command>
		charCounter = 0;
     82e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <charCounter>
		lineCounter = 0;
     832:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <lineCounter>
     836:	08 95       	ret

00000838 <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8_t data)
{
     838:	cf 93       	push	r28
     83a:	c8 2f       	mov	r28, r24
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
     83c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	89 e3       	ldi	r24, 0x39	; 57
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	89 e3       	ldi	r24, 0x39	; 57
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
     858:	4c 2f       	mov	r20, r28
     85a:	40 71       	andi	r20, 0x10	; 16
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	55 95       	asr	r21
     860:	47 95       	ror	r20
     862:	55 95       	asr	r21
     864:	47 95       	ror	r20
     866:	55 95       	asr	r21
     868:	47 95       	ror	r20
     86a:	55 95       	asr	r21
     86c:	47 95       	ror	r20
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	89 e3       	ldi	r24, 0x39	; 57
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
     878:	4c 2f       	mov	r20, r28
     87a:	40 72       	andi	r20, 0x20	; 32
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	55 95       	asr	r21
     880:	47 95       	ror	r20
     882:	55 95       	asr	r21
     884:	47 95       	ror	r20
     886:	55 95       	asr	r21
     888:	47 95       	ror	r20
     88a:	55 95       	asr	r21
     88c:	47 95       	ror	r20
     88e:	55 95       	asr	r21
     890:	47 95       	ror	r20
     892:	63 e0       	ldi	r22, 0x03	; 3
     894:	89 e3       	ldi	r24, 0x39	; 57
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
     89c:	4c 2f       	mov	r20, r28
     89e:	40 74       	andi	r20, 0x40	; 64
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	04 2e       	mov	r0, r20
     8a4:	45 2f       	mov	r20, r21
     8a6:	00 0c       	add	r0, r0
     8a8:	44 1f       	adc	r20, r20
     8aa:	55 0b       	sbc	r21, r21
     8ac:	00 0c       	add	r0, r0
     8ae:	44 1f       	adc	r20, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	64 e0       	ldi	r22, 0x04	; 4
     8b4:	89 e3       	ldi	r24, 0x39	; 57
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
     8bc:	4c 2f       	mov	r20, r28
     8be:	44 1f       	adc	r20, r20
     8c0:	44 27       	eor	r20, r20
     8c2:	44 1f       	adc	r20, r20
     8c4:	65 e0       	ldi	r22, 0x05	; 5
     8c6:	89 e3       	ldi	r24, 0x39	; 57
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
     8ce:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
     8d2:	4c 2f       	mov	r20, r28
     8d4:	41 70       	andi	r20, 0x01	; 1
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	89 e3       	ldi	r24, 0x39	; 57
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
     8e0:	4c 2f       	mov	r20, r28
     8e2:	42 70       	andi	r20, 0x02	; 2
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	55 95       	asr	r21
     8e8:	47 95       	ror	r20
     8ea:	63 e0       	ldi	r22, 0x03	; 3
     8ec:	89 e3       	ldi	r24, 0x39	; 57
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
     8f4:	4c 2f       	mov	r20, r28
     8f6:	44 70       	andi	r20, 0x04	; 4
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	55 95       	asr	r21
     8fc:	47 95       	ror	r20
     8fe:	55 95       	asr	r21
     900:	47 95       	ror	r20
     902:	64 e0       	ldi	r22, 0x04	; 4
     904:	89 e3       	ldi	r24, 0x39	; 57
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
     90c:	c8 70       	andi	r28, 0x08	; 8
     90e:	4c 2f       	mov	r20, r28
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	55 95       	asr	r21
     914:	47 95       	ror	r20
     916:	55 95       	asr	r21
     918:	47 95       	ror	r20
     91a:	55 95       	asr	r21
     91c:	47 95       	ror	r20
     91e:	65 e0       	ldi	r22, 0x05	; 5
     920:	89 e3       	ldi	r24, 0x39	; 57
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
     928:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_Enable_Pulse>
#endif
	charCounter++;
     92c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <charCounter>
     930:	8f 5f       	subi	r24, 0xFF	; 255
     932:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <charCounter>
}
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	ec 01       	movw	r28, r24
	while(*string)
     940:	03 c0       	rjmp	.+6      	; 0x948 <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_Send_Char>
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
	while(*string)
     948:	88 81       	ld	r24, Y
     94a:	81 11       	cpse	r24, r1
     94c:	fa cf       	rjmp	.-12     	; 0x942 <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <HAL_LED_Init>:
 * 
 * @param GPIOx : The GPIO port that is connected to the LED.
 * @param copy_LED_Pin : The GPIO pin that is connected to the LED.
 */
void HAL_LED_Init(volatile GPIO_typedef* GPIOx, uint8_t copy_LED_Pin)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <HAL_LED_Init+0x6>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
    GPIO_Pin_Config_t cfg;

    cfg.pinMode = GPIO_MODE_OUTPUT;
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	2a 83       	std	Y+2, r18	; 0x02
    cfg.pinNumber = copy_LED_Pin;
     962:	69 83       	std	Y+1, r22	; 0x01

    MCAL_GPIO_Init(GPIOx, &cfg);
     964:	be 01       	movw	r22, r28
     966:	6f 5f       	subi	r22, 0xFF	; 255
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <HAL_LED_SetState>:
 * @param copy_LED_Pin  :   The GPIO pin that is connected to the LED.
 * @param copy_LEDState :   The new state of the LED must be a value of @ref LED_DEFINE.
 */
void HAL_LED_SetState(volatile GPIO_typedef* GPIOx, uint8_t copy_LED_Pin, eLEDStatus_t copy_LEDState)
{
    MCAL_GPIO_WritePin(GPIOx, copy_LED_Pin, copy_LEDState);
     978:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     97c:	08 95       	ret

0000097e <HAL_LED_ToggleState>:
 * @param GPIOx         :   The GPIO port that is connected to the LED.
 * @param copy_LED_Pin  :   The GPIO pin that is connected to the LED.
 */
void HAL_LED_ToggleState(volatile GPIO_typedef* GPIOx, uint8_t copy_LED_Pin)
{
    MCAL_GPIO_TogglePin(GPIOx, copy_LED_Pin);
     97e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <MCAL_GPIO_TogglePin>
     982:	08 95       	ret

00000984 <HAL_PIR_Init>:
 * 
 * @param GPIOx : The GPIO port of that is connected to the PIR sensor.
 * @param copy_PIR_Pin : The GPIO pin of that is connected to the PIR sensor.
 */
void HAL_PIR_Init(volatile GPIO_typedef* GPIOx, uint8_t copy_PIR_Pin)
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	00 d0       	rcall	.+0      	; 0x98a <HAL_PIR_Init+0x6>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
    GPIO_Pin_Config_t cfg;

    cfg.pinMode = GPIO_MODE_INPUT_FLOATING;
     98e:	1a 82       	std	Y+2, r1	; 0x02
    cfg.pinNumber = copy_PIR_Pin;
     990:	69 83       	std	Y+1, r22	; 0x01

    MCAL_GPIO_Init(GPIOx, &cfg);
     992:	be 01       	movw	r22, r28
     994:	6f 5f       	subi	r22, 0xFF	; 255
     996:	7f 4f       	sbci	r23, 0xFF	; 255
     998:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
}
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <HAL_PIR_ReadStatus>:
{
    ePIRStatus_t LOC_u8PIRStatus;
    uint8_t LOC_u8PinStatus;
    
    /*Read the value of the pin conected to the sensor*/
    LOC_u8PinStatus = MCAL_GPIO_ReadPin(GPIOx, copy_PIR_Pin);
     9a6:	0e 94 46 05 	call	0xa8c	; 0xa8c <MCAL_GPIO_ReadPin>

    /*Determine the status of the PIR sensor*/
    LOC_u8PIRStatus = (LOC_u8PinStatus == GPIO_PIN_HIGH)? PIR_MotionDetected : PIR_NoMotionDetected;
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <HAL_PIR_ReadStatus+0xc>
     9b0:	90 e0       	ldi	r25, 0x00	; 0

    return LOC_u8PIRStatus;
}
     9b2:	89 2f       	mov	r24, r25
     9b4:	08 95       	ret

000009b6 <HAL_ServoMotorInit>:
 * @brief This function does the required initialization to use the servo motor.
 * 
 * @return eStatus_t: E_OK if the initialization was successful, E_NOK otherwise.
 */
eStatus_t HAL_ServoMotorInit(void)
{
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	27 97       	sbiw	r28, 0x07	; 7
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
    eStatus_t LOC_sStatus = E_OK;

    sTIMER2_Config_t timer2_Config;
    GPIO_Pin_Config_t GPIO_cfg;

    GPIO_cfg.pinNumber = GPIO_PIN7;
     9cc:	17 e0       	ldi	r17, 0x07	; 7
     9ce:	1e 83       	std	Y+6, r17	; 0x06
    GPIO_cfg.pinMode = GPIO_MODE_OUTPUT;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	8f 83       	std	Y+7, r24	; 0x07
    MCAL_GPIO_Init(GPIOD, &GPIO_cfg);
     9d4:	be 01       	movw	r22, r28
     9d6:	6a 5f       	subi	r22, 0xFA	; 250
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	80 e3       	ldi	r24, 0x30	; 48
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>

    timer2_Config.Timer2_CLK_SRC = Timer2_Prescale_1024;
     9e2:	19 83       	std	Y+1, r17	; 0x01
    timer2_Config.Timer2_Mode = Timer2_FAST_PWM_Mode;
     9e4:	88 e4       	ldi	r24, 0x48	; 72
     9e6:	8a 83       	std	Y+2, r24	; 0x02
    timer2_Config.Timer2_COM = Timer2_COM_Set;
     9e8:	80 e3       	ldi	r24, 0x30	; 48
     9ea:	8b 83       	std	Y+3, r24	; 0x03
    timer2_Config.Timer2_OCIE = Timer2_TOCI_Disable;
     9ec:	1d 82       	std	Y+5, r1	; 0x05
    timer2_Config.Timer2_OIE = Timer2_TOI_Disable;
     9ee:	1c 82       	std	Y+4, r1	; 0x04

    MCAL_TIMER2_SetCompare(ServoMotor_0Degree);
     9f0:	80 ef       	ldi	r24, 0xF0	; 240
     9f2:	0e 94 2f 08 	call	0x105e	; 0x105e <MCAL_TIMER2_SetCompare>

    LOC_sStatus = MCAL_TIMER2_Init(& timer2_Config);
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	0e 94 ba 07 	call	0xf74	; 0xf74 <MCAL_TIMER2_Init>


    return LOC_sStatus;
}
     9fe:	27 96       	adiw	r28, 0x07	; 7
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	08 95       	ret

00000a12 <HAL_ServoMotorTurn>:
 */
eStatus_t HAL_ServoMotorTurn(eServoMotorDegree_t copy_eDegree)
{
    eStatus_t LOC_sStatus = E_OK;
    
    MCAL_TIMER2_SetCompare(copy_eDegree);
     a12:	0e 94 2f 08 	call	0x105e	; 0x105e <MCAL_TIMER2_SetCompare>

    return LOC_sStatus;
}
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret

00000a1a <MCAL_GPIO_Init>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePort(volatile GPIO_typedef * GPIOx, uint8_t value)
{
    GPIOx->PORT = (uint8_t)value;
     a1a:	dc 01       	movw	r26, r24
     a1c:	fb 01       	movw	r30, r22
     a1e:	81 81       	ldd	r24, Z+1	; 0x01
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	79 f4       	brne	.+30     	; 0xa42 <MCAL_GPIO_Init+0x28>
     a24:	11 96       	adiw	r26, 0x01	; 1
     a26:	2c 91       	ld	r18, X
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	00 80       	ld	r0, Z
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <MCAL_GPIO_Init+0x1c>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <MCAL_GPIO_Init+0x18>
     a3a:	82 2b       	or	r24, r18
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	8c 93       	st	X, r24
     a40:	08 95       	ret
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	8c 91       	ld	r24, X
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	00 80       	ld	r0, Z
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <MCAL_GPIO_Init+0x3a>
     a50:	22 0f       	add	r18, r18
     a52:	33 1f       	adc	r19, r19
     a54:	0a 94       	dec	r0
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <MCAL_GPIO_Init+0x36>
     a58:	20 95       	com	r18
     a5a:	28 23       	and	r18, r24
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	2c 93       	st	X, r18
     a60:	11 97       	sbiw	r26, 0x01	; 1
     a62:	81 81       	ldd	r24, Z+1	; 0x01
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	89 f4       	brne	.+34     	; 0xa8a <MCAL_GPIO_Init+0x70>
     a68:	80 b7       	in	r24, 0x30	; 48
     a6a:	8e 7f       	andi	r24, 0xFE	; 254
     a6c:	80 bf       	out	0x30, r24	; 48
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	2c 91       	ld	r18, X
     a72:	12 97       	sbiw	r26, 0x02	; 2
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	00 80       	ld	r0, Z
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <MCAL_GPIO_Init+0x66>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	0a 94       	dec	r0
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <MCAL_GPIO_Init+0x62>
     a84:	82 2b       	or	r24, r18
     a86:	12 96       	adiw	r26, 0x02	; 2
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret

00000a8c <MCAL_GPIO_ReadPin>:
     a8c:	fc 01       	movw	r30, r24
     a8e:	40 81       	ld	r20, Z
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	c9 01       	movw	r24, r18
     a96:	06 2e       	mov	r0, r22
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <MCAL_GPIO_ReadPin+0x12>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <MCAL_GPIO_ReadPin+0xe>
     aa2:	24 2f       	mov	r18, r20
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	28 23       	and	r18, r24
     aa8:	39 23       	and	r19, r25
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <MCAL_GPIO_ReadPin+0x24>
     aac:	35 95       	asr	r19
     aae:	27 95       	ror	r18
     ab0:	6a 95       	dec	r22
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <MCAL_GPIO_ReadPin+0x20>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	23 2b       	or	r18, r19
     ab8:	09 f4       	brne	.+2      	; 0xabc <MCAL_GPIO_ReadPin+0x30>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret

00000abe <MCAL_GPIO_WritePin>:
     abe:	fc 01       	movw	r30, r24
     ac0:	41 30       	cpi	r20, 0x01	; 1
     ac2:	59 f4       	brne	.+22     	; 0xada <MCAL_GPIO_WritePin+0x1c>
     ac4:	22 81       	ldd	r18, Z+2	; 0x02
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <MCAL_GPIO_WritePin+0x12>
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	6a 95       	dec	r22
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <MCAL_GPIO_WritePin+0xe>
     ad4:	82 2b       	or	r24, r18
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	08 95       	ret
     ada:	92 81       	ldd	r25, Z+2	; 0x02
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <MCAL_GPIO_WritePin+0x28>
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	6a 95       	dec	r22
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <MCAL_GPIO_WritePin+0x24>
     aea:	20 95       	com	r18
     aec:	29 23       	and	r18, r25
     aee:	22 83       	std	Z+2, r18	; 0x02
     af0:	08 95       	ret

00000af2 <MCAL_GPIO_TogglePin>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_TogglePin(volatile GPIO_typedef * GPIOx, uint8_t pinNumber)
{
    TOGGLE_BIT(GPIOx->PORT,  pinNumber);
     af2:	fc 01       	movw	r30, r24
     af4:	42 81       	ldd	r20, Z+2	; 0x02
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <MCAL_GPIO_TogglePin+0xe>
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <MCAL_GPIO_TogglePin+0xa>
     b04:	24 27       	eor	r18, r20
     b06:	22 83       	std	Z+2, r18	; 0x02
     b08:	08 95       	ret

00000b0a <MCAL_SPI_GPIO_Set_Pins>:
* @brief		:   Disable the SPI peripheral.
======================================================================================================================
*/
void MCAL_SPI_Disable()
{
    SPI->SPCR &= SPCR_SPE_RESET;
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	00 d0       	rcall	.+0      	; 0xb14 <MCAL_SPI_GPIO_Set_Pins+0xa>
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	80 31       	cpi	r24, 0x10	; 16
     b1a:	c9 f5       	brne	.+114    	; 0xb8e <MCAL_SPI_GPIO_Set_Pins+0x84>
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	11 e0       	ldi	r17, 0x01	; 1
     b22:	1a 83       	std	Y+2, r17	; 0x02
     b24:	be 01       	movw	r22, r28
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	86 e3       	ldi	r24, 0x36	; 54
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     b32:	07 e0       	ldi	r16, 0x07	; 7
     b34:	09 83       	std	Y+1, r16	; 0x01
     b36:	1a 83       	std	Y+2, r17	; 0x02
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	86 e3       	ldi	r24, 0x36	; 54
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	1a 83       	std	Y+2, r17	; 0x02
     b4c:	be 01       	movw	r22, r28
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	86 e3       	ldi	r24, 0x36	; 54
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     b5a:	09 83       	std	Y+1, r16	; 0x01
     b5c:	1a 83       	std	Y+2, r17	; 0x02
     b5e:	be 01       	movw	r22, r28
     b60:	6f 5f       	subi	r22, 0xFF	; 255
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	86 e3       	ldi	r24, 0x36	; 54
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	1a 82       	std	Y+2, r1	; 0x02
     b72:	be 01       	movw	r22, r28
     b74:	6f 5f       	subi	r22, 0xFF	; 255
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	86 e3       	ldi	r24, 0x36	; 54
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	64 e0       	ldi	r22, 0x04	; 4
     b84:	86 e3       	ldi	r24, 0x36	; 54
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 5f 05 	call	0xabe	; 0xabe <MCAL_GPIO_WritePin>
     b8c:	32 c0       	rjmp	.+100    	; 0xbf2 <MCAL_SPI_GPIO_Set_Pins+0xe8>
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	89 83       	std	Y+1, r24	; 0x01
     b92:	11 e0       	ldi	r17, 0x01	; 1
     b94:	1a 83       	std	Y+2, r17	; 0x02
     b96:	be 01       	movw	r22, r28
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	86 e3       	ldi	r24, 0x36	; 54
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     ba4:	07 e0       	ldi	r16, 0x07	; 7
     ba6:	09 83       	std	Y+1, r16	; 0x01
     ba8:	1a 82       	std	Y+2, r1	; 0x02
     baa:	be 01       	movw	r22, r28
     bac:	6f 5f       	subi	r22, 0xFF	; 255
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	86 e3       	ldi	r24, 0x36	; 54
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	1a 82       	std	Y+2, r1	; 0x02
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	86 e3       	ldi	r24, 0x36	; 54
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     bcc:	09 83       	std	Y+1, r16	; 0x01
     bce:	1a 82       	std	Y+2, r1	; 0x02
     bd0:	be 01       	movw	r22, r28
     bd2:	6f 5f       	subi	r22, 0xFF	; 255
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	86 e3       	ldi	r24, 0x36	; 54
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     bde:	86 e0       	ldi	r24, 0x06	; 6
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	1a 83       	std	Y+2, r17	; 0x02
     be4:	be 01       	movw	r22, r28
     be6:	6f 5f       	subi	r22, 0xFF	; 255
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	86 e3       	ldi	r24, 0x36	; 54
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <MCAL_SPI_Init>:
     c00:	fc 01       	movw	r30, r24
     c02:	1d b8       	out	0x0d, r1	; 13
     c04:	9d b1       	in	r25, 0x0d	; 13
     c06:	60 81       	ld	r22, Z
     c08:	81 81       	ldd	r24, Z+1	; 0x01
     c0a:	54 81       	ldd	r21, Z+4	; 0x04
     c0c:	42 81       	ldd	r20, Z+2	; 0x02
     c0e:	33 81       	ldd	r19, Z+3	; 0x03
     c10:	26 81       	ldd	r18, Z+6	; 0x06
     c12:	86 2b       	or	r24, r22
     c14:	85 2b       	or	r24, r21
     c16:	84 2b       	or	r24, r20
     c18:	83 2b       	or	r24, r19
     c1a:	82 2b       	or	r24, r18
     c1c:	89 2b       	or	r24, r25
     c1e:	8d b9       	out	0x0d, r24	; 13
     c20:	8e b1       	in	r24, 0x0e	; 14
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	25 81       	ldd	r18, Z+5	; 0x05
     c28:	82 2b       	or	r24, r18
     c2a:	9e b1       	in	r25, 0x0e	; 14
     c2c:	89 2b       	or	r24, r25
     c2e:	8e b9       	out	0x0e, r24	; 14
     c30:	86 81       	ldd	r24, Z+6	; 0x06
     c32:	80 38       	cpi	r24, 0x80	; 128
     c34:	49 f4       	brne	.+18     	; 0xc48 <MCAL_SPI_Init+0x48>
     c36:	8f b7       	in	r24, 0x3f	; 63
     c38:	80 68       	ori	r24, 0x80	; 128
     c3a:	8f bf       	out	0x3f, r24	; 63
     c3c:	87 81       	ldd	r24, Z+7	; 0x07
     c3e:	90 85       	ldd	r25, Z+8	; 0x08
     c40:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <p_IRQ_callback_SPI+0x1>
     c44:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <p_IRQ_callback_SPI>
     c48:	80 81       	ld	r24, Z
     c4a:	0e 94 85 05 	call	0xb0a	; 0xb0a <MCAL_SPI_GPIO_Set_Pins>
     c4e:	8d b1       	in	r24, 0x0d	; 13
     c50:	80 64       	ori	r24, 0x40	; 64
     c52:	8d b9       	out	0x0d, r24	; 13
     c54:	08 95       	ret

00000c56 <MCAL_SPI_SendData>:
     c56:	fc 01       	movw	r30, r24
     c58:	80 81       	ld	r24, Z
     c5a:	8f b9       	out	0x0f, r24	; 15
     c5c:	61 11       	cpse	r22, r1
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <MCAL_SPI_SendData+0xe>
     c60:	77 9b       	sbis	0x0e, 7	; 14
     c62:	fe cf       	rjmp	.-4      	; 0xc60 <MCAL_SPI_SendData+0xa>
     c64:	08 95       	ret

00000c66 <MCAL_SPI_ReceiveData>:
     c66:	61 11       	cpse	r22, r1
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <MCAL_SPI_ReceiveData+0x8>
     c6a:	77 9b       	sbis	0x0e, 7	; 14
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <MCAL_SPI_ReceiveData+0x4>
     c6e:	2f b1       	in	r18, 0x0f	; 15
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
     c74:	08 95       	ret

00000c76 <__vector_12>:
*               SPI ISR functions
*===============================================
*/

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void){
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31

  	p_IRQ_callback_SPI();
     c98:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <p_IRQ_callback_SPI>
     c9c:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <p_IRQ_callback_SPI+0x1>
     ca0:	09 95       	icall
}
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	7f 91       	pop	r23
     cb0:	6f 91       	pop	r22
     cb2:	5f 91       	pop	r21
     cb4:	4f 91       	pop	r20
     cb6:	3f 91       	pop	r19
     cb8:	2f 91       	pop	r18
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <MCAL_TIMER0_Init>:
* @param [in]	:   callback: the overflow interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER0_CALLBACK_Overflow_INTERRUPT(Ptr_Func callback)
{
    overflowCallback = callback;
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	00 d0       	rcall	.+0      	; 0xcce <MCAL_TIMER0_Init+0xa>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	fc 01       	movw	r30, r24
     cd4:	89 2b       	or	r24, r25
     cd6:	09 f4       	brne	.+2      	; 0xcda <MCAL_TIMER0_Init+0x16>
     cd8:	54 c0       	rjmp	.+168    	; 0xd82 <MCAL_TIMER0_Init+0xbe>
     cda:	80 81       	ld	r24, Z
     cdc:	88 30       	cpi	r24, 0x08	; 8
     cde:	08 f0       	brcs	.+2      	; 0xce2 <MCAL_TIMER0_Init+0x1e>
     ce0:	52 c0       	rjmp	.+164    	; 0xd86 <MCAL_TIMER0_Init+0xc2>
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	88 23       	and	r24, r24
     ce6:	39 f0       	breq	.+14     	; 0xcf6 <MCAL_TIMER0_Init+0x32>
     ce8:	88 30       	cpi	r24, 0x08	; 8
     cea:	29 f0       	breq	.+10     	; 0xcf6 <MCAL_TIMER0_Init+0x32>
     cec:	80 34       	cpi	r24, 0x40	; 64
     cee:	19 f0       	breq	.+6      	; 0xcf6 <MCAL_TIMER0_Init+0x32>
     cf0:	88 34       	cpi	r24, 0x48	; 72
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <MCAL_TIMER0_Init+0x32>
     cf4:	4a c0       	rjmp	.+148    	; 0xd8a <MCAL_TIMER0_Init+0xc6>
     cf6:	82 81       	ldd	r24, Z+2	; 0x02
     cf8:	88 23       	and	r24, r24
     cfa:	39 f0       	breq	.+14     	; 0xd0a <MCAL_TIMER0_Init+0x46>
     cfc:	80 31       	cpi	r24, 0x10	; 16
     cfe:	29 f0       	breq	.+10     	; 0xd0a <MCAL_TIMER0_Init+0x46>
     d00:	80 32       	cpi	r24, 0x20	; 32
     d02:	19 f0       	breq	.+6      	; 0xd0a <MCAL_TIMER0_Init+0x46>
     d04:	80 33       	cpi	r24, 0x30	; 48
     d06:	09 f0       	breq	.+2      	; 0xd0a <MCAL_TIMER0_Init+0x46>
     d08:	42 c0       	rjmp	.+132    	; 0xd8e <MCAL_TIMER0_Init+0xca>
     d0a:	83 81       	ldd	r24, Z+3	; 0x03
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <MCAL_TIMER0_Init+0x4e>
     d10:	40 c0       	rjmp	.+128    	; 0xd92 <MCAL_TIMER0_Init+0xce>
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	88 23       	and	r24, r24
     d16:	11 f0       	breq	.+4      	; 0xd1c <MCAL_TIMER0_Init+0x58>
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	e9 f5       	brne	.+122    	; 0xd96 <MCAL_TIMER0_Init+0xd2>
     d1c:	8f 01       	movw	r16, r30
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	a0 ec       	ldi	r26, 0xC0	; 192
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	01 90       	ld	r0, Z+
     d26:	0d 92       	st	X+, r0
     d28:	8a 95       	dec	r24
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <MCAL_TIMER0_Init+0x60>
     d2c:	13 be       	out	0x33, r1	; 51
     d2e:	f8 01       	movw	r30, r16
     d30:	20 81       	ld	r18, Z
     d32:	81 81       	ldd	r24, Z+1	; 0x01
     d34:	92 81       	ldd	r25, Z+2	; 0x02
     d36:	82 2b       	or	r24, r18
     d38:	89 2b       	or	r24, r25
     d3a:	83 bf       	out	0x33, r24	; 51
     d3c:	89 b7       	in	r24, 0x39	; 57
     d3e:	8c 7f       	andi	r24, 0xFC	; 252
     d40:	89 bf       	out	0x39, r24	; 57
     d42:	99 b7       	in	r25, 0x39	; 57
     d44:	23 81       	ldd	r18, Z+3	; 0x03
     d46:	84 81       	ldd	r24, Z+4	; 0x04
     d48:	82 2b       	or	r24, r18
     d4a:	89 2b       	or	r24, r25
     d4c:	89 bf       	out	0x39, r24	; 57
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	88 23       	and	r24, r24
     d52:	59 f0       	breq	.+22     	; 0xd6a <MCAL_TIMER0_Init+0xa6>
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	8a 83       	std	Y+2, r24	; 0x02
     d5c:	be 01       	movw	r22, r28
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	86 e3       	ldi	r24, 0x36	; 54
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
     d6a:	f8 01       	movw	r30, r16
     d6c:	84 81       	ldd	r24, Z+4	; 0x04
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	19 f0       	breq	.+6      	; 0xd78 <MCAL_TIMER0_Init+0xb4>
     d72:	83 81       	ldd	r24, Z+3	; 0x03
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	89 f4       	brne	.+34     	; 0xd9a <MCAL_TIMER0_Init+0xd6>
     d78:	8f b7       	in	r24, 0x3f	; 63
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	8f bf       	out	0x3f, r24	; 63
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0d c0       	rjmp	.+26     	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0b c0       	rjmp	.+22     	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <MCAL_TIMER0_Init+0xd8>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	08 95       	ret

00000daa <MCAL_TIMER0_Stop>:
     daa:	83 b7       	in	r24, 0x33	; 51
     dac:	88 7f       	andi	r24, 0xF8	; 248
     dae:	83 bf       	out	0x33, r24	; 51
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	08 95       	ret

00000db4 <Timer0_SingleIntervalDelayCallback>:
     db4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <LOC_u32CTCcounter.1746>
     db8:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <LOC_u32CTCcounter.1746+0x1>
     dbc:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <LOC_u32CTCcounter.1746+0x2>
     dc0:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <LOC_u32CTCcounter.1746+0x3>
     dc4:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <Glob_u32DelayInMilliseconds>
     dc8:	50 91 b9 00 	lds	r21, 0x00B9	; 0x8000b9 <Glob_u32DelayInMilliseconds+0x1>
     dcc:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <Glob_u32DelayInMilliseconds+0x2>
     dd0:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <Glob_u32DelayInMilliseconds+0x3>
     dd4:	84 17       	cp	r24, r20
     dd6:	95 07       	cpc	r25, r21
     dd8:	a6 07       	cpc	r26, r22
     dda:	b7 07       	cpc	r27, r23
     ddc:	78 f4       	brcc	.+30     	; 0xdfc <Timer0_SingleIntervalDelayCallback+0x48>
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	a1 1d       	adc	r26, r1
     de2:	b1 1d       	adc	r27, r1
     de4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <LOC_u32CTCcounter.1746>
     de8:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <LOC_u32CTCcounter.1746+0x1>
     dec:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <LOC_u32CTCcounter.1746+0x2>
     df0:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <LOC_u32CTCcounter.1746+0x3>
     df4:	88 b7       	in	r24, 0x38	; 56
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	88 bf       	out	0x38, r24	; 56
     dfa:	08 95       	ret
     dfc:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <LOC_u32CTCcounter.1746>
     e00:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <LOC_u32CTCcounter.1746+0x1>
     e04:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <LOC_u32CTCcounter.1746+0x2>
     e08:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <LOC_u32CTCcounter.1746+0x3>
     e0c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <MCAL_TIMER0_Stop>
     e10:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Glob_fptrInterruptedDelayCallback>
     e14:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Glob_fptrInterruptedDelayCallback+0x1>
     e18:	09 95       	icall
     e1a:	08 95       	ret

00000e1c <MCAL_TIMER0_SetCompare>:
     e1c:	8c bf       	out	0x3c, r24	; 60
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret

00000e22 <MCAL_TIMER0_SetCounter>:
     e22:	82 bf       	out	0x32, r24	; 50
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	08 95       	ret

00000e28 <MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
* @param [in]	:   callback: the output compare match interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT(Ptr_Func callback)
{
    outputCompareMatchCallback = callback;
     e28:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <outputCompareMatchCallback+0x1>
     e2c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <outputCompareMatchCallback>
     e30:	08 95       	ret

00000e32 <MCAL_TIMER0_SingleIntervalDelayms>:
* @brief		  : Function to delay the TIMER0 for a certain amount of time without halting the CPU.
* @param [in]	: copy_Milliseconds number of milliseconds to delay.
======================================================================================================================
*/
void MCAL_TIMER0_SingleIntervalDelayms(uint32_t copy_Milliseconds, Ptr_Func func)
{
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	00 d0       	rcall	.+0      	; 0xe44 <MCAL_TIMER0_SingleIntervalDelayms+0x12>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <MCAL_TIMER0_SingleIntervalDelayms+0x14>
     e46:	1f 92       	push	r1
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	6b 01       	movw	r12, r22
     e4e:	7c 01       	movw	r14, r24
     e50:	8a 01       	movw	r16, r20
    sTIMER0_Config_t Timer0_cfg;
    uint8_t LOC_u8CompareValue;

    Timer0_cfg.TIMER0_CLK_SRC = TIMER0_Prescale_64;
     e52:	83 e0       	ldi	r24, 0x03	; 3
     e54:	89 83       	std	Y+1, r24	; 0x01
    Timer0_cfg.TIMER0_Mode = TIMER0_CTC_Mode;
     e56:	88 e0       	ldi	r24, 0x08	; 8
     e58:	8a 83       	std	Y+2, r24	; 0x02
    Timer0_cfg.TIMER0_COM = TIMER0_COM_Disconnected;
     e5a:	1b 82       	std	Y+3, r1	; 0x03
    Timer0_cfg.TIMER0_OCIE = TIMER0_TOCI_Enable;
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	8d 83       	std	Y+5, r24	; 0x05
    Timer0_cfg.TIMER0_OIE = TIMER0_TOI_Disable;
     e60:	1c 82       	std	Y+4, r1	; 0x04

    /*Delay of one millisecond*/
    LOC_u8CompareValue = (uint8_t)(((F_CPU / 1000) / 64) - 1);
    MCAL_TIMER0_SetCompare(LOC_u8CompareValue);
     e62:	8c e7       	ldi	r24, 0x7C	; 124
     e64:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MCAL_TIMER0_SetCompare>
    MCAL_TIMER0_SetCounter(0x00);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 11 07 	call	0xe22	; 0xe22 <MCAL_TIMER0_SetCounter>
    
    MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT(Timer0_SingleIntervalDelayCallback);    
     e6e:	8a ed       	ldi	r24, 0xDA	; 218
     e70:	96 e0       	ldi	r25, 0x06	; 6
     e72:	0e 94 14 07 	call	0xe28	; 0xe28 <MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT>

    Glob_u32DelayInMilliseconds = copy_Milliseconds;
     e76:	c0 92 b8 00 	sts	0x00B8, r12	; 0x8000b8 <Glob_u32DelayInMilliseconds>
     e7a:	d0 92 b9 00 	sts	0x00B9, r13	; 0x8000b9 <Glob_u32DelayInMilliseconds+0x1>
     e7e:	e0 92 ba 00 	sts	0x00BA, r14	; 0x8000ba <Glob_u32DelayInMilliseconds+0x2>
     e82:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <Glob_u32DelayInMilliseconds+0x3>
    Glob_fptrInterruptedDelayCallback = func;
     e86:	10 93 b3 00 	sts	0x00B3, r17	; 0x8000b3 <Glob_fptrInterruptedDelayCallback+0x1>
     e8a:	00 93 b2 00 	sts	0x00B2, r16	; 0x8000b2 <Glob_fptrInterruptedDelayCallback>
    MCAL_TIMER0_Init(&Timer0_cfg);
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	0e 94 62 06 	call	0xcc4	; 0xcc4 <MCAL_TIMER0_Init>
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	08 95       	ret

00000eb2 <__vector_10>:
*===============================================
*/

/*Timer/Counter0 Compare Match (Vector number in the datasheet - 1)*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
    
    outputCompareMatchCallback();
     ed4:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <outputCompareMatchCallback>
     ed8:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <outputCompareMatchCallback+0x1>
     edc:	09 95       	icall
}
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_11>:

/*Timer/Counter0 Overflow*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31

    overflowCounter++;
     f22:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <overflowCounter>
     f26:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <overflowCounter+0x1>
     f2a:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <overflowCounter+0x2>
     f2e:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <overflowCounter+0x3>
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	a1 1d       	adc	r26, r1
     f36:	b1 1d       	adc	r27, r1
     f38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <overflowCounter>
     f3c:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <overflowCounter+0x1>
     f40:	a0 93 be 00 	sts	0x00BE, r26	; 0x8000be <overflowCounter+0x2>
     f44:	b0 93 bf 00 	sts	0x00BF, r27	; 0x8000bf <overflowCounter+0x3>
    overflowCallback();
     f48:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <overflowCallback>
     f4c:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <overflowCallback+0x1>
     f50:	09 95       	icall
}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <MCAL_TIMER2_Init>:
* @param [in]	:   callback: the output compare match interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER2_CALLBACK_CompareMatch_INTERRUPT(Ptr_Func callback)
{
    outputCompareMatchCallback = callback;
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <MCAL_TIMER2_Init+0xa>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	fc 01       	movw	r30, r24
     f84:	89 2b       	or	r24, r25
     f86:	09 f4       	brne	.+2      	; 0xf8a <MCAL_TIMER2_Init+0x16>
     f88:	56 c0       	rjmp	.+172    	; 0x1036 <MCAL_TIMER2_Init+0xc2>
     f8a:	80 81       	ld	r24, Z
     f8c:	8a 30       	cpi	r24, 0x0A	; 10
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <MCAL_TIMER2_Init+0x1e>
     f90:	54 c0       	rjmp	.+168    	; 0x103a <MCAL_TIMER2_Init+0xc6>
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	88 23       	and	r24, r24
     f96:	39 f0       	breq	.+14     	; 0xfa6 <MCAL_TIMER2_Init+0x32>
     f98:	88 30       	cpi	r24, 0x08	; 8
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <MCAL_TIMER2_Init+0x32>
     f9c:	80 34       	cpi	r24, 0x40	; 64
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <MCAL_TIMER2_Init+0x32>
     fa0:	88 34       	cpi	r24, 0x48	; 72
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <MCAL_TIMER2_Init+0x32>
     fa4:	4c c0       	rjmp	.+152    	; 0x103e <MCAL_TIMER2_Init+0xca>
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	88 23       	and	r24, r24
     faa:	39 f0       	breq	.+14     	; 0xfba <MCAL_TIMER2_Init+0x46>
     fac:	80 31       	cpi	r24, 0x10	; 16
     fae:	29 f0       	breq	.+10     	; 0xfba <MCAL_TIMER2_Init+0x46>
     fb0:	80 32       	cpi	r24, 0x20	; 32
     fb2:	19 f0       	breq	.+6      	; 0xfba <MCAL_TIMER2_Init+0x46>
     fb4:	80 33       	cpi	r24, 0x30	; 48
     fb6:	09 f0       	breq	.+2      	; 0xfba <MCAL_TIMER2_Init+0x46>
     fb8:	44 c0       	rjmp	.+136    	; 0x1042 <MCAL_TIMER2_Init+0xce>
     fba:	83 81       	ldd	r24, Z+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <MCAL_TIMER2_Init+0x52>
     fc0:	80 34       	cpi	r24, 0x40	; 64
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <MCAL_TIMER2_Init+0x52>
     fc4:	40 c0       	rjmp	.+128    	; 0x1046 <MCAL_TIMER2_Init+0xd2>
     fc6:	84 81       	ldd	r24, Z+4	; 0x04
     fc8:	88 23       	and	r24, r24
     fca:	11 f0       	breq	.+4      	; 0xfd0 <MCAL_TIMER2_Init+0x5c>
     fcc:	80 38       	cpi	r24, 0x80	; 128
     fce:	e9 f5       	brne	.+122    	; 0x104a <MCAL_TIMER2_Init+0xd6>
     fd0:	8f 01       	movw	r16, r30
     fd2:	85 e0       	ldi	r24, 0x05	; 5
     fd4:	ad ec       	ldi	r26, 0xCD	; 205
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	01 90       	ld	r0, Z+
     fda:	0d 92       	st	X+, r0
     fdc:	8a 95       	dec	r24
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <MCAL_TIMER2_Init+0x64>
     fe0:	15 bc       	out	0x25, r1	; 37
     fe2:	f8 01       	movw	r30, r16
     fe4:	20 81       	ld	r18, Z
     fe6:	81 81       	ldd	r24, Z+1	; 0x01
     fe8:	92 81       	ldd	r25, Z+2	; 0x02
     fea:	82 2b       	or	r24, r18
     fec:	89 2b       	or	r24, r25
     fee:	85 bd       	out	0x25, r24	; 37
     ff0:	89 b7       	in	r24, 0x39	; 57
     ff2:	8f 77       	andi	r24, 0x7F	; 127
     ff4:	89 bf       	out	0x39, r24	; 57
     ff6:	99 b7       	in	r25, 0x39	; 57
     ff8:	23 81       	ldd	r18, Z+3	; 0x03
     ffa:	84 81       	ldd	r24, Z+4	; 0x04
     ffc:	82 2b       	or	r24, r18
     ffe:	89 2b       	or	r24, r25
    1000:	89 bf       	out	0x39, r24	; 57
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	88 23       	and	r24, r24
    1006:	59 f0       	breq	.+22     	; 0x101e <MCAL_TIMER2_Init+0xaa>
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	be 01       	movw	r22, r28
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	86 e3       	ldi	r24, 0x36	; 54
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <MCAL_GPIO_Init>
    101e:	f8 01       	movw	r30, r16
    1020:	84 81       	ldd	r24, Z+4	; 0x04
    1022:	80 38       	cpi	r24, 0x80	; 128
    1024:	19 f0       	breq	.+6      	; 0x102c <MCAL_TIMER2_Init+0xb8>
    1026:	83 81       	ldd	r24, Z+3	; 0x03
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	89 f4       	brne	.+34     	; 0x104e <MCAL_TIMER2_Init+0xda>
    102c:	8f b7       	in	r24, 0x3f	; 63
    102e:	80 68       	ori	r24, 0x80	; 128
    1030:	8f bf       	out	0x3f, r24	; 63
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	0b c0       	rjmp	.+22     	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <MCAL_TIMER2_Init+0xdc>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	08 95       	ret

0000105e <MCAL_TIMER2_SetCompare>:
    105e:	83 bd       	out	0x23, r24	; 35
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	08 95       	ret

00001064 <__vector_4>:
*===============================================
*/

/*Timer/Counter2 Compare Match (Vector number in the datasheet - 1)*/
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void){
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	2f 93       	push	r18
    1070:	3f 93       	push	r19
    1072:	4f 93       	push	r20
    1074:	5f 93       	push	r21
    1076:	6f 93       	push	r22
    1078:	7f 93       	push	r23
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	af 93       	push	r26
    1080:	bf 93       	push	r27
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
    
    outputCompareMatchCallback();
    1086:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <outputCompareMatchCallback>
    108a:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <outputCompareMatchCallback+0x1>
    108e:	09 95       	icall
}
    1090:	ff 91       	pop	r31
    1092:	ef 91       	pop	r30
    1094:	bf 91       	pop	r27
    1096:	af 91       	pop	r26
    1098:	9f 91       	pop	r25
    109a:	8f 91       	pop	r24
    109c:	7f 91       	pop	r23
    109e:	6f 91       	pop	r22
    10a0:	5f 91       	pop	r21
    10a2:	4f 91       	pop	r20
    10a4:	3f 91       	pop	r19
    10a6:	2f 91       	pop	r18
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <__vector_5>:

/*Timer/Counter2 Overflow*/
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void){
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	2f 93       	push	r18
    10be:	3f 93       	push	r19
    10c0:	4f 93       	push	r20
    10c2:	5f 93       	push	r21
    10c4:	6f 93       	push	r22
    10c6:	7f 93       	push	r23
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	af 93       	push	r26
    10ce:	bf 93       	push	r27
    10d0:	ef 93       	push	r30
    10d2:	ff 93       	push	r31

    overflowCounter++;
    10d4:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <overflowCounter>
    10d8:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <overflowCounter+0x1>
    10dc:	a0 91 cb 00 	lds	r26, 0x00CB	; 0x8000cb <overflowCounter+0x2>
    10e0:	b0 91 cc 00 	lds	r27, 0x00CC	; 0x8000cc <overflowCounter+0x3>
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	a1 1d       	adc	r26, r1
    10e8:	b1 1d       	adc	r27, r1
    10ea:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <overflowCounter>
    10ee:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <overflowCounter+0x1>
    10f2:	a0 93 cb 00 	sts	0x00CB, r26	; 0x8000cb <overflowCounter+0x2>
    10f6:	b0 93 cc 00 	sts	0x00CC, r27	; 0x8000cc <overflowCounter+0x3>
    overflowCallback();
    10fa:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <overflowCallback>
    10fe:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <overflowCallback+0x1>
    1102:	09 95       	icall
}
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	bf 91       	pop	r27
    110a:	af 91       	pop	r26
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	7f 91       	pop	r23
    1112:	6f 91       	pop	r22
    1114:	5f 91       	pop	r21
    1116:	4f 91       	pop	r20
    1118:	3f 91       	pop	r19
    111a:	2f 91       	pop	r18
    111c:	0f 90       	pop	r0
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	0f 90       	pop	r0
    1122:	1f 90       	pop	r1
    1124:	18 95       	reti

00001126 <MCAL_UART_Init>:
    case USART_IRQ_TXC:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_TXCIE_POS);
        break;
    
    case USART_IRQ_UDRE:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_UDREIE_POS);
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
    112c:	89 e0       	ldi	r24, 0x09	; 9
    112e:	fe 01       	movw	r30, r28
    1130:	a8 ed       	ldi	r26, 0xD8	; 216
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	01 90       	ld	r0, Z+
    1136:	0d 92       	st	X+, r0
    1138:	8a 95       	dec	r24
    113a:	e1 f7       	brne	.-8      	; 0x1134 <MCAL_UART_Init+0xe>
    113c:	88 81       	ld	r24, Y
    113e:	88 23       	and	r24, r24
    1140:	21 f0       	breq	.+8      	; 0x114a <MCAL_UART_Init+0x24>
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	21 f4       	brne	.+8      	; 0x114e <MCAL_UART_Init+0x28>
    1146:	a8 e0       	ldi	r26, 0x08	; 8
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <MCAL_UART_Init+0x2a>
    114a:	a0 e1       	ldi	r26, 0x10	; 16
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <MCAL_UART_Init+0x2a>
    114e:	a2 e0       	ldi	r26, 0x02	; 2
    1150:	2a 81       	ldd	r18, Y+2	; 0x02
    1152:	3b 81       	ldd	r19, Y+3	; 0x03
    1154:	4c 81       	ldd	r20, Y+4	; 0x04
    1156:	5d 81       	ldd	r21, Y+5	; 0x05
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__muluhisi3>
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	72 e1       	ldi	r23, 0x12	; 18
    1166:	8a e7       	ldi	r24, 0x7A	; 122
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__udivmodsi4>
    116e:	21 50       	subi	r18, 0x01	; 1
    1170:	31 09       	sbc	r19, r1
    1172:	21 15       	cp	r18, r1
    1174:	80 e1       	ldi	r24, 0x10	; 16
    1176:	38 07       	cpc	r19, r24
    1178:	58 f5       	brcc	.+86     	; 0x11d0 <MCAL_UART_Init+0xaa>
    117a:	29 b9       	out	0x09, r18	; 9
    117c:	2f 3f       	cpi	r18, 0xFF	; 255
    117e:	31 05       	cpc	r19, r1
    1180:	21 f0       	breq	.+8      	; 0x118a <MCAL_UART_Init+0x64>
    1182:	18 f0       	brcs	.+6      	; 0x118a <MCAL_UART_Init+0x64>
    1184:	83 2f       	mov	r24, r19
    1186:	8f 70       	andi	r24, 0x0F	; 15
    1188:	80 bd       	out	0x20, r24	; 32
    118a:	88 81       	ld	r24, Y
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	61 f0       	breq	.+24     	; 0x11a8 <MCAL_UART_Init+0x82>
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	29 f4       	brne	.+10     	; 0x119e <MCAL_UART_Init+0x78>
    1194:	8b b1       	in	r24, 0x0b	; 11
    1196:	82 60       	ori	r24, 0x02	; 2
    1198:	8b b9       	out	0x0b, r24	; 11
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	06 c0       	rjmp	.+12     	; 0x11aa <MCAL_UART_Init+0x84>
    119e:	8b b1       	in	r24, 0x0b	; 11
    11a0:	8d 7f       	andi	r24, 0xFD	; 253
    11a2:	8b b9       	out	0x0b, r24	; 11
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <MCAL_UART_Init+0x84>
    11a8:	90 e8       	ldi	r25, 0x80	; 128
    11aa:	88 85       	ldd	r24, Y+8	; 0x08
    11ac:	89 2b       	or	r24, r25
    11ae:	9f 81       	ldd	r25, Y+7	; 0x07
    11b0:	98 2b       	or	r25, r24
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	87 30       	cpi	r24, 0x07	; 7
    11b6:	29 f4       	brne	.+10     	; 0x11c2 <MCAL_UART_Init+0x9c>
    11b8:	89 2f       	mov	r24, r25
    11ba:	86 60       	ori	r24, 0x06	; 6
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	9a b9       	out	0x0a, r25	; 10
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <MCAL_UART_Init+0x9e>
    11c2:	89 2b       	or	r24, r25
    11c4:	80 68       	ori	r24, 0x80	; 128
    11c6:	80 bd       	out	0x20, r24	; 32
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	8a b9       	out	0x0a, r24	; 10
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <MCAL_UART_Init+0xac>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <MCAL_UART_Disable>:
    11d8:	8a b1       	in	r24, 0x0a	; 10
    11da:	87 7e       	andi	r24, 0xE7	; 231
    11dc:	8a b9       	out	0x0a, r24	; 10
    11de:	08 95       	ret

000011e0 <MCAL_UART_Enable>:
    11e0:	9a b1       	in	r25, 0x0a	; 10
    11e2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <LOC_cfg+0x1>
    11e6:	89 2b       	or	r24, r25
    11e8:	8a b9       	out	0x0a, r24	; 10
    11ea:	08 95       	ret

000011ec <MCAL_UART_Send_Data>:
    11ec:	61 11       	cpse	r22, r1
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <MCAL_UART_Send_Data+0x8>
    11f0:	5d 9b       	sbis	0x0b, 5	; 11
    11f2:	fe cf       	rjmp	.-4      	; 0x11f0 <MCAL_UART_Send_Data+0x4>
    11f4:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <LOC_cfg+0x6>
    11f8:	27 30       	cpi	r18, 0x07	; 7
    11fa:	49 f4       	brne	.+18     	; 0x120e <MCAL_UART_Send_Data+0x22>
    11fc:	2a b1       	in	r18, 0x0a	; 10
    11fe:	2e 7f       	andi	r18, 0xFE	; 254
    1200:	2a b9       	out	0x0a, r18	; 10
    1202:	3a b1       	in	r19, 0x0a	; 10
    1204:	fc 01       	movw	r30, r24
    1206:	21 81       	ldd	r18, Z+1	; 0x01
    1208:	21 70       	andi	r18, 0x01	; 1
    120a:	23 2b       	or	r18, r19
    120c:	2a b9       	out	0x0a, r18	; 10
    120e:	fc 01       	movw	r30, r24
    1210:	80 81       	ld	r24, Z
    1212:	8c b9       	out	0x0c, r24	; 12
    1214:	08 95       	ret

00001216 <MCAL_UART_Get_Data>:
    1216:	61 11       	cpse	r22, r1
    1218:	02 c0       	rjmp	.+4      	; 0x121e <MCAL_UART_Get_Data+0x8>
    121a:	5f 9b       	sbis	0x0b, 7	; 11
    121c:	fe cf       	rjmp	.-4      	; 0x121a <MCAL_UART_Get_Data+0x4>
    121e:	5c 99       	sbic	0x0b, 4	; 11
    1220:	19 c0       	rjmp	.+50     	; 0x1254 <MCAL_UART_Get_Data+0x3e>
    1222:	5a 99       	sbic	0x0b, 2	; 11
    1224:	19 c0       	rjmp	.+50     	; 0x1258 <MCAL_UART_Get_Data+0x42>
    1226:	5b 99       	sbic	0x0b, 3	; 11
    1228:	19 c0       	rjmp	.+50     	; 0x125c <MCAL_UART_Get_Data+0x46>
    122a:	fc 01       	movw	r30, r24
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	10 82       	st	Z, r1
    1230:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <LOC_cfg+0x6>
    1234:	27 30       	cpi	r18, 0x07	; 7
    1236:	39 f4       	brne	.+14     	; 0x1246 <MCAL_UART_Get_Data+0x30>
    1238:	2a b1       	in	r18, 0x0a	; 10
    123a:	22 70       	andi	r18, 0x02	; 2
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	35 95       	asr	r19
    1240:	27 95       	ror	r18
    1242:	10 82       	st	Z, r1
    1244:	21 83       	std	Z+1, r18	; 0x01
    1246:	2c b1       	in	r18, 0x0c	; 12
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	fc 01       	movw	r30, r24
    124c:	31 83       	std	Z+1, r19	; 0x01
    124e:	20 83       	st	Z, r18
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	08 95       	ret
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	08 95       	ret
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	08 95       	ret
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	08 95       	ret

00001260 <MCAL_UART_Interrupt_EN>:
    1260:	61 15       	cp	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	29 f1       	breq	.+74     	; 0x12b0 <MCAL_UART_Interrupt_EN+0x50>
    1266:	9f b7       	in	r25, 0x3f	; 63
    1268:	90 68       	ori	r25, 0x80	; 128
    126a:	9f bf       	out	0x3f, r25	; 63
    126c:	80 34       	cpi	r24, 0x40	; 64
    126e:	71 f0       	breq	.+28     	; 0x128c <MCAL_UART_Interrupt_EN+0x2c>
    1270:	80 38       	cpi	r24, 0x80	; 128
    1272:	19 f0       	breq	.+6      	; 0x127a <MCAL_UART_Interrupt_EN+0x1a>
    1274:	80 32       	cpi	r24, 0x20	; 32
    1276:	f1 f4       	brne	.+60     	; 0x12b4 <MCAL_UART_Interrupt_EN+0x54>
    1278:	12 c0       	rjmp	.+36     	; 0x129e <MCAL_UART_Interrupt_EN+0x3e>
    127a:	8a b1       	in	r24, 0x0a	; 10
    127c:	80 68       	ori	r24, 0x80	; 128
    127e:	8a b9       	out	0x0a, r24	; 10
    1280:	70 93 d7 00 	sts	0x00D7, r23	; 0x8000d7 <LOC_fptr_RXC_callback+0x1>
    1284:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <LOC_fptr_RXC_callback>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret
    128c:	8a b1       	in	r24, 0x0a	; 10
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8a b9       	out	0x0a, r24	; 10
    1292:	70 93 d5 00 	sts	0x00D5, r23	; 0x8000d5 <LOC_fptr_TXC_callback+0x1>
    1296:	60 93 d4 00 	sts	0x00D4, r22	; 0x8000d4 <LOC_fptr_TXC_callback>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	08 95       	ret
    129e:	8a b1       	in	r24, 0x0a	; 10
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	8a b9       	out	0x0a, r24	; 10
    12a4:	70 93 d3 00 	sts	0x00D3, r23	; 0x8000d3 <LOC_fptr_UDRE_callback+0x1>
    12a8:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <LOC_fptr_UDRE_callback>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	08 95       	ret
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	08 95       	ret
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	08 95       	ret

000012b8 <__vector_13>:
/**
 * @brief This is the ISR for the USART RXC (USART, Rx Complete) 
 * 
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	2f 93       	push	r18
    12c4:	3f 93       	push	r19
    12c6:	4f 93       	push	r20
    12c8:	5f 93       	push	r21
    12ca:	6f 93       	push	r22
    12cc:	7f 93       	push	r23
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31

  	LOC_fptr_RXC_callback();
    12da:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <LOC_fptr_RXC_callback>
    12de:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <LOC_fptr_RXC_callback+0x1>
    12e2:	09 95       	icall
}
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <__vector_14>:
/**
 * @brief This is the ISR for the USART UDRE (USART Data Register Empty) 
 * 
 */
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void){
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31

  	LOC_fptr_UDRE_callback();
    1328:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <LOC_fptr_UDRE_callback>
    132c:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <LOC_fptr_UDRE_callback+0x1>
    1330:	09 95       	icall
}
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_15>:
/**
 * @brief This is the ISR for the USART TXC (USART, Tx Complete) 
 * 
 */
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void){
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31

  	LOC_fptr_TXC_callback();
    1376:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <LOC_fptr_TXC_callback>
    137a:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <LOC_fptr_TXC_callback+0x1>
    137e:	09 95       	icall
    1380:	ff 91       	pop	r31
    1382:	ef 91       	pop	r30
    1384:	bf 91       	pop	r27
    1386:	af 91       	pop	r26
    1388:	9f 91       	pop	r25
    138a:	8f 91       	pop	r24
    138c:	7f 91       	pop	r23
    138e:	6f 91       	pop	r22
    1390:	5f 91       	pop	r21
    1392:	4f 91       	pop	r20
    1394:	3f 91       	pop	r19
    1396:	2f 91       	pop	r18
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <main>:
#define F_CPU  8000000UL
#include "Atmega32_Drivers/APP/APP.h"

int main(void)
{
    ExitGate_ECU_APP_SETUP();
    13a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ExitGate_ECU_APP_SETUP>

    while (1) 
    {
        ExitGate_ECU_APP_Loop();
    13a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ExitGate_ECU_APP_Loop>
    13aa:	fd cf       	rjmp	.-6      	; 0x13a6 <main+0x4>

000013ac <__udivmodsi4>:
    13ac:	a1 e2       	ldi	r26, 0x21	; 33
    13ae:	1a 2e       	mov	r1, r26
    13b0:	aa 1b       	sub	r26, r26
    13b2:	bb 1b       	sub	r27, r27
    13b4:	fd 01       	movw	r30, r26
    13b6:	0d c0       	rjmp	.+26     	; 0x13d2 <__udivmodsi4_ep>

000013b8 <__udivmodsi4_loop>:
    13b8:	aa 1f       	adc	r26, r26
    13ba:	bb 1f       	adc	r27, r27
    13bc:	ee 1f       	adc	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	a2 17       	cp	r26, r18
    13c2:	b3 07       	cpc	r27, r19
    13c4:	e4 07       	cpc	r30, r20
    13c6:	f5 07       	cpc	r31, r21
    13c8:	20 f0       	brcs	.+8      	; 0x13d2 <__udivmodsi4_ep>
    13ca:	a2 1b       	sub	r26, r18
    13cc:	b3 0b       	sbc	r27, r19
    13ce:	e4 0b       	sbc	r30, r20
    13d0:	f5 0b       	sbc	r31, r21

000013d2 <__udivmodsi4_ep>:
    13d2:	66 1f       	adc	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	1a 94       	dec	r1
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <__udivmodsi4_loop>
    13de:	60 95       	com	r22
    13e0:	70 95       	com	r23
    13e2:	80 95       	com	r24
    13e4:	90 95       	com	r25
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	bd 01       	movw	r22, r26
    13ec:	cf 01       	movw	r24, r30
    13ee:	08 95       	ret

000013f0 <__muluhisi3>:
    13f0:	0e 94 03 0a 	call	0x1406	; 0x1406 <__umulhisi3>
    13f4:	a5 9f       	mul	r26, r21
    13f6:	90 0d       	add	r25, r0
    13f8:	b4 9f       	mul	r27, r20
    13fa:	90 0d       	add	r25, r0
    13fc:	a4 9f       	mul	r26, r20
    13fe:	80 0d       	add	r24, r0
    1400:	91 1d       	adc	r25, r1
    1402:	11 24       	eor	r1, r1
    1404:	08 95       	ret

00001406 <__umulhisi3>:
    1406:	a2 9f       	mul	r26, r18
    1408:	b0 01       	movw	r22, r0
    140a:	b3 9f       	mul	r27, r19
    140c:	c0 01       	movw	r24, r0
    140e:	a3 9f       	mul	r26, r19
    1410:	70 0d       	add	r23, r0
    1412:	81 1d       	adc	r24, r1
    1414:	11 24       	eor	r1, r1
    1416:	91 1d       	adc	r25, r1
    1418:	b2 9f       	mul	r27, r18
    141a:	70 0d       	add	r23, r0
    141c:	81 1d       	adc	r24, r1
    141e:	11 24       	eor	r1, r1
    1420:	91 1d       	adc	r25, r1
    1422:	08 95       	ret

00001424 <_exit>:
    1424:	f8 94       	cli

00001426 <__stop_program>:
    1426:	ff cf       	rjmp	.-2      	; 0x1426 <__stop_program>
