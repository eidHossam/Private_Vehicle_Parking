
Gate_Entrance_ECU_Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000560  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800086  00800086  0000061a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001451  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000920  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a40  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  0000379b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a9 02 	call	0x552	; 0x552 <main>
  8a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EntranceGate_ECU_APP_SETUP>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_SETUP(void)
{
    st_UAI_Init();
  92:	0e 94 6c 00 	call	0xd8	; 0xd8 <st_UAI_Init>
  96:	08 95       	ret

00000098 <EntranceGate_ECU_APP_Loop>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_Loop(void)
{
    fptr_st_UserAdminInterface();
  98:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <fptr_st_UserAdminInterface>
  9c:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <fptr_st_UserAdminInterface+0x1>
  a0:	09 95       	icall
  a2:	08 95       	ret

000000a4 <st_UAI_Idle>:
/**
 * @brief this state makes the module go into idle mode until some user action is done.
 * 
 */
void st_UAI_Idle(void)
{
  a4:	08 95       	ret

000000a6 <st_UAI_ShowWelcomeMsg>:
 * @brief this state prints the welcome message to guide the user on what to do.  
 * 
 */
void st_UAI_ShowWelcomeMsg(void)
{
    LCD_Clear_Screen();
  a6:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_FIRST_LINE, 4);
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Welcome!"));
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 49 02 	call	0x492	; 0x492 <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Please enter the 3 digits ID"));
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 49 02 	call	0x492	; 0x492 <LCD_Send_String>

    fptr_st_UserAdminInterface = st_UAI_Idle;
  ca:	82 e5       	ldi	r24, 0x52	; 82
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <fptr_st_UserAdminInterface+0x1>
  d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <fptr_st_UserAdminInterface>
  d6:	08 95       	ret

000000d8 <st_UAI_Init>:
 * 
 */
void st_UAI_Init(void)
{
    /*Initialize the LCD module to print messages to the driver*/
    LCD_Init();
  d8:	0e 94 19 01 	call	0x232	; 0x232 <LCD_Init>

    /*Set the initial state*/
    fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
  dc:	83 e5       	ldi	r24, 0x53	; 83
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <fptr_st_UserAdminInterface+0x1>
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <fptr_st_UserAdminInterface>
  e8:	08 95       	ret

000000ea <_delay_ms>:
	
	config.pinNumber = LCD_D7;
	config.pinMode = GPIO_MODE_OUTPUT;
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
#endif
}
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	00 d0       	rcall	.+0      	; 0xf0 <_delay_ms+0x6>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	19 82       	std	Y+1, r1	; 0x01
  f6:	0b c0       	rjmp	.+22     	; 0x10e <_delay_ms+0x24>
  f8:	1a 82       	std	Y+2, r1	; 0x02
  fa:	03 c0       	rjmp	.+6      	; 0x102 <_delay_ms+0x18>
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	9f 5f       	subi	r25, 0xFF	; 255
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	94 36       	cpi	r25, 0x64	; 100
 106:	d0 f3       	brcs	.-12     	; 0xfc <_delay_ms+0x12>
 108:	99 81       	ldd	r25, Y+1	; 0x01
 10a:	9f 5f       	subi	r25, 0xFF	; 255
 10c:	99 83       	std	Y+1, r25	; 0x01
 10e:	99 81       	ldd	r25, Y+1	; 0x01
 110:	98 17       	cp	r25, r24
 112:	90 f3       	brcs	.-28     	; 0xf8 <_delay_ms+0xe>
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <LCD_Enable_Pulse>:
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	89 e3       	ldi	r24, 0x39	; 57
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	0e 94 75 00 	call	0xea	; 0xea <_delay_ms>
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	89 e3       	ldi	r24, 0x39	; 57
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 13c:	08 95       	ret

0000013e <LCD_Send_Command>:
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	89 e3       	ldi	r24, 0x39	; 57
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	89 e3       	ldi	r24, 0x39	; 57
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 15a:	4c 2f       	mov	r20, r28
 15c:	40 71       	andi	r20, 0x10	; 16
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	55 95       	asr	r21
 162:	47 95       	ror	r20
 164:	55 95       	asr	r21
 166:	47 95       	ror	r20
 168:	55 95       	asr	r21
 16a:	47 95       	ror	r20
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	89 e3       	ldi	r24, 0x39	; 57
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 17a:	4c 2f       	mov	r20, r28
 17c:	40 72       	andi	r20, 0x20	; 32
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	55 95       	asr	r21
 182:	47 95       	ror	r20
 184:	55 95       	asr	r21
 186:	47 95       	ror	r20
 188:	55 95       	asr	r21
 18a:	47 95       	ror	r20
 18c:	55 95       	asr	r21
 18e:	47 95       	ror	r20
 190:	55 95       	asr	r21
 192:	47 95       	ror	r20
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	89 e3       	ldi	r24, 0x39	; 57
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 19e:	4c 2f       	mov	r20, r28
 1a0:	40 74       	andi	r20, 0x40	; 64
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	04 2e       	mov	r0, r20
 1a6:	45 2f       	mov	r20, r21
 1a8:	00 0c       	add	r0, r0
 1aa:	44 1f       	adc	r20, r20
 1ac:	55 0b       	sbc	r21, r21
 1ae:	00 0c       	add	r0, r0
 1b0:	44 1f       	adc	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	89 e3       	ldi	r24, 0x39	; 57
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 1be:	4c 2f       	mov	r20, r28
 1c0:	44 1f       	adc	r20, r20
 1c2:	44 27       	eor	r20, r20
 1c4:	44 1f       	adc	r20, r20
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	89 e3       	ldi	r24, 0x39	; 57
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 1d0:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Enable_Pulse>
 1d4:	4c 2f       	mov	r20, r28
 1d6:	41 70       	andi	r20, 0x01	; 1
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	89 e3       	ldi	r24, 0x39	; 57
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 1e2:	4c 2f       	mov	r20, r28
 1e4:	42 70       	andi	r20, 0x02	; 2
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	55 95       	asr	r21
 1ea:	47 95       	ror	r20
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	89 e3       	ldi	r24, 0x39	; 57
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 1f6:	4c 2f       	mov	r20, r28
 1f8:	44 70       	andi	r20, 0x04	; 4
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	55 95       	asr	r21
 1fe:	47 95       	ror	r20
 200:	55 95       	asr	r21
 202:	47 95       	ror	r20
 204:	64 e0       	ldi	r22, 0x04	; 4
 206:	89 e3       	ldi	r24, 0x39	; 57
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 20e:	c8 70       	andi	r28, 0x08	; 8
 210:	4c 2f       	mov	r20, r28
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	55 95       	asr	r21
 216:	47 95       	ror	r20
 218:	55 95       	asr	r21
 21a:	47 95       	ror	r20
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	65 e0       	ldi	r22, 0x05	; 5
 222:	89 e3       	ldi	r24, 0x39	; 57
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 22a:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Enable_Pulse>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCD_Init>:
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	84 e1       	ldi	r24, 0x14	; 20
 23a:	0e 94 75 00 	call	0xea	; 0xea <_delay_ms>
 23e:	ca e8       	ldi	r28, 0x8A	; 138
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	18 82       	st	Y, r1
 244:	11 e0       	ldi	r17, 0x01	; 1
 246:	19 83       	std	Y+1, r17	; 0x01
 248:	be 01       	movw	r22, r28
 24a:	89 e3       	ldi	r24, 0x39	; 57
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 56 02 	call	0x4ac	; 0x4ac <MCAL_GPIO_Init>
 252:	18 83       	st	Y, r17
 254:	19 83       	std	Y+1, r17	; 0x01
 256:	be 01       	movw	r22, r28
 258:	89 e3       	ldi	r24, 0x39	; 57
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 56 02 	call	0x4ac	; 0x4ac <MCAL_GPIO_Init>
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	89 e3       	ldi	r24, 0x39	; 57
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	89 e3       	ldi	r24, 0x39	; 57
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	0e 94 75 00 	call	0xea	; 0xea <_delay_ms>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	88 83       	st	Y, r24
 282:	19 83       	std	Y+1, r17	; 0x01
 284:	be 01       	movw	r22, r28
 286:	89 e3       	ldi	r24, 0x39	; 57
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 56 02 	call	0x4ac	; 0x4ac <MCAL_GPIO_Init>
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	88 83       	st	Y, r24
 292:	19 83       	std	Y+1, r17	; 0x01
 294:	be 01       	movw	r22, r28
 296:	89 e3       	ldi	r24, 0x39	; 57
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 56 02 	call	0x4ac	; 0x4ac <MCAL_GPIO_Init>
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	88 83       	st	Y, r24
 2a2:	19 83       	std	Y+1, r17	; 0x01
 2a4:	be 01       	movw	r22, r28
 2a6:	89 e3       	ldi	r24, 0x39	; 57
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 56 02 	call	0x4ac	; 0x4ac <MCAL_GPIO_Init>
 2ae:	85 e0       	ldi	r24, 0x05	; 5
 2b0:	88 83       	st	Y, r24
 2b2:	19 83       	std	Y+1, r17	; 0x01
 2b4:	be 01       	movw	r22, r28
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 56 02 	call	0x4ac	; 0x4ac <MCAL_GPIO_Init>
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	0e 94 75 00 	call	0xea	; 0xea <_delay_ms>
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 2ca:	88 e2       	ldi	r24, 0x28	; 40
 2cc:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	08 95       	ret

000002ea <LCD_Cursor_XY>:
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	60 31       	cpi	r22, 0x10	; 16
 2f0:	18 f5       	brcc	.+70     	; 0x338 <LCD_Cursor_XY+0x4e>
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	08 f5       	brcc	.+66     	; 0x338 <LCD_Cursor_XY+0x4e>
 2f6:	d6 2f       	mov	r29, r22
 2f8:	c8 2f       	mov	r28, r24
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	59 f0       	breq	.+22     	; 0x314 <LCD_Cursor_XY+0x2a>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <LCD_Cursor_XY+0x20>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	69 f0       	breq	.+26     	; 0x31e <LCD_Cursor_XY+0x34>
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	81 f0       	breq	.+32     	; 0x328 <LCD_Cursor_XY+0x3e>
 308:	13 c0       	rjmp	.+38     	; 0x330 <LCD_Cursor_XY+0x46>
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	86 0f       	add	r24, r22
 30e:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 312:	0e c0       	rjmp	.+28     	; 0x330 <LCD_Cursor_XY+0x46>
 314:	80 ec       	ldi	r24, 0xC0	; 192
 316:	86 0f       	add	r24, r22
 318:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 31c:	09 c0       	rjmp	.+18     	; 0x330 <LCD_Cursor_XY+0x46>
 31e:	80 e9       	ldi	r24, 0x90	; 144
 320:	86 0f       	add	r24, r22
 322:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 326:	04 c0       	rjmp	.+8      	; 0x330 <LCD_Cursor_XY+0x46>
 328:	80 ed       	ldi	r24, 0xD0	; 208
 32a:	86 0f       	add	r24, r22
 32c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
 330:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <__data_end>
 334:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <charCounter>
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <LCD_Clear_Screen>:
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
	charCounter = 0;
 344:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <charCounter>
	lineCounter = 0;
 348:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 34c:	08 95       	ret

0000034e <Check_End_Of_Line>:
============================================================================================================
 */
void Check_End_Of_Line()
{
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
 34e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <charCounter>
 352:	90 31       	cpi	r25, 0x10	; 16
 354:	68 f0       	brcs	.+26     	; 0x370 <Check_End_Of_Line+0x22>
 356:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	48 f4       	brcc	.+18     	; 0x370 <Check_End_Of_Line+0x22>
	{
		charCounter = 0;
 35e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <charCounter>
		lineCounter++;
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
		LCD_Cursor_XY(lineCounter, 0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Cursor_XY>
 36e:	08 95       	ret
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
 370:	90 31       	cpi	r25, 0x10	; 16
 372:	68 f0       	brcs	.+26     	; 0x38e <Check_End_Of_Line+0x40>
 374:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	49 f4       	brne	.+18     	; 0x38e <Check_End_Of_Line+0x40>
	{
		LCD_Clear_Screen();
 37c:	0e 94 9f 01 	call	0x33e	; 0x33e <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 380:	80 e8       	ldi	r24, 0x80	; 128
 382:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_Send_Command>
		charCounter = 0;
 386:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <charCounter>
		lineCounter = 0;
 38a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 38e:	08 95       	ret

00000390 <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8_t data)
{
 390:	cf 93       	push	r28
 392:	c8 2f       	mov	r28, r24
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
 394:	0e 94 a7 01 	call	0x34e	; 0x34e <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	89 e3       	ldi	r24, 0x39	; 57
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	89 e3       	ldi	r24, 0x39	; 57
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
 3b0:	4c 2f       	mov	r20, r28
 3b2:	40 71       	andi	r20, 0x10	; 16
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	55 95       	asr	r21
 3bc:	47 95       	ror	r20
 3be:	55 95       	asr	r21
 3c0:	47 95       	ror	r20
 3c2:	55 95       	asr	r21
 3c4:	47 95       	ror	r20
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	89 e3       	ldi	r24, 0x39	; 57
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
 3d0:	4c 2f       	mov	r20, r28
 3d2:	40 72       	andi	r20, 0x20	; 32
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	55 95       	asr	r21
 3d8:	47 95       	ror	r20
 3da:	55 95       	asr	r21
 3dc:	47 95       	ror	r20
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	55 95       	asr	r21
 3e4:	47 95       	ror	r20
 3e6:	55 95       	asr	r21
 3e8:	47 95       	ror	r20
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	89 e3       	ldi	r24, 0x39	; 57
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
 3f4:	4c 2f       	mov	r20, r28
 3f6:	40 74       	andi	r20, 0x40	; 64
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	04 2e       	mov	r0, r20
 3fc:	45 2f       	mov	r20, r21
 3fe:	00 0c       	add	r0, r0
 400:	44 1f       	adc	r20, r20
 402:	55 0b       	sbc	r21, r21
 404:	00 0c       	add	r0, r0
 406:	44 1f       	adc	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	64 e0       	ldi	r22, 0x04	; 4
 40c:	89 e3       	ldi	r24, 0x39	; 57
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
 414:	4c 2f       	mov	r20, r28
 416:	44 1f       	adc	r20, r20
 418:	44 27       	eor	r20, r20
 41a:	44 1f       	adc	r20, r20
 41c:	65 e0       	ldi	r22, 0x05	; 5
 41e:	89 e3       	ldi	r24, 0x39	; 57
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 426:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
 42a:	4c 2f       	mov	r20, r28
 42c:	41 70       	andi	r20, 0x01	; 1
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	89 e3       	ldi	r24, 0x39	; 57
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
 438:	4c 2f       	mov	r20, r28
 43a:	42 70       	andi	r20, 0x02	; 2
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	89 e3       	ldi	r24, 0x39	; 57
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
 44c:	4c 2f       	mov	r20, r28
 44e:	44 70       	andi	r20, 0x04	; 4
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	55 95       	asr	r21
 454:	47 95       	ror	r20
 456:	55 95       	asr	r21
 458:	47 95       	ror	r20
 45a:	64 e0       	ldi	r22, 0x04	; 4
 45c:	89 e3       	ldi	r24, 0x39	; 57
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
 464:	c8 70       	andi	r28, 0x08	; 8
 466:	4c 2f       	mov	r20, r28
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	55 95       	asr	r21
 46c:	47 95       	ror	r20
 46e:	55 95       	asr	r21
 470:	47 95       	ror	r20
 472:	55 95       	asr	r21
 474:	47 95       	ror	r20
 476:	65 e0       	ldi	r22, 0x05	; 5
 478:	89 e3       	ldi	r24, 0x39	; 57
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 8f 02 	call	0x51e	; 0x51e <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 480:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Enable_Pulse>
#endif
	charCounter++;
 484:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <charCounter>
 488:	8f 5f       	subi	r24, 0xFF	; 255
 48a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <charCounter>
}
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	ec 01       	movw	r28, r24
	while(*string)
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
 49a:	21 96       	adiw	r28, 0x01	; 1
 49c:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Send_Char>
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
	while(*string)
 4a0:	88 81       	ld	r24, Y
 4a2:	81 11       	cpse	r24, r1
 4a4:	fa cf       	rjmp	.-12     	; 0x49a <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <MCAL_GPIO_Init>:
{
    uint8_t status;
    status = (uint8_t)(GPIOx->PIN & 0xFF);

    return status;
}
 4ac:	dc 01       	movw	r26, r24
 4ae:	fb 01       	movw	r30, r22
 4b0:	81 81       	ldd	r24, Z+1	; 0x01
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	79 f4       	brne	.+30     	; 0x4d4 <MCAL_GPIO_Init+0x28>
 4b6:	11 96       	adiw	r26, 0x01	; 1
 4b8:	2c 91       	ld	r18, X
 4ba:	11 97       	sbiw	r26, 0x01	; 1
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	00 80       	ld	r0, Z
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <MCAL_GPIO_Init+0x1c>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <MCAL_GPIO_Init+0x18>
 4cc:	82 2b       	or	r24, r18
 4ce:	11 96       	adiw	r26, 0x01	; 1
 4d0:	8c 93       	st	X, r24
 4d2:	08 95       	ret
 4d4:	11 96       	adiw	r26, 0x01	; 1
 4d6:	8c 91       	ld	r24, X
 4d8:	11 97       	sbiw	r26, 0x01	; 1
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	00 80       	ld	r0, Z
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <MCAL_GPIO_Init+0x3a>
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <MCAL_GPIO_Init+0x36>
 4ea:	20 95       	com	r18
 4ec:	28 23       	and	r18, r24
 4ee:	11 96       	adiw	r26, 0x01	; 1
 4f0:	2c 93       	st	X, r18
 4f2:	11 97       	sbiw	r26, 0x01	; 1
 4f4:	81 81       	ldd	r24, Z+1	; 0x01
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	89 f4       	brne	.+34     	; 0x51c <MCAL_GPIO_Init+0x70>
 4fa:	80 b7       	in	r24, 0x30	; 48
 4fc:	8e 7f       	andi	r24, 0xFE	; 254
 4fe:	80 bf       	out	0x30, r24	; 48
 500:	12 96       	adiw	r26, 0x02	; 2
 502:	2c 91       	ld	r18, X
 504:	12 97       	sbiw	r26, 0x02	; 2
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	00 80       	ld	r0, Z
 50c:	02 c0       	rjmp	.+4      	; 0x512 <MCAL_GPIO_Init+0x66>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <MCAL_GPIO_Init+0x62>
 516:	82 2b       	or	r24, r18
 518:	12 96       	adiw	r26, 0x02	; 2
 51a:	8c 93       	st	X, r24
 51c:	08 95       	ret

0000051e <MCAL_GPIO_WritePin>:
* @return_value :   none.
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePin(volatile GPIO_typedef * GPIOx, uint8_t pinNumber, uint8_t value)
{
 51e:	fc 01       	movw	r30, r24
    if(value == GPIO_PIN_HIGH)
 520:	41 30       	cpi	r20, 0x01	; 1
 522:	59 f4       	brne	.+22     	; 0x53a <MCAL_GPIO_WritePin+0x1c>
    {
        SET_BIT(GPIOx->PORT, pinNumber);
 524:	22 81       	ldd	r18, Z+2	; 0x02
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <MCAL_GPIO_WritePin+0x12>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <MCAL_GPIO_WritePin+0xe>
 534:	82 2b       	or	r24, r18
 536:	82 83       	std	Z+2, r24	; 0x02
 538:	08 95       	ret
    }else{
        CLEAR_BIT(GPIOx->PORT, pinNumber);
 53a:	92 81       	ldd	r25, Z+2	; 0x02
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <MCAL_GPIO_WritePin+0x28>
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <MCAL_GPIO_WritePin+0x24>
 54a:	20 95       	com	r18
 54c:	29 23       	and	r18, r25
 54e:	22 83       	std	Z+2, r18	; 0x02
 550:	08 95       	ret

00000552 <main>:
#define F_CPU  8000000UL
#include "Atmega32_Drivers/APP/APP.h"

int main(void)
{
    EntranceGate_ECU_APP_SETUP();
 552:	0e 94 49 00 	call	0x92	; 0x92 <EntranceGate_ECU_APP_SETUP>

    while (1) 
    {
        EntranceGate_ECU_APP_Loop();
 556:	0e 94 4c 00 	call	0x98	; 0x98 <EntranceGate_ECU_APP_Loop>
 55a:	fd cf       	rjmp	.-6      	; 0x556 <main+0x4>

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
