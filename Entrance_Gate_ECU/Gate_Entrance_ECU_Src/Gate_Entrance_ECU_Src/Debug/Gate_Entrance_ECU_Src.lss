
Gate_Entrance_ECU_Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000b92  00000c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800094  00800094  00000c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002657  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da6  00000000  00000000  0000355f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001431  00000000  00000000  00004305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  00005738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec9  00000000  00000000  00005cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce7  00000000  00000000  00006bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  000078a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_12>
  34:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_13>
  38:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_14>
  3c:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3b       	cpi	r26, 0xB1	; 177
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 05 	call	0xb0c	; 0xb0c <main>
  8a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EntranceGate_ECU_APP_SETUP>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_SETUP(void)
{
    st_UAI_Init();
  92:	0e 94 26 01 	call	0x24c	; 0x24c <st_UAI_Init>
  96:	08 95       	ret

00000098 <EntranceGate_ECU_APP_Loop>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_Loop(void)
{
    fptr_st_UserAdminInterface();
  98:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <fptr_st_UserAdminInterface>
  9c:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <fptr_st_UserAdminInterface+0x1>
  a0:	09 95       	icall
  a2:	08 95       	ret

000000a4 <st_UAI_Idle>:
/**
 * @brief this state makes the module go into idle mode until some user action is done.
 * 
 */
void st_UAI_Idle(void)
{
  a4:	08 95       	ret

000000a6 <USART_Init>:

/** @defgroup Private Functions
  * @{
  */
static void USART_Init()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	29 97       	sbiw	r28, 0x09	; 9
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    sUSART_config_t cfg;

    cfg.USART_CLKOperation = USART_CLKOP_NormalAsynch;
  ba:	19 82       	std	Y+1, r1	; 0x01
    cfg.USART_baudRate = USART_BAUD_RATE_9600;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	95 e2       	ldi	r25, 0x25	; 37
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	ad 83       	std	Y+5, r26	; 0x05
  ca:	be 83       	std	Y+6, r27	; 0x06
    cfg.USART_Mode = USART_ModeTXRX;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8a 83       	std	Y+2, r24	; 0x02
    cfg.USART_wordLength = USART_8BitWord;
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	8f 83       	std	Y+7, r24	; 0x07
    cfg.USART_parityCTRL = USART_ParityMode_Disabled;
  d4:	19 86       	std	Y+9, r1	; 0x09
    cfg.USART_stopBits = USART_1StopBit;
  d6:	18 86       	std	Y+8, r1	; 0x08

    MCAL_UART_Init(&cfg);
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 48 04 	call	0x890	; 0x890 <MCAL_UART_Init>

    MCAL_UART_Interrupt_EN(USART_IRQ_RXC, USART_RX_ISR_Callback);
  e0:	60 e8       	ldi	r22, 0x80	; 128
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MCAL_UART_Interrupt_EN>

    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
  ea:	0e 94 a1 04 	call	0x942	; 0x942 <MCAL_UART_Disable>
}
  ee:	29 96       	adiw	r28, 0x09	; 9
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <USART_RX_ISR_Callback>:
static void USART_RX_ISR_Callback(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    /*Get the character the user typed*/
    MCAL_UART_Get_Data((uint16_t *)(&LOC_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
 100:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <sLOC_u8CharCounter.1827>
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	8a 56       	subi	r24, 0x6A	; 106
 10a:	9f 4f       	sbci	r25, 0xFF	; 255
 10c:	0e 94 c0 04 	call	0x980	; 0x980 <MCAL_UART_Get_Data>

    /*Send the character again to show it on the terminal*/
    MCAL_UART_Send_Data((uint16_t *)(&LOC_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
 110:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <sLOC_u8CharCounter.1827>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	8a 56       	subi	r24, 0x6A	; 106
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	0e 94 ab 04 	call	0x956	; 0x956 <MCAL_UART_Send_Data>
        
    sLOC_u8CharCounter++;
 120:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <sLOC_u8CharCounter.1827>
 124:	ef 5f       	subi	r30, 0xFF	; 255
 126:	e0 93 95 00 	sts	0x0095, r30	; 0x800095 <sLOC_u8CharCounter.1827>

    if(sLOC_u8CharCounter == DRIVER_ID_SIZE)
 12a:	e3 30       	cpi	r30, 0x03	; 3
 12c:	71 f4       	brne	.+28     	; 0x14a <USART_RX_ISR_Callback+0x4a>
    {
        /*Add a NULL character at the end*/
        LOC_u8DriverID[sLOC_u8CharCounter] = '\0';
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ea 56       	subi	r30, 0x6A	; 106
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	10 82       	st	Z, r1

        sLOC_u8CharCounter = 0;
 136:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <sLOC_u8CharCounter.1827>
 
        /*Disable the UART to stop it from serving another customer 
          until processing this customer's request*/
        MCAL_UART_Disable();
 13a:	0e 94 a1 04 	call	0x942	; 0x942 <MCAL_UART_Disable>


        fptr_st_UserAdminInterface = st_UAI_SendIDToAdmin;
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <fptr_st_UserAdminInterface+0x1>
 146:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <fptr_st_UserAdminInterface>
 14a:	08 95       	ret

0000014c <SPI_Init>:
    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
}

static void SPI_Init()
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	2b 97       	sbiw	r28, 0x0b	; 11
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
    SPI_Config_t LOC_sSPI_cfg;
    GPIO_Pin_Config_t LOC_sGPIO_CFG;

    LOC_sSPI_cfg.SPI_Mode       = SPI_MODE_SLAVE;
 160:	19 82       	std	Y+1, r1	; 0x01
    LOC_sSPI_cfg.SPI_DataOrder  = SPI_FIRST_BIT_LSB;
 162:	80 e2       	ldi	r24, 0x20	; 32
 164:	8a 83       	std	Y+2, r24	; 0x02
    LOC_sSPI_cfg.SPI_CPOL       = SPI_IDLE_HIGH;
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	8b 83       	std	Y+3, r24	; 0x03
    LOC_sSPI_cfg.SPI_CPHA       = SPI_SAMPLE_SECOND_EDGE;
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	8c 83       	std	Y+4, r24	; 0x04
    LOC_sSPI_cfg.SPI_IRQ_EN     = SPI_IRQ_ENABLE;
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	8f 83       	std	Y+7, r24	; 0x07
    LOC_sSPI_cfg.SPI_IRQHandler = SPI_ISR_Callback;
 172:	85 ed       	ldi	r24, 0xD5	; 213
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	99 87       	std	Y+9, r25	; 0x09
 178:	88 87       	std	Y+8, r24	; 0x08

    MCAL_SPI_Init(&LOC_sSPI_cfg);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <MCAL_SPI_Init>

    /*Configure the pin to be used to interrupt the admin ECU to request attention*/
    LOC_sGPIO_CFG.pinMode = GPIO_MODE_OUTPUT;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8b 87       	std	Y+11, r24	; 0x0b
    LOC_sGPIO_CFG.pinNumber = ADMIN_ECU_INTERRUPT_PIN;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	8a 87       	std	Y+10, r24	; 0x0a
    MCAL_GPIO_Init(ADMIN_ECU_INTERRUPT_PORT, &LOC_sGPIO_CFG);
 18a:	be 01       	movw	r22, r28
 18c:	66 5f       	subi	r22, 0xF6	; 246
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	86 e3       	ldi	r24, 0x36	; 54
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>

}
 198:	2b 96       	adiw	r28, 0x0b	; 11
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <SPI_ISR_Callback>:

static void SPI_ISR_Callback(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    if(sLOC_u8CharCounter == 0)
 1aa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 1ae:	81 11       	cpse	r24, r1
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <SPI_ISR_Callback+0x14>
    {
        MCAL_SPI_SendData((uint8_t *)&LOC_u8GateAddress, PollingDisable);
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	82 e9       	ldi	r24, 0x92	; 146
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 19 04 	call	0x832	; 0x832 <MCAL_SPI_SendData>
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <SPI_ISR_Callback+0x20>
    }else{
        MCAL_SPI_SendData(&LOC_u8DriverID[sLOC_u8CharCounter - 1], PollingDisable);
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	8b 56       	subi	r24, 0x6B	; 107
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	0e 94 19 04 	call	0x832	; 0x832 <MCAL_SPI_SendData>
    }
            
    sLOC_u8CharCounter++;
 1ca:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>

    if(sLOC_u8CharCounter == (DRIVER_ID_SIZE + 1))
 1d4:	84 30       	cpi	r24, 0x04	; 4
 1d6:	41 f4       	brne	.+16     	; 0x1e8 <SPI_ISR_Callback+0x3e>
    {
        sLOC_u8CharCounter = 0;
 1d8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>

        fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
 1dc:	85 ef       	ldi	r24, 0xF5	; 245
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <fptr_st_UserAdminInterface+0x1>
 1e4:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <fptr_st_UserAdminInterface>
 1e8:	08 95       	ret

000001ea <st_UAI_ShowWelcomeMsg>:
 * @brief this state prints the welcome message to guide the user on what to do.  
 * 
 */
void st_UAI_ShowWelcomeMsg(void)
{
    LCD_Clear_Screen();
 1ea:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_FIRST_LINE, 4);
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Welcome!"));
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Please enter the 3 digits ID"));
 206:	89 e6       	ldi	r24, 0x69	; 105
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_Send_String>

    /*Enable the UART module to take the user input*/
    MCAL_UART_Enable();
 20e:	0e 94 a5 04 	call	0x94a	; 0x94a <MCAL_UART_Enable>

    fptr_st_UserAdminInterface = st_UAI_Idle;
 212:	82 e5       	ldi	r24, 0x52	; 82
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <fptr_st_UserAdminInterface+0x1>
 21a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <fptr_st_UserAdminInterface>
 21e:	08 95       	ret

00000220 <st_UAI_SendIDToAdmin>:
 * 
 */
void st_UAI_SendIDToAdmin(void)
{    
    
    LCD_Clear_Screen();
 220:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_Clear_Screen>
    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Processing!"));
 22c:	86 e8       	ldi	r24, 0x86	; 134
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 07 03 	call	0x60e	; 0x60e <LCD_Send_String>

    /*Drive the ADMIN_ECU_INTERRUPT_PIN high to alert the admin that we need attention*/
    MCAL_GPIO_TogglePin(ADMIN_ECU_INTERRUPT_PORT, ADMIN_ECU_INTERRUPT_PIN);
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	86 e3       	ldi	r24, 0x36	; 54
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 67 03 	call	0x6ce	; 0x6ce <MCAL_GPIO_TogglePin>
    // MCAL_GPIO_WritePin(ADMIN_ECU_INTERRUPT_PORT, ADMIN_ECU_INTERRUPT_PIN, GPIO_PIN_HIGH);
        
    
    fptr_st_UserAdminInterface = st_UAI_Idle;
 23e:	82 e5       	ldi	r24, 0x52	; 82
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <fptr_st_UserAdminInterface+0x1>
 246:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <fptr_st_UserAdminInterface>
 24a:	08 95       	ret

0000024c <st_UAI_Init>:
 * 
 */
void st_UAI_Init(void)
{
    /*Initialize the USART module to get the input from the user*/
    USART_Init();
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>

    /*Initialize the SPI module to communicate with the admin ECU*/
    SPI_Init();
 250:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Init>

    /*Initialize the LCD module to print messages to the driver*/
    LCD_Init();
 254:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_Init>

    /*Set the initial state*/
    fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
 258:	85 ef       	ldi	r24, 0xF5	; 245
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <fptr_st_UserAdminInterface+0x1>
 260:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <fptr_st_UserAdminInterface>
 264:	08 95       	ret

00000266 <_delay_ms>:
	
	config.pinNumber = LCD_D7;
	config.pinMode = GPIO_MODE_OUTPUT;
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
#endif
}
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <_delay_ms+0x6>
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	19 82       	std	Y+1, r1	; 0x01
 272:	0b c0       	rjmp	.+22     	; 0x28a <_delay_ms+0x24>
 274:	1a 82       	std	Y+2, r1	; 0x02
 276:	03 c0       	rjmp	.+6      	; 0x27e <_delay_ms+0x18>
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	9f 5f       	subi	r25, 0xFF	; 255
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	94 36       	cpi	r25, 0x64	; 100
 282:	d0 f3       	brcs	.-12     	; 0x278 <_delay_ms+0x12>
 284:	99 81       	ldd	r25, Y+1	; 0x01
 286:	9f 5f       	subi	r25, 0xFF	; 255
 288:	99 83       	std	Y+1, r25	; 0x01
 28a:	99 81       	ldd	r25, Y+1	; 0x01
 28c:	98 17       	cp	r25, r24
 28e:	90 f3       	brcs	.-28     	; 0x274 <_delay_ms+0xe>
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <LCD_Enable_Pulse>:
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	89 e3       	ldi	r24, 0x39	; 57
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 2a6:	82 e3       	ldi	r24, 0x32	; 50
 2a8:	0e 94 33 01 	call	0x266	; 0x266 <_delay_ms>
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	89 e3       	ldi	r24, 0x39	; 57
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 2b8:	08 95       	ret

000002ba <LCD_Send_Command>:
 2ba:	cf 93       	push	r28
 2bc:	c8 2f       	mov	r28, r24
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	89 e3       	ldi	r24, 0x39	; 57
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	89 e3       	ldi	r24, 0x39	; 57
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 2d6:	4c 2f       	mov	r20, r28
 2d8:	40 71       	andi	r20, 0x10	; 16
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	55 95       	asr	r21
 2de:	47 95       	ror	r20
 2e0:	55 95       	asr	r21
 2e2:	47 95       	ror	r20
 2e4:	55 95       	asr	r21
 2e6:	47 95       	ror	r20
 2e8:	55 95       	asr	r21
 2ea:	47 95       	ror	r20
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	89 e3       	ldi	r24, 0x39	; 57
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 2f6:	4c 2f       	mov	r20, r28
 2f8:	40 72       	andi	r20, 0x20	; 32
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	55 95       	asr	r21
 302:	47 95       	ror	r20
 304:	55 95       	asr	r21
 306:	47 95       	ror	r20
 308:	55 95       	asr	r21
 30a:	47 95       	ror	r20
 30c:	55 95       	asr	r21
 30e:	47 95       	ror	r20
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	89 e3       	ldi	r24, 0x39	; 57
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 31a:	4c 2f       	mov	r20, r28
 31c:	40 74       	andi	r20, 0x40	; 64
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	04 2e       	mov	r0, r20
 322:	45 2f       	mov	r20, r21
 324:	00 0c       	add	r0, r0
 326:	44 1f       	adc	r20, r20
 328:	55 0b       	sbc	r21, r21
 32a:	00 0c       	add	r0, r0
 32c:	44 1f       	adc	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	89 e3       	ldi	r24, 0x39	; 57
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 33a:	4c 2f       	mov	r20, r28
 33c:	44 1f       	adc	r20, r20
 33e:	44 27       	eor	r20, r20
 340:	44 1f       	adc	r20, r20
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 34c:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_Enable_Pulse>
 350:	4c 2f       	mov	r20, r28
 352:	41 70       	andi	r20, 0x01	; 1
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	89 e3       	ldi	r24, 0x39	; 57
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 35e:	4c 2f       	mov	r20, r28
 360:	42 70       	andi	r20, 0x02	; 2
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	55 95       	asr	r21
 366:	47 95       	ror	r20
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	89 e3       	ldi	r24, 0x39	; 57
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 372:	4c 2f       	mov	r20, r28
 374:	44 70       	andi	r20, 0x04	; 4
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	55 95       	asr	r21
 37a:	47 95       	ror	r20
 37c:	55 95       	asr	r21
 37e:	47 95       	ror	r20
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	89 e3       	ldi	r24, 0x39	; 57
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 38a:	c8 70       	andi	r28, 0x08	; 8
 38c:	4c 2f       	mov	r20, r28
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	55 95       	asr	r21
 392:	47 95       	ror	r20
 394:	55 95       	asr	r21
 396:	47 95       	ror	r20
 398:	55 95       	asr	r21
 39a:	47 95       	ror	r20
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	89 e3       	ldi	r24, 0x39	; 57
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 3a6:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_Enable_Pulse>
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_Init>:
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	84 e1       	ldi	r24, 0x14	; 20
 3b6:	0e 94 33 01 	call	0x266	; 0x266 <_delay_ms>
 3ba:	cf ea       	ldi	r28, 0xAF	; 175
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
 3be:	18 82       	st	Y, r1
 3c0:	11 e0       	ldi	r17, 0x01	; 1
 3c2:	19 83       	std	Y+1, r17	; 0x01
 3c4:	be 01       	movw	r22, r28
 3c6:	89 e3       	ldi	r24, 0x39	; 57
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 3ce:	18 83       	st	Y, r17
 3d0:	19 83       	std	Y+1, r17	; 0x01
 3d2:	be 01       	movw	r22, r28
 3d4:	89 e3       	ldi	r24, 0x39	; 57
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	89 e3       	ldi	r24, 0x39	; 57
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	89 e3       	ldi	r24, 0x39	; 57
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	0e 94 33 01 	call	0x266	; 0x266 <_delay_ms>
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	88 83       	st	Y, r24
 3fe:	19 83       	std	Y+1, r17	; 0x01
 400:	be 01       	movw	r22, r28
 402:	89 e3       	ldi	r24, 0x39	; 57
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	88 83       	st	Y, r24
 40e:	19 83       	std	Y+1, r17	; 0x01
 410:	be 01       	movw	r22, r28
 412:	89 e3       	ldi	r24, 0x39	; 57
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	88 83       	st	Y, r24
 41e:	19 83       	std	Y+1, r17	; 0x01
 420:	be 01       	movw	r22, r28
 422:	89 e3       	ldi	r24, 0x39	; 57
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	88 83       	st	Y, r24
 42e:	19 83       	std	Y+1, r17	; 0x01
 430:	be 01       	movw	r22, r28
 432:	89 e3       	ldi	r24, 0x39	; 57
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	0e 94 33 01 	call	0x266	; 0x266 <_delay_ms>
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 446:	88 e2       	ldi	r24, 0x28	; 40
 448:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 458:	8f e0       	ldi	r24, 0x0F	; 15
 45a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	08 95       	ret

00000466 <LCD_Cursor_XY>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	60 31       	cpi	r22, 0x10	; 16
 46c:	18 f5       	brcc	.+70     	; 0x4b4 <LCD_Cursor_XY+0x4e>
 46e:	84 30       	cpi	r24, 0x04	; 4
 470:	08 f5       	brcc	.+66     	; 0x4b4 <LCD_Cursor_XY+0x4e>
 472:	d6 2f       	mov	r29, r22
 474:	c8 2f       	mov	r28, r24
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	59 f0       	breq	.+22     	; 0x490 <LCD_Cursor_XY+0x2a>
 47a:	28 f0       	brcs	.+10     	; 0x486 <LCD_Cursor_XY+0x20>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	69 f0       	breq	.+26     	; 0x49a <LCD_Cursor_XY+0x34>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	81 f0       	breq	.+32     	; 0x4a4 <LCD_Cursor_XY+0x3e>
 484:	13 c0       	rjmp	.+38     	; 0x4ac <LCD_Cursor_XY+0x46>
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	86 0f       	add	r24, r22
 48a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 48e:	0e c0       	rjmp	.+28     	; 0x4ac <LCD_Cursor_XY+0x46>
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	86 0f       	add	r24, r22
 494:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 498:	09 c0       	rjmp	.+18     	; 0x4ac <LCD_Cursor_XY+0x46>
 49a:	80 e9       	ldi	r24, 0x90	; 144
 49c:	86 0f       	add	r24, r22
 49e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <LCD_Cursor_XY+0x46>
 4a4:	80 ed       	ldi	r24, 0xD0	; 208
 4a6:	86 0f       	add	r24, r22
 4a8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
 4ac:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <lineCounter>
 4b0:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <charCounter>
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <LCD_Clear_Screen>:
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
	charCounter = 0;
 4c0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <charCounter>
	lineCounter = 0;
 4c4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <lineCounter>
 4c8:	08 95       	ret

000004ca <Check_End_Of_Line>:
============================================================================================================
 */
void Check_End_Of_Line()
{
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
 4ca:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <charCounter>
 4ce:	90 31       	cpi	r25, 0x10	; 16
 4d0:	68 f0       	brcs	.+26     	; 0x4ec <Check_End_Of_Line+0x22>
 4d2:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <lineCounter>
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	48 f4       	brcc	.+18     	; 0x4ec <Check_End_Of_Line+0x22>
	{
		charCounter = 0;
 4da:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <charCounter>
		lineCounter++;
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <lineCounter>
		LCD_Cursor_XY(lineCounter, 0);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Cursor_XY>
 4ea:	08 95       	ret
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
 4ec:	90 31       	cpi	r25, 0x10	; 16
 4ee:	68 f0       	brcs	.+26     	; 0x50a <Check_End_Of_Line+0x40>
 4f0:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <lineCounter>
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	49 f4       	brne	.+18     	; 0x50a <Check_End_Of_Line+0x40>
	{
		LCD_Clear_Screen();
 4f8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_Send_Command>
		charCounter = 0;
 502:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <charCounter>
		lineCounter = 0;
 506:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <lineCounter>
 50a:	08 95       	ret

0000050c <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8_t data)
{
 50c:	cf 93       	push	r28
 50e:	c8 2f       	mov	r28, r24
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
 510:	0e 94 65 02 	call	0x4ca	; 0x4ca <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	89 e3       	ldi	r24, 0x39	; 57
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	89 e3       	ldi	r24, 0x39	; 57
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
 52c:	4c 2f       	mov	r20, r28
 52e:	40 71       	andi	r20, 0x10	; 16
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	55 95       	asr	r21
 534:	47 95       	ror	r20
 536:	55 95       	asr	r21
 538:	47 95       	ror	r20
 53a:	55 95       	asr	r21
 53c:	47 95       	ror	r20
 53e:	55 95       	asr	r21
 540:	47 95       	ror	r20
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	89 e3       	ldi	r24, 0x39	; 57
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
 54c:	4c 2f       	mov	r20, r28
 54e:	40 72       	andi	r20, 0x20	; 32
 550:	50 e0       	ldi	r21, 0x00	; 0
 552:	55 95       	asr	r21
 554:	47 95       	ror	r20
 556:	55 95       	asr	r21
 558:	47 95       	ror	r20
 55a:	55 95       	asr	r21
 55c:	47 95       	ror	r20
 55e:	55 95       	asr	r21
 560:	47 95       	ror	r20
 562:	55 95       	asr	r21
 564:	47 95       	ror	r20
 566:	63 e0       	ldi	r22, 0x03	; 3
 568:	89 e3       	ldi	r24, 0x39	; 57
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
 570:	4c 2f       	mov	r20, r28
 572:	40 74       	andi	r20, 0x40	; 64
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	04 2e       	mov	r0, r20
 578:	45 2f       	mov	r20, r21
 57a:	00 0c       	add	r0, r0
 57c:	44 1f       	adc	r20, r20
 57e:	55 0b       	sbc	r21, r21
 580:	00 0c       	add	r0, r0
 582:	44 1f       	adc	r20, r20
 584:	55 1f       	adc	r21, r21
 586:	64 e0       	ldi	r22, 0x04	; 4
 588:	89 e3       	ldi	r24, 0x39	; 57
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
 590:	4c 2f       	mov	r20, r28
 592:	44 1f       	adc	r20, r20
 594:	44 27       	eor	r20, r20
 596:	44 1f       	adc	r20, r20
 598:	65 e0       	ldi	r22, 0x05	; 5
 59a:	89 e3       	ldi	r24, 0x39	; 57
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 5a2:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
 5a6:	4c 2f       	mov	r20, r28
 5a8:	41 70       	andi	r20, 0x01	; 1
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	89 e3       	ldi	r24, 0x39	; 57
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
 5b4:	4c 2f       	mov	r20, r28
 5b6:	42 70       	andi	r20, 0x02	; 2
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	55 95       	asr	r21
 5bc:	47 95       	ror	r20
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	89 e3       	ldi	r24, 0x39	; 57
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
 5c8:	4c 2f       	mov	r20, r28
 5ca:	44 70       	andi	r20, 0x04	; 4
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	55 95       	asr	r21
 5d0:	47 95       	ror	r20
 5d2:	55 95       	asr	r21
 5d4:	47 95       	ror	r20
 5d6:	64 e0       	ldi	r22, 0x04	; 4
 5d8:	89 e3       	ldi	r24, 0x39	; 57
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
 5e0:	c8 70       	andi	r28, 0x08	; 8
 5e2:	4c 2f       	mov	r20, r28
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	55 95       	asr	r21
 5e8:	47 95       	ror	r20
 5ea:	55 95       	asr	r21
 5ec:	47 95       	ror	r20
 5ee:	55 95       	asr	r21
 5f0:	47 95       	ror	r20
 5f2:	65 e0       	ldi	r22, 0x05	; 5
 5f4:	89 e3       	ldi	r24, 0x39	; 57
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 5fc:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_Enable_Pulse>
#endif
	charCounter++;
 600:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <charCounter>
 604:	8f 5f       	subi	r24, 0xFF	; 255
 606:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <charCounter>
}
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	ec 01       	movw	r28, r24
	while(*string)
 614:	03 c0       	rjmp	.+6      	; 0x61c <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
 616:	21 96       	adiw	r28, 0x01	; 1
 618:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_Send_Char>
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
	while(*string)
 61c:	88 81       	ld	r24, Y
 61e:	81 11       	cpse	r24, r1
 620:	fa cf       	rjmp	.-12     	; 0x616 <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <MCAL_GPIO_Init>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePort(volatile GPIO_typedef * GPIOx, uint8_t value)
{
    GPIOx->PORT = (uint8_t)value;
 628:	dc 01       	movw	r26, r24
 62a:	fb 01       	movw	r30, r22
 62c:	81 81       	ldd	r24, Z+1	; 0x01
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	79 f4       	brne	.+30     	; 0x650 <MCAL_GPIO_Init+0x28>
 632:	11 96       	adiw	r26, 0x01	; 1
 634:	2c 91       	ld	r18, X
 636:	11 97       	sbiw	r26, 0x01	; 1
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	00 80       	ld	r0, Z
 63e:	02 c0       	rjmp	.+4      	; 0x644 <MCAL_GPIO_Init+0x1c>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	0a 94       	dec	r0
 646:	e2 f7       	brpl	.-8      	; 0x640 <MCAL_GPIO_Init+0x18>
 648:	82 2b       	or	r24, r18
 64a:	11 96       	adiw	r26, 0x01	; 1
 64c:	8c 93       	st	X, r24
 64e:	08 95       	ret
 650:	11 96       	adiw	r26, 0x01	; 1
 652:	8c 91       	ld	r24, X
 654:	11 97       	sbiw	r26, 0x01	; 1
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	00 80       	ld	r0, Z
 65c:	02 c0       	rjmp	.+4      	; 0x662 <MCAL_GPIO_Init+0x3a>
 65e:	22 0f       	add	r18, r18
 660:	33 1f       	adc	r19, r19
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <MCAL_GPIO_Init+0x36>
 666:	20 95       	com	r18
 668:	28 23       	and	r18, r24
 66a:	11 96       	adiw	r26, 0x01	; 1
 66c:	2c 93       	st	X, r18
 66e:	11 97       	sbiw	r26, 0x01	; 1
 670:	81 81       	ldd	r24, Z+1	; 0x01
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	89 f4       	brne	.+34     	; 0x698 <MCAL_GPIO_Init+0x70>
 676:	80 b7       	in	r24, 0x30	; 48
 678:	8e 7f       	andi	r24, 0xFE	; 254
 67a:	80 bf       	out	0x30, r24	; 48
 67c:	12 96       	adiw	r26, 0x02	; 2
 67e:	2c 91       	ld	r18, X
 680:	12 97       	sbiw	r26, 0x02	; 2
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	00 80       	ld	r0, Z
 688:	02 c0       	rjmp	.+4      	; 0x68e <MCAL_GPIO_Init+0x66>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	0a 94       	dec	r0
 690:	e2 f7       	brpl	.-8      	; 0x68a <MCAL_GPIO_Init+0x62>
 692:	82 2b       	or	r24, r18
 694:	12 96       	adiw	r26, 0x02	; 2
 696:	8c 93       	st	X, r24
 698:	08 95       	ret

0000069a <MCAL_GPIO_WritePin>:
 69a:	fc 01       	movw	r30, r24
 69c:	41 30       	cpi	r20, 0x01	; 1
 69e:	59 f4       	brne	.+22     	; 0x6b6 <MCAL_GPIO_WritePin+0x1c>
 6a0:	22 81       	ldd	r18, Z+2	; 0x02
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <MCAL_GPIO_WritePin+0x12>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <MCAL_GPIO_WritePin+0xe>
 6b0:	82 2b       	or	r24, r18
 6b2:	82 83       	std	Z+2, r24	; 0x02
 6b4:	08 95       	ret
 6b6:	92 81       	ldd	r25, Z+2	; 0x02
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <MCAL_GPIO_WritePin+0x28>
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	6a 95       	dec	r22
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <MCAL_GPIO_WritePin+0x24>
 6c6:	20 95       	com	r18
 6c8:	29 23       	and	r18, r25
 6ca:	22 83       	std	Z+2, r18	; 0x02
 6cc:	08 95       	ret

000006ce <MCAL_GPIO_TogglePin>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_TogglePin(volatile GPIO_typedef * GPIOx, uint8_t pinNumber)
{
    TOGGLE_BIT(GPIOx->PORT,  pinNumber);
 6ce:	fc 01       	movw	r30, r24
 6d0:	42 81       	ldd	r20, Z+2	; 0x02
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <MCAL_GPIO_TogglePin+0xe>
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	6a 95       	dec	r22
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <MCAL_GPIO_TogglePin+0xa>
 6e0:	24 27       	eor	r18, r20
 6e2:	22 83       	std	Z+2, r18	; 0x02
 6e4:	08 95       	ret

000006e6 <MCAL_SPI_GPIO_Set_Pins>:
* @brief		:   Disable the SPI peripheral.
======================================================================================================================
*/
void MCAL_SPI_Disable()
{
    SPI->SPCR &= SPCR_SPE_RESET;
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <MCAL_SPI_GPIO_Set_Pins+0xa>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	80 31       	cpi	r24, 0x10	; 16
 6f6:	c9 f5       	brne	.+114    	; 0x76a <MCAL_SPI_GPIO_Set_Pins+0x84>
 6f8:	85 e0       	ldi	r24, 0x05	; 5
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	11 e0       	ldi	r17, 0x01	; 1
 6fe:	1a 83       	std	Y+2, r17	; 0x02
 700:	be 01       	movw	r22, r28
 702:	6f 5f       	subi	r22, 0xFF	; 255
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	86 e3       	ldi	r24, 0x36	; 54
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 70e:	07 e0       	ldi	r16, 0x07	; 7
 710:	09 83       	std	Y+1, r16	; 0x01
 712:	1a 83       	std	Y+2, r17	; 0x02
 714:	be 01       	movw	r22, r28
 716:	6f 5f       	subi	r22, 0xFF	; 255
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	86 e3       	ldi	r24, 0x36	; 54
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	89 83       	std	Y+1, r24	; 0x01
 726:	1a 83       	std	Y+2, r17	; 0x02
 728:	be 01       	movw	r22, r28
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	86 e3       	ldi	r24, 0x36	; 54
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 736:	09 83       	std	Y+1, r16	; 0x01
 738:	1a 83       	std	Y+2, r17	; 0x02
 73a:	be 01       	movw	r22, r28
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	86 e3       	ldi	r24, 0x36	; 54
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 748:	86 e0       	ldi	r24, 0x06	; 6
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	1a 82       	std	Y+2, r1	; 0x02
 74e:	be 01       	movw	r22, r28
 750:	6f 5f       	subi	r22, 0xFF	; 255
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	86 e3       	ldi	r24, 0x36	; 54
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	64 e0       	ldi	r22, 0x04	; 4
 760:	86 e3       	ldi	r24, 0x36	; 54
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 4d 03 	call	0x69a	; 0x69a <MCAL_GPIO_WritePin>
 768:	32 c0       	rjmp	.+100    	; 0x7ce <MCAL_SPI_GPIO_Set_Pins+0xe8>
 76a:	85 e0       	ldi	r24, 0x05	; 5
 76c:	89 83       	std	Y+1, r24	; 0x01
 76e:	11 e0       	ldi	r17, 0x01	; 1
 770:	1a 83       	std	Y+2, r17	; 0x02
 772:	be 01       	movw	r22, r28
 774:	6f 5f       	subi	r22, 0xFF	; 255
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	86 e3       	ldi	r24, 0x36	; 54
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 780:	07 e0       	ldi	r16, 0x07	; 7
 782:	09 83       	std	Y+1, r16	; 0x01
 784:	1a 82       	std	Y+2, r1	; 0x02
 786:	be 01       	movw	r22, r28
 788:	6f 5f       	subi	r22, 0xFF	; 255
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	86 e3       	ldi	r24, 0x36	; 54
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 794:	84 e0       	ldi	r24, 0x04	; 4
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	1a 82       	std	Y+2, r1	; 0x02
 79a:	be 01       	movw	r22, r28
 79c:	6f 5f       	subi	r22, 0xFF	; 255
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	86 e3       	ldi	r24, 0x36	; 54
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 7a8:	09 83       	std	Y+1, r16	; 0x01
 7aa:	1a 82       	std	Y+2, r1	; 0x02
 7ac:	be 01       	movw	r22, r28
 7ae:	6f 5f       	subi	r22, 0xFF	; 255
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	86 e3       	ldi	r24, 0x36	; 54
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 7ba:	86 e0       	ldi	r24, 0x06	; 6
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	1a 83       	std	Y+2, r17	; 0x02
 7c0:	be 01       	movw	r22, r28
 7c2:	6f 5f       	subi	r22, 0xFF	; 255
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	86 e3       	ldi	r24, 0x36	; 54
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 14 03 	call	0x628	; 0x628 <MCAL_GPIO_Init>
 7ce:	0f 90       	pop	r0
 7d0:	0f 90       	pop	r0
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	08 95       	ret

000007dc <MCAL_SPI_Init>:
 7dc:	fc 01       	movw	r30, r24
 7de:	1d b8       	out	0x0d, r1	; 13
 7e0:	9d b1       	in	r25, 0x0d	; 13
 7e2:	60 81       	ld	r22, Z
 7e4:	81 81       	ldd	r24, Z+1	; 0x01
 7e6:	54 81       	ldd	r21, Z+4	; 0x04
 7e8:	42 81       	ldd	r20, Z+2	; 0x02
 7ea:	33 81       	ldd	r19, Z+3	; 0x03
 7ec:	26 81       	ldd	r18, Z+6	; 0x06
 7ee:	86 2b       	or	r24, r22
 7f0:	85 2b       	or	r24, r21
 7f2:	84 2b       	or	r24, r20
 7f4:	83 2b       	or	r24, r19
 7f6:	82 2b       	or	r24, r18
 7f8:	89 2b       	or	r24, r25
 7fa:	8d b9       	out	0x0d, r24	; 13
 7fc:	8e b1       	in	r24, 0x0e	; 14
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	8e 7f       	andi	r24, 0xFE	; 254
 802:	25 81       	ldd	r18, Z+5	; 0x05
 804:	82 2b       	or	r24, r18
 806:	9e b1       	in	r25, 0x0e	; 14
 808:	89 2b       	or	r24, r25
 80a:	8e b9       	out	0x0e, r24	; 14
 80c:	86 81       	ldd	r24, Z+6	; 0x06
 80e:	80 38       	cpi	r24, 0x80	; 128
 810:	49 f4       	brne	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 812:	8f b7       	in	r24, 0x3f	; 63
 814:	80 68       	ori	r24, 0x80	; 128
 816:	8f bf       	out	0x3f, r24	; 63
 818:	87 81       	ldd	r24, Z+7	; 0x07
 81a:	90 85       	ldd	r25, Z+8	; 0x08
 81c:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <p_IRQ_callback_SPI+0x1>
 820:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <p_IRQ_callback_SPI>
 824:	80 81       	ld	r24, Z
 826:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCAL_SPI_GPIO_Set_Pins>
 82a:	8d b1       	in	r24, 0x0d	; 13
 82c:	80 64       	ori	r24, 0x40	; 64
 82e:	8d b9       	out	0x0d, r24	; 13
 830:	08 95       	ret

00000832 <MCAL_SPI_SendData>:
 832:	fc 01       	movw	r30, r24
 834:	80 81       	ld	r24, Z
 836:	8f b9       	out	0x0f, r24	; 15
 838:	61 11       	cpse	r22, r1
 83a:	02 c0       	rjmp	.+4      	; 0x840 <MCAL_SPI_SendData+0xe>
 83c:	77 9b       	sbis	0x0e, 7	; 14
 83e:	fe cf       	rjmp	.-4      	; 0x83c <MCAL_SPI_SendData+0xa>
 840:	08 95       	ret

00000842 <__vector_12>:
*               SPI ISR functions
*===============================================
*/

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void){
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31

  	p_IRQ_callback_SPI();
 864:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <p_IRQ_callback_SPI>
 868:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <p_IRQ_callback_SPI+0x1>
 86c:	09 95       	icall
}
 86e:	ff 91       	pop	r31
 870:	ef 91       	pop	r30
 872:	bf 91       	pop	r27
 874:	af 91       	pop	r26
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	7f 91       	pop	r23
 87c:	6f 91       	pop	r22
 87e:	5f 91       	pop	r21
 880:	4f 91       	pop	r20
 882:	3f 91       	pop	r19
 884:	2f 91       	pop	r18
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <MCAL_UART_Init>:
    case USART_IRQ_TXC:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_TXCIE_POS);
        break;
    
    case USART_IRQ_UDRE:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_UDREIE_POS);
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	ec 01       	movw	r28, r24
 896:	89 e0       	ldi	r24, 0x09	; 9
 898:	fe 01       	movw	r30, r28
 89a:	a4 ea       	ldi	r26, 0xA4	; 164
 89c:	b0 e0       	ldi	r27, 0x00	; 0
 89e:	01 90       	ld	r0, Z+
 8a0:	0d 92       	st	X+, r0
 8a2:	8a 95       	dec	r24
 8a4:	e1 f7       	brne	.-8      	; 0x89e <MCAL_UART_Init+0xe>
 8a6:	88 81       	ld	r24, Y
 8a8:	88 23       	and	r24, r24
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <MCAL_UART_Init+0x24>
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <MCAL_UART_Init+0x28>
 8b0:	a8 e0       	ldi	r26, 0x08	; 8
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <MCAL_UART_Init+0x2a>
 8b4:	a0 e1       	ldi	r26, 0x10	; 16
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <MCAL_UART_Init+0x2a>
 8b8:	a2 e0       	ldi	r26, 0x02	; 2
 8ba:	2a 81       	ldd	r18, Y+2	; 0x02
 8bc:	3b 81       	ldd	r19, Y+3	; 0x03
 8be:	4c 81       	ldd	r20, Y+4	; 0x04
 8c0:	5d 81       	ldd	r21, Y+5	; 0x05
 8c2:	b0 e0       	ldi	r27, 0x00	; 0
 8c4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__muluhisi3>
 8c8:	9b 01       	movw	r18, r22
 8ca:	ac 01       	movw	r20, r24
 8cc:	60 e0       	ldi	r22, 0x00	; 0
 8ce:	72 e1       	ldi	r23, 0x12	; 18
 8d0:	8a e7       	ldi	r24, 0x7A	; 122
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodsi4>
 8d8:	21 50       	subi	r18, 0x01	; 1
 8da:	31 09       	sbc	r19, r1
 8dc:	21 15       	cp	r18, r1
 8de:	80 e1       	ldi	r24, 0x10	; 16
 8e0:	38 07       	cpc	r19, r24
 8e2:	58 f5       	brcc	.+86     	; 0x93a <MCAL_UART_Init+0xaa>
 8e4:	29 b9       	out	0x09, r18	; 9
 8e6:	2f 3f       	cpi	r18, 0xFF	; 255
 8e8:	31 05       	cpc	r19, r1
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <MCAL_UART_Init+0x64>
 8ec:	18 f0       	brcs	.+6      	; 0x8f4 <MCAL_UART_Init+0x64>
 8ee:	83 2f       	mov	r24, r19
 8f0:	8f 70       	andi	r24, 0x0F	; 15
 8f2:	80 bd       	out	0x20, r24	; 32
 8f4:	88 81       	ld	r24, Y
 8f6:	82 30       	cpi	r24, 0x02	; 2
 8f8:	61 f0       	breq	.+24     	; 0x912 <MCAL_UART_Init+0x82>
 8fa:	81 30       	cpi	r24, 0x01	; 1
 8fc:	29 f4       	brne	.+10     	; 0x908 <MCAL_UART_Init+0x78>
 8fe:	8b b1       	in	r24, 0x0b	; 11
 900:	82 60       	ori	r24, 0x02	; 2
 902:	8b b9       	out	0x0b, r24	; 11
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	06 c0       	rjmp	.+12     	; 0x914 <MCAL_UART_Init+0x84>
 908:	8b b1       	in	r24, 0x0b	; 11
 90a:	8d 7f       	andi	r24, 0xFD	; 253
 90c:	8b b9       	out	0x0b, r24	; 11
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	01 c0       	rjmp	.+2      	; 0x914 <MCAL_UART_Init+0x84>
 912:	90 e8       	ldi	r25, 0x80	; 128
 914:	88 85       	ldd	r24, Y+8	; 0x08
 916:	89 2b       	or	r24, r25
 918:	9f 81       	ldd	r25, Y+7	; 0x07
 91a:	98 2b       	or	r25, r24
 91c:	8e 81       	ldd	r24, Y+6	; 0x06
 91e:	87 30       	cpi	r24, 0x07	; 7
 920:	29 f4       	brne	.+10     	; 0x92c <MCAL_UART_Init+0x9c>
 922:	89 2f       	mov	r24, r25
 924:	86 60       	ori	r24, 0x06	; 6
 926:	94 e0       	ldi	r25, 0x04	; 4
 928:	9a b9       	out	0x0a, r25	; 10
 92a:	01 c0       	rjmp	.+2      	; 0x92e <MCAL_UART_Init+0x9e>
 92c:	89 2b       	or	r24, r25
 92e:	80 68       	ori	r24, 0x80	; 128
 930:	80 bd       	out	0x20, r24	; 32
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	8a b9       	out	0x0a, r24	; 10
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	01 c0       	rjmp	.+2      	; 0x93c <MCAL_UART_Init+0xac>
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <MCAL_UART_Disable>:
 942:	8a b1       	in	r24, 0x0a	; 10
 944:	87 7e       	andi	r24, 0xE7	; 231
 946:	8a b9       	out	0x0a, r24	; 10
 948:	08 95       	ret

0000094a <MCAL_UART_Enable>:
 94a:	9a b1       	in	r25, 0x0a	; 10
 94c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <LOC_cfg+0x1>
 950:	89 2b       	or	r24, r25
 952:	8a b9       	out	0x0a, r24	; 10
 954:	08 95       	ret

00000956 <MCAL_UART_Send_Data>:
 956:	61 11       	cpse	r22, r1
 958:	02 c0       	rjmp	.+4      	; 0x95e <MCAL_UART_Send_Data+0x8>
 95a:	5d 9b       	sbis	0x0b, 5	; 11
 95c:	fe cf       	rjmp	.-4      	; 0x95a <MCAL_UART_Send_Data+0x4>
 95e:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <LOC_cfg+0x6>
 962:	27 30       	cpi	r18, 0x07	; 7
 964:	49 f4       	brne	.+18     	; 0x978 <MCAL_UART_Send_Data+0x22>
 966:	2a b1       	in	r18, 0x0a	; 10
 968:	2e 7f       	andi	r18, 0xFE	; 254
 96a:	2a b9       	out	0x0a, r18	; 10
 96c:	3a b1       	in	r19, 0x0a	; 10
 96e:	fc 01       	movw	r30, r24
 970:	21 81       	ldd	r18, Z+1	; 0x01
 972:	21 70       	andi	r18, 0x01	; 1
 974:	23 2b       	or	r18, r19
 976:	2a b9       	out	0x0a, r18	; 10
 978:	fc 01       	movw	r30, r24
 97a:	80 81       	ld	r24, Z
 97c:	8c b9       	out	0x0c, r24	; 12
 97e:	08 95       	ret

00000980 <MCAL_UART_Get_Data>:
 980:	61 11       	cpse	r22, r1
 982:	02 c0       	rjmp	.+4      	; 0x988 <MCAL_UART_Get_Data+0x8>
 984:	5f 9b       	sbis	0x0b, 7	; 11
 986:	fe cf       	rjmp	.-4      	; 0x984 <MCAL_UART_Get_Data+0x4>
 988:	5c 99       	sbic	0x0b, 4	; 11
 98a:	19 c0       	rjmp	.+50     	; 0x9be <MCAL_UART_Get_Data+0x3e>
 98c:	5a 99       	sbic	0x0b, 2	; 11
 98e:	19 c0       	rjmp	.+50     	; 0x9c2 <MCAL_UART_Get_Data+0x42>
 990:	5b 99       	sbic	0x0b, 3	; 11
 992:	19 c0       	rjmp	.+50     	; 0x9c6 <MCAL_UART_Get_Data+0x46>
 994:	fc 01       	movw	r30, r24
 996:	11 82       	std	Z+1, r1	; 0x01
 998:	10 82       	st	Z, r1
 99a:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <LOC_cfg+0x6>
 99e:	27 30       	cpi	r18, 0x07	; 7
 9a0:	39 f4       	brne	.+14     	; 0x9b0 <MCAL_UART_Get_Data+0x30>
 9a2:	2a b1       	in	r18, 0x0a	; 10
 9a4:	22 70       	andi	r18, 0x02	; 2
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	35 95       	asr	r19
 9aa:	27 95       	ror	r18
 9ac:	10 82       	st	Z, r1
 9ae:	21 83       	std	Z+1, r18	; 0x01
 9b0:	2c b1       	in	r18, 0x0c	; 12
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	fc 01       	movw	r30, r24
 9b6:	31 83       	std	Z+1, r19	; 0x01
 9b8:	20 83       	st	Z, r18
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	08 95       	ret
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	08 95       	ret
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	08 95       	ret
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	08 95       	ret

000009ca <MCAL_UART_Interrupt_EN>:
 9ca:	61 15       	cp	r22, r1
 9cc:	71 05       	cpc	r23, r1
 9ce:	29 f1       	breq	.+74     	; 0xa1a <MCAL_UART_Interrupt_EN+0x50>
 9d0:	9f b7       	in	r25, 0x3f	; 63
 9d2:	90 68       	ori	r25, 0x80	; 128
 9d4:	9f bf       	out	0x3f, r25	; 63
 9d6:	80 34       	cpi	r24, 0x40	; 64
 9d8:	71 f0       	breq	.+28     	; 0x9f6 <MCAL_UART_Interrupt_EN+0x2c>
 9da:	80 38       	cpi	r24, 0x80	; 128
 9dc:	19 f0       	breq	.+6      	; 0x9e4 <MCAL_UART_Interrupt_EN+0x1a>
 9de:	80 32       	cpi	r24, 0x20	; 32
 9e0:	f1 f4       	brne	.+60     	; 0xa1e <MCAL_UART_Interrupt_EN+0x54>
 9e2:	12 c0       	rjmp	.+36     	; 0xa08 <MCAL_UART_Interrupt_EN+0x3e>
 9e4:	8a b1       	in	r24, 0x0a	; 10
 9e6:	80 68       	ori	r24, 0x80	; 128
 9e8:	8a b9       	out	0x0a, r24	; 10
 9ea:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <LOC_fptr_RXC_callback+0x1>
 9ee:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <LOC_fptr_RXC_callback>
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	08 95       	ret
 9f6:	8a b1       	in	r24, 0x0a	; 10
 9f8:	80 64       	ori	r24, 0x40	; 64
 9fa:	8a b9       	out	0x0a, r24	; 10
 9fc:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <LOC_fptr_TXC_callback+0x1>
 a00:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <LOC_fptr_TXC_callback>
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	08 95       	ret
 a08:	8a b1       	in	r24, 0x0a	; 10
 a0a:	80 62       	ori	r24, 0x20	; 32
 a0c:	8a b9       	out	0x0a, r24	; 10
 a0e:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <LOC_fptr_UDRE_callback+0x1>
 a12:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <LOC_fptr_UDRE_callback>
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	08 95       	ret
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	08 95       	ret
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	08 95       	ret

00000a22 <__vector_13>:
/**
 * @brief This is the ISR for the USART RXC (USART, Rx Complete) 
 * 
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
 a22:	1f 92       	push	r1
 a24:	0f 92       	push	r0
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	0f 92       	push	r0
 a2a:	11 24       	eor	r1, r1
 a2c:	2f 93       	push	r18
 a2e:	3f 93       	push	r19
 a30:	4f 93       	push	r20
 a32:	5f 93       	push	r21
 a34:	6f 93       	push	r22
 a36:	7f 93       	push	r23
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
 a3c:	af 93       	push	r26
 a3e:	bf 93       	push	r27
 a40:	ef 93       	push	r30
 a42:	ff 93       	push	r31

  	LOC_fptr_RXC_callback();
 a44:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <LOC_fptr_RXC_callback>
 a48:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <LOC_fptr_RXC_callback+0x1>
 a4c:	09 95       	icall
}
 a4e:	ff 91       	pop	r31
 a50:	ef 91       	pop	r30
 a52:	bf 91       	pop	r27
 a54:	af 91       	pop	r26
 a56:	9f 91       	pop	r25
 a58:	8f 91       	pop	r24
 a5a:	7f 91       	pop	r23
 a5c:	6f 91       	pop	r22
 a5e:	5f 91       	pop	r21
 a60:	4f 91       	pop	r20
 a62:	3f 91       	pop	r19
 a64:	2f 91       	pop	r18
 a66:	0f 90       	pop	r0
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	0f 90       	pop	r0
 a6c:	1f 90       	pop	r1
 a6e:	18 95       	reti

00000a70 <__vector_14>:
/**
 * @brief This is the ISR for the USART UDRE (USART Data Register Empty) 
 * 
 */
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void){
 a70:	1f 92       	push	r1
 a72:	0f 92       	push	r0
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	0f 92       	push	r0
 a78:	11 24       	eor	r1, r1
 a7a:	2f 93       	push	r18
 a7c:	3f 93       	push	r19
 a7e:	4f 93       	push	r20
 a80:	5f 93       	push	r21
 a82:	6f 93       	push	r22
 a84:	7f 93       	push	r23
 a86:	8f 93       	push	r24
 a88:	9f 93       	push	r25
 a8a:	af 93       	push	r26
 a8c:	bf 93       	push	r27
 a8e:	ef 93       	push	r30
 a90:	ff 93       	push	r31

  	LOC_fptr_UDRE_callback();
 a92:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <LOC_fptr_UDRE_callback>
 a96:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <LOC_fptr_UDRE_callback+0x1>
 a9a:	09 95       	icall
}
 a9c:	ff 91       	pop	r31
 a9e:	ef 91       	pop	r30
 aa0:	bf 91       	pop	r27
 aa2:	af 91       	pop	r26
 aa4:	9f 91       	pop	r25
 aa6:	8f 91       	pop	r24
 aa8:	7f 91       	pop	r23
 aaa:	6f 91       	pop	r22
 aac:	5f 91       	pop	r21
 aae:	4f 91       	pop	r20
 ab0:	3f 91       	pop	r19
 ab2:	2f 91       	pop	r18
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <__vector_15>:
/**
 * @brief This is the ISR for the USART TXC (USART, Tx Complete) 
 * 
 */
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void){
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	2f 93       	push	r18
 aca:	3f 93       	push	r19
 acc:	4f 93       	push	r20
 ace:	5f 93       	push	r21
 ad0:	6f 93       	push	r22
 ad2:	7f 93       	push	r23
 ad4:	8f 93       	push	r24
 ad6:	9f 93       	push	r25
 ad8:	af 93       	push	r26
 ada:	bf 93       	push	r27
 adc:	ef 93       	push	r30
 ade:	ff 93       	push	r31

  	LOC_fptr_TXC_callback();
 ae0:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <LOC_fptr_TXC_callback>
 ae4:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <LOC_fptr_TXC_callback+0x1>
 ae8:	09 95       	icall
 aea:	ff 91       	pop	r31
 aec:	ef 91       	pop	r30
 aee:	bf 91       	pop	r27
 af0:	af 91       	pop	r26
 af2:	9f 91       	pop	r25
 af4:	8f 91       	pop	r24
 af6:	7f 91       	pop	r23
 af8:	6f 91       	pop	r22
 afa:	5f 91       	pop	r21
 afc:	4f 91       	pop	r20
 afe:	3f 91       	pop	r19
 b00:	2f 91       	pop	r18
 b02:	0f 90       	pop	r0
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	0f 90       	pop	r0
 b08:	1f 90       	pop	r1
 b0a:	18 95       	reti

00000b0c <main>:
#define F_CPU  8000000UL
#include "Atmega32_Drivers/APP/APP.h"

int main(void)
{
    EntranceGate_ECU_APP_SETUP();
 b0c:	0e 94 49 00 	call	0x92	; 0x92 <EntranceGate_ECU_APP_SETUP>

    while (1) 
    {
        EntranceGate_ECU_APP_Loop();
 b10:	0e 94 4c 00 	call	0x98	; 0x98 <EntranceGate_ECU_APP_Loop>
 b14:	fd cf       	rjmp	.-6      	; 0xb10 <main+0x4>

00000b16 <__udivmodsi4>:
 b16:	a1 e2       	ldi	r26, 0x21	; 33
 b18:	1a 2e       	mov	r1, r26
 b1a:	aa 1b       	sub	r26, r26
 b1c:	bb 1b       	sub	r27, r27
 b1e:	fd 01       	movw	r30, r26
 b20:	0d c0       	rjmp	.+26     	; 0xb3c <__udivmodsi4_ep>

00000b22 <__udivmodsi4_loop>:
 b22:	aa 1f       	adc	r26, r26
 b24:	bb 1f       	adc	r27, r27
 b26:	ee 1f       	adc	r30, r30
 b28:	ff 1f       	adc	r31, r31
 b2a:	a2 17       	cp	r26, r18
 b2c:	b3 07       	cpc	r27, r19
 b2e:	e4 07       	cpc	r30, r20
 b30:	f5 07       	cpc	r31, r21
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__udivmodsi4_ep>
 b34:	a2 1b       	sub	r26, r18
 b36:	b3 0b       	sbc	r27, r19
 b38:	e4 0b       	sbc	r30, r20
 b3a:	f5 0b       	sbc	r31, r21

00000b3c <__udivmodsi4_ep>:
 b3c:	66 1f       	adc	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	1a 94       	dec	r1
 b46:	69 f7       	brne	.-38     	; 0xb22 <__udivmodsi4_loop>
 b48:	60 95       	com	r22
 b4a:	70 95       	com	r23
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	9b 01       	movw	r18, r22
 b52:	ac 01       	movw	r20, r24
 b54:	bd 01       	movw	r22, r26
 b56:	cf 01       	movw	r24, r30
 b58:	08 95       	ret

00000b5a <__muluhisi3>:
 b5a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__umulhisi3>
 b5e:	a5 9f       	mul	r26, r21
 b60:	90 0d       	add	r25, r0
 b62:	b4 9f       	mul	r27, r20
 b64:	90 0d       	add	r25, r0
 b66:	a4 9f       	mul	r26, r20
 b68:	80 0d       	add	r24, r0
 b6a:	91 1d       	adc	r25, r1
 b6c:	11 24       	eor	r1, r1
 b6e:	08 95       	ret

00000b70 <__umulhisi3>:
 b70:	a2 9f       	mul	r26, r18
 b72:	b0 01       	movw	r22, r0
 b74:	b3 9f       	mul	r27, r19
 b76:	c0 01       	movw	r24, r0
 b78:	a3 9f       	mul	r26, r19
 b7a:	70 0d       	add	r23, r0
 b7c:	81 1d       	adc	r24, r1
 b7e:	11 24       	eor	r1, r1
 b80:	91 1d       	adc	r25, r1
 b82:	b2 9f       	mul	r27, r18
 b84:	70 0d       	add	r23, r0
 b86:	81 1d       	adc	r24, r1
 b88:	11 24       	eor	r1, r1
 b8a:	91 1d       	adc	r25, r1
 b8c:	08 95       	ret

00000b8e <_exit>:
 b8e:	f8 94       	cli

00000b90 <__stop_program>:
 b90:	ff cf       	rjmp	.-2      	; 0xb90 <__stop_program>
