
Gate_Entrance_ECU_Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000f28  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008000a4  008000a4  00001000  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003053  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fdc  00000000  00000000  000043af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001982  00000000  00000000  0000538b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  00006d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001364  00000000  00000000  000074dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010bc  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000098fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_10>
  2c:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_11>
  30:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_12>
  34:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_13>
  38:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_14>
  3c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 07 	call	0xea2	; 0xea2 <main>
  8a:	0c 94 92 07 	jmp	0xf24	; 0xf24 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EntranceGate_ECU_APP_SETUP>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_SETUP(void)
{
    st_UAI_Init();
  92:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <st_UAI_Init>
  96:	08 95       	ret

00000098 <EntranceGate_ECU_APP_Loop>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_Loop(void)
{
    fptr_st_UserAdminInterface();
  98:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <fptr_st_UserAdminInterface>
  9c:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
  a0:	09 95       	icall
  a2:	08 95       	ret

000000a4 <st_UAI_Idle>:
/**
 * @brief this state makes the module go into idle mode until some user action is done.
 * 
 */
void st_UAI_Idle(void)
{
  a4:	08 95       	ret

000000a6 <USART_Init>:

/** @defgroup Private Functions
  * @{
  */
static void USART_Init()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	29 97       	sbiw	r28, 0x09	; 9
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    sUSART_config_t cfg;

    cfg.USART_CLKOperation = USART_CLKOP_NormalAsynch;
  ba:	19 82       	std	Y+1, r1	; 0x01
    cfg.USART_baudRate = USART_BAUD_RATE_9600;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	95 e2       	ldi	r25, 0x25	; 37
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	ad 83       	std	Y+5, r26	; 0x05
  ca:	be 83       	std	Y+6, r27	; 0x06
    cfg.USART_Mode = USART_ModeTXRX;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8a 83       	std	Y+2, r24	; 0x02
    cfg.USART_wordLength = USART_8BitWord;
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	8f 83       	std	Y+7, r24	; 0x07
    cfg.USART_parityCTRL = USART_ParityMode_Disabled;
  d4:	19 86       	std	Y+9, r1	; 0x09
    cfg.USART_stopBits = USART_1StopBit;
  d6:	18 86       	std	Y+8, r1	; 0x08

    MCAL_UART_Init(&cfg);
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 13 06 	call	0xc26	; 0xc26 <MCAL_UART_Init>

    MCAL_UART_Interrupt_EN(USART_IRQ_RXC, USART_RX_ISR_Callback);
  e0:	60 e8       	ldi	r22, 0x80	; 128
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	0e 94 b0 06 	call	0xd60	; 0xd60 <MCAL_UART_Interrupt_EN>

    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
  ea:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <MCAL_UART_Disable>
}
  ee:	29 96       	adiw	r28, 0x09	; 9
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <USART_RX_ISR_Callback>:
static void USART_RX_ISR_Callback(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    /*Get the character the user typed*/
    MCAL_UART_Get_Data((uint16_t *)(&Glob_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
 100:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <sLOC_u8CharCounter.1884>
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	85 55       	subi	r24, 0x55	; 85
 10a:	9f 4f       	sbci	r25, 0xFF	; 255
 10c:	0e 94 8b 06 	call	0xd16	; 0xd16 <MCAL_UART_Get_Data>

    /*Send the character again to show it on the terminal*/
    MCAL_UART_Send_Data((uint16_t *)(&Glob_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
 110:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <sLOC_u8CharCounter.1884>
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	85 55       	subi	r24, 0x55	; 85
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	0e 94 76 06 	call	0xcec	; 0xcec <MCAL_UART_Send_Data>
        
    sLOC_u8CharCounter++;
 120:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <sLOC_u8CharCounter.1884>
 124:	ef 5f       	subi	r30, 0xFF	; 255
 126:	e0 93 a9 00 	sts	0x00A9, r30	; 0x8000a9 <sLOC_u8CharCounter.1884>

    if(sLOC_u8CharCounter == DRIVER_ID_SIZE)
 12a:	e3 30       	cpi	r30, 0x03	; 3
 12c:	71 f4       	brne	.+28     	; 0x14a <USART_RX_ISR_Callback+0x4a>
    {
        /*Add a NULL character at the end*/
        Glob_u8DriverID[sLOC_u8CharCounter] = '\0';
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e5 55       	subi	r30, 0x55	; 85
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	10 82       	st	Z, r1

        sLOC_u8CharCounter = 0;
 136:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <sLOC_u8CharCounter.1884>
 
        /*Disable the UART to stop it from serving another customer 
          until processing this customer's request*/
        MCAL_UART_Disable();
 13a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <MCAL_UART_Disable>

        fptr_st_UserAdminInterface = st_UAI_SendIDToAdmin;
 13e:	8e e9       	ldi	r24, 0x9E	; 158
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 146:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 14a:	08 95       	ret

0000014c <SPI_Init>:
    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
}

static void SPI_Init()
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	2b 97       	sbiw	r28, 0x0b	; 11
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
    SPI_Config_t LOC_sSPI_cfg;
    GPIO_Pin_Config_t LOC_sGPIO_CFG;

    LOC_sSPI_cfg.SPI_Mode       = SPI_MODE_SLAVE;
 160:	19 82       	std	Y+1, r1	; 0x01
    LOC_sSPI_cfg.SPI_DataOrder  = SPI_FIRST_BIT_LSB;
 162:	80 e2       	ldi	r24, 0x20	; 32
 164:	8a 83       	std	Y+2, r24	; 0x02
    LOC_sSPI_cfg.SPI_CPOL       = SPI_IDLE_HIGH;
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	8b 83       	std	Y+3, r24	; 0x03
    LOC_sSPI_cfg.SPI_CPHA       = SPI_SAMPLE_SECOND_EDGE;
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	8c 83       	std	Y+4, r24	; 0x04
    LOC_sSPI_cfg.SPI_IRQ_EN     = SPI_IRQ_ENABLE;
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	8f 83       	std	Y+7, r24	; 0x07
    LOC_sSPI_cfg.SPI_IRQHandler = SPI_ISR_Callback;
 172:	8e ee       	ldi	r24, 0xEE	; 238
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	99 87       	std	Y+9, r25	; 0x09
 178:	88 87       	std	Y+8, r24	; 0x08

    MCAL_SPI_Init(&LOC_sSPI_cfg);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 c5 04 	call	0x98a	; 0x98a <MCAL_SPI_Init>

    /*Configure the pin to be used to interrupt the admin ECU to request attention*/
    LOC_sGPIO_CFG.pinMode = GPIO_MODE_OUTPUT;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8b 87       	std	Y+11, r24	; 0x0b
    LOC_sGPIO_CFG.pinNumber = ADMIN_ECU_INTERRUPT_PIN;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	8a 87       	std	Y+10, r24	; 0x0a
    MCAL_GPIO_Init(ADMIN_ECU_INTERRUPT_PORT, &LOC_sGPIO_CFG);
 18a:	be 01       	movw	r22, r28
 18c:	66 5f       	subi	r22, 0xF6	; 246
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	86 e3       	ldi	r24, 0x36	; 54
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>

}
 198:	2b 96       	adiw	r28, 0x0b	; 11
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <Timer0_callback>:

static void Timer0_callback(void)
{
    static uint32_t counter;

	if(counter == 4000)
 1aa:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 1ae:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 1b2:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <__data_end+0x2>
 1b6:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <__data_end+0x3>
 1ba:	80 3a       	cpi	r24, 0xA0	; 160
 1bc:	9f 40       	sbci	r25, 0x0F	; 15
 1be:	a1 05       	cpc	r26, r1
 1c0:	b1 05       	cpc	r27, r1
 1c2:	81 f4       	brne	.+32     	; 0x1e4 <Timer0_callback+0x3a>
    {
        counter = 0;
 1c4:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
 1c8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x1>
 1cc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end+0x2>
 1d0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x3>

        fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
 1d4:	81 e8       	ldi	r24, 0x81	; 129
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 1dc:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>

        MCAL_TIMER0_Stop();
 1e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <MCAL_TIMER0_Stop>
    }

    counter++;
 1e4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 1e8:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 1ec:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <__data_end+0x2>
 1f0:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <__data_end+0x3>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	a1 1d       	adc	r26, r1
 1f8:	b1 1d       	adc	r27, r1
 1fa:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
 1fe:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
 202:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <__data_end+0x2>
 206:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <__data_end+0x3>
 20a:	08 95       	ret

0000020c <SPI_SendingID>:
*/
static void SPI_SendingID(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    if(sLOC_u8CharCounter == 0)
 20c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sLOC_u8CharCounter.1888>
 210:	81 11       	cpse	r24, r1
 212:	06 c0       	rjmp	.+12     	; 0x220 <SPI_SendingID+0x14>
    {
        MCAL_SPI_SendData((uint8_t *)&Glob_u8GateAddress, PollingDisable);
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	83 ea       	ldi	r24, 0xA3	; 163
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <MCAL_SPI_SendData>
 21e:	06 c0       	rjmp	.+12     	; 0x22c <SPI_SendingID+0x20>
    }else{
        MCAL_SPI_SendData(&Glob_u8DriverID[sLOC_u8CharCounter - 1], PollingDisable);
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	86 55       	subi	r24, 0x56	; 86
 226:	9f 4f       	sbci	r25, 0xFF	; 255
 228:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <MCAL_SPI_SendData>
    }
            
    sLOC_u8CharCounter++;
 22c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <sLOC_u8CharCounter.1888>
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <sLOC_u8CharCounter.1888>

    if(sLOC_u8CharCounter == (DRIVER_ID_SIZE + 1))
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	91 f4       	brne	.+36     	; 0x25e <SPI_SendingID+0x52>
    {
        MCAL_TIMER0_Stop();
 23a:	0e 94 9b 05 	call	0xb36	; 0xb36 <MCAL_TIMER0_Stop>

        sLOC_u8CharCounter = 0;
 23e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <sLOC_u8CharCounter.1888>
        
        Glob_u8ModuleCurrentState = UAI_WAITING_AUTHENTICATION_RESULT;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <Glob_u8ModuleCurrentState>
        
        /*Enable the timer to prevent getting stuck in this state forever*/
        MCAL_TIMER0_SetCounter(0x00);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 aa 05 	call	0xb54	; 0xb54 <MCAL_TIMER0_SetCounter>
        MCAL_TIMER0_Start();
 24e:	0e 94 a0 05 	call	0xb40	; 0xb40 <MCAL_TIMER0_Start>

        fptr_st_UserAdminInterface = st_UAI_Idle;
 252:	82 e5       	ldi	r24, 0x52	; 82
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 25a:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 25e:	08 95       	ret

00000260 <Timer0_Init>:
    MCAL_GPIO_Init(ADMIN_ECU_INTERRUPT_PORT, &LOC_sGPIO_CFG);

}

static void Timer0_Init(void)
{    
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	00 d0       	rcall	.+0      	; 0x266 <Timer0_Init+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <Timer0_Init+0x8>
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
    /*Set the callback function for the CTC mode*/
	MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT(Timer0_callback);
 26e:	85 ed       	ldi	r24, 0xD5	; 213
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 ad 05 	call	0xb5a	; 0xb5a <MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT>
    sTimer0_Config_t config = { Timer_Prescale_8, Timer_CTC_Mode, Timer_COM_Disconnected,
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	e0 e6       	ldi	r30, 0x60	; 96
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	de 01       	movw	r26, r28
 27e:	11 96       	adiw	r26, 0x01	; 1
 280:	01 90       	ld	r0, Z+
 282:	0d 92       	st	X+, r0
 284:	8a 95       	dec	r24
 286:	e1 f7       	brne	.-8      	; 0x280 <Timer0_Init+0x20>
                                Timer_TOI_Disable, Timer_TOCI_Enable};
    
    MCAL_TIMER0_SetCompare(250);
 288:	8a ef       	ldi	r24, 0xFA	; 250
 28a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <MCAL_TIMER0_SetCompare>
    MCAL_TIMER0_Init(&config);
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	0e 94 28 05 	call	0xa50	; 0xa50 <MCAL_TIMER0_Init>

    MCAL_TIMER0_Stop();
 296:	0e 94 9b 05 	call	0xb36	; 0xb36 <MCAL_TIMER0_Stop>
}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <st_UAI_IDAuthenticationPassed>:
 * @brief This state sends the open gate request and informs the driver that his ID is valid.
 * 
 */
void st_UAI_IDAuthenticationPassed(void)
{
    LCD_Clear_Screen();
 2aa:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
 2ae:	64 e0       	ldi	r22, 0x04	; 4
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("VALID ID!"));
 2b6:	87 e6       	ldi	r24, 0x67	; 103
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Send_String>

    /** @defgroup Testing to be deleted
      * @{
      */
        MCAL_TIMER0_SetCounter(0x00);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 aa 05 	call	0xb54	; 0xb54 <MCAL_TIMER0_SetCounter>
        MCAL_TIMER0_Start();
 2c4:	0e 94 a0 05 	call	0xb40	; 0xb40 <MCAL_TIMER0_Start>

        fptr_st_UserAdminInterface = st_UAI_Idle;
 2c8:	82 e5       	ldi	r24, 0x52	; 82
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 2d0:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 2d4:	08 95       	ret

000002d6 <st_UAI_IDAuthenticationFailed>:
 * 
 * 
 */
void st_UAI_IDAuthenticationFailed(void)
{
    LCD_Clear_Screen();
 2d6:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_SECOND_LINE, 3);
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("INVALID ID!"));
 2e2:	85 e6       	ldi	r24, 0x65	; 101
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Send_String>

    MCAL_TIMER0_SetCounter(0x00);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 aa 05 	call	0xb54	; 0xb54 <MCAL_TIMER0_SetCounter>
    MCAL_TIMER0_Start();
 2f0:	0e 94 a0 05 	call	0xb40	; 0xb40 <MCAL_TIMER0_Start>

    fptr_st_UserAdminInterface = st_UAI_Idle;
 2f4:	82 e5       	ldi	r24, 0x52	; 82
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 2fc:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 300:	08 95       	ret

00000302 <st_UAI_ShowWelcomeMsg>:
 * @brief this state prints the welcome message to guide the user on what to do.  
 * 
 */
void st_UAI_ShowWelcomeMsg(void)
{
    Glob_u8ModuleCurrentState = UAI_IDLE; 
 302:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <Glob_u8ModuleCurrentState>

    LCD_Clear_Screen();
 306:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_FIRST_LINE, 4);
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Welcome!"));
 312:	81 e7       	ldi	r24, 0x71	; 113
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Please enter the 3 digits ID"));
 322:	8a e7       	ldi	r24, 0x7A	; 122
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Send_String>

    /*Enable the UART module to take the user input*/
    MCAL_UART_Enable();
 32a:	0e 94 70 06 	call	0xce0	; 0xce0 <MCAL_UART_Enable>

    fptr_st_UserAdminInterface = st_UAI_Idle;
 32e:	82 e5       	ldi	r24, 0x52	; 82
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 336:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 33a:	08 95       	ret

0000033c <st_UAI_SendIDToAdmin>:
 * 
 */
void st_UAI_SendIDToAdmin(void)
{    
    
    LCD_Clear_Screen();
 33c:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Clear_Screen>
    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Processing!"));
 348:	87 e9       	ldi	r24, 0x97	; 151
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Send_String>

    /*Set the current state of the module*/
    Glob_u8ModuleCurrentState = UAI_SENDING_ID;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <Glob_u8ModuleCurrentState>

    /*Toggle the ADMIN_ECU_INTERRUPT_PIN to alert the admin that we need attention*/
    MCAL_GPIO_TogglePin(ADMIN_ECU_INTERRUPT_PORT, ADMIN_ECU_INTERRUPT_PIN);
 356:	63 e0       	ldi	r22, 0x03	; 3
 358:	86 e3       	ldi	r24, 0x36	; 54
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 3e 04 	call	0x87c	; 0x87c <MCAL_GPIO_TogglePin>

    /*Enable the timer to prevent getting stuck in this state forever*/
    MCAL_TIMER0_SetCounter(0x00);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 aa 05 	call	0xb54	; 0xb54 <MCAL_TIMER0_SetCounter>
    MCAL_TIMER0_Start();
 366:	0e 94 a0 05 	call	0xb40	; 0xb40 <MCAL_TIMER0_Start>

    fptr_st_UserAdminInterface = st_UAI_Idle;
 36a:	82 e5       	ldi	r24, 0x52	; 82
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 372:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 376:	08 95       	ret

00000378 <SPI_GetAuthenticationResult>:
* @Func_name	:   SPI_GetAuthenticationResult
* @brief		:   This function checks the authentication process result.
======================================================================================================================
*/
void SPI_GetAuthenticationResult(void)
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	1f 92       	push	r1
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
    static boolean LOC_boolDetectedGateAddress = FALSE;
    uint8_t LOC_u8RxBuffer = ENTRANCE_GATE_ECU_ADDRESS;
 382:	87 ee       	ldi	r24, 0xE7	; 231
 384:	89 83       	std	Y+1, r24	; 0x01

    MCAL_SPI_ExchangeData(&LOC_u8RxBuffer);
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <MCAL_SPI_ExchangeData>

    /*If we already received the gate ID from the last transmission 
      then check the authentication result*/
    if(LOC_boolDetectedGateAddress)
 38e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <LOC_boolDetectedGateAddress.1892>
 392:	88 23       	and	r24, r24
 394:	c9 f0       	breq	.+50     	; 0x3c8 <SPI_GetAuthenticationResult+0x50>
    {
        LOC_boolDetectedGateAddress = FALSE;
 396:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <LOC_boolDetectedGateAddress.1892>

        /*check if the data we got matches the successful authentication code*/
        if(LOC_u8RxBuffer == AUTHENTICATION_RESULT_PASS)
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	8f 3f       	cpi	r24, 0xFF	; 255
 39e:	39 f4       	brne	.+14     	; 0x3ae <SPI_GetAuthenticationResult+0x36>
        {
            fptr_st_UserAdminInterface = st_UAI_IDAuthenticationPassed;
 3a0:	85 e5       	ldi	r24, 0x55	; 85
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 3a8:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <SPI_GetAuthenticationResult+0x42>
        }else{
            fptr_st_UserAdminInterface = st_UAI_IDAuthenticationFailed;
 3ae:	8b e6       	ldi	r24, 0x6B	; 107
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 3b6:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
        }

        LOC_u8RxBuffer = 0x00u;
 3ba:	19 82       	std	Y+1, r1	; 0x01
        
        /*Write zero in the transmit buffer to avoid confusion in the next time*/
        MCAL_SPI_SendData(&LOC_u8RxBuffer, PollingDisable);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <MCAL_SPI_SendData>
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <SPI_GetAuthenticationResult+0x5c>

    }else{

        /*check if the received data matches the the gate address*/
        if(LOC_u8RxBuffer == Glob_u8GateAddress)
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	87 3e       	cpi	r24, 0xE7	; 231
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <SPI_GetAuthenticationResult+0x5c>
        {
            LOC_boolDetectedGateAddress = TRUE;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <LOC_boolDetectedGateAddress.1892>
        }else{

        }
    }
}
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <SPI_ISR_Callback>:
* @note			:   none.
======================================================================================================================
*/
static void SPI_ISR_Callback(void)
{
    switch (Glob_u8ModuleCurrentState)
 3dc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <Glob_u8ModuleCurrentState>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	19 f0       	breq	.+6      	; 0x3ea <SPI_ISR_Callback+0xe>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	21 f0       	breq	.+8      	; 0x3f0 <SPI_ISR_Callback+0x14>
 3e8:	08 95       	ret
        /* If we didn't send a request just ignore this interrupt as it's probably
           done to communicate with the other gate ECU. (Can be changed later if needed)*/
        break;

    case UAI_SENDING_ID:
        SPI_SendingID();
 3ea:	0e 94 06 01 	call	0x20c	; 0x20c <SPI_SendingID>
        break;
 3ee:	08 95       	ret

    case UAI_WAITING_AUTHENTICATION_RESULT:
        SPI_GetAuthenticationResult();
 3f0:	0e 94 bc 01 	call	0x378	; 0x378 <SPI_GetAuthenticationResult>
 3f4:	08 95       	ret

000003f6 <st_UAI_Init>:
 * 
 */
void st_UAI_Init(void)
{
    /*Initialize the USART module to get the input from the user*/
    USART_Init();
 3f6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>

    /*Initialize the SPI module to communicate with the admin ECU*/
    SPI_Init();
 3fa:	0e 94 a6 00 	call	0x14c	; 0x14c <SPI_Init>

    /*Initialize the LCD module to print messages to the driver*/
    LCD_Init();
 3fe:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Init>

    /*Initialize the Timer module to help us get out of any undesired state*/
    Timer0_Init();
 402:	0e 94 30 01 	call	0x260	; 0x260 <Timer0_Init>

    /*Set the initial state*/
    fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
 406:	81 e8       	ldi	r24, 0x81	; 129
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <fptr_st_UserAdminInterface+0x1>
 40e:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <fptr_st_UserAdminInterface>
 412:	08 95       	ret

00000414 <_delay_ms>:
	
	config.pinNumber = LCD_D7;
	config.pinMode = GPIO_MODE_OUTPUT;
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
#endif
}
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <_delay_ms+0x6>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	19 82       	std	Y+1, r1	; 0x01
 420:	0b c0       	rjmp	.+22     	; 0x438 <_delay_ms+0x24>
 422:	1a 82       	std	Y+2, r1	; 0x02
 424:	03 c0       	rjmp	.+6      	; 0x42c <_delay_ms+0x18>
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	9f 5f       	subi	r25, 0xFF	; 255
 42a:	9a 83       	std	Y+2, r25	; 0x02
 42c:	9a 81       	ldd	r25, Y+2	; 0x02
 42e:	94 36       	cpi	r25, 0x64	; 100
 430:	d0 f3       	brcs	.-12     	; 0x426 <_delay_ms+0x12>
 432:	99 81       	ldd	r25, Y+1	; 0x01
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	99 83       	std	Y+1, r25	; 0x01
 438:	99 81       	ldd	r25, Y+1	; 0x01
 43a:	98 17       	cp	r25, r24
 43c:	90 f3       	brcs	.-28     	; 0x422 <_delay_ms+0xe>
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <LCD_Enable_Pulse>:
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	89 e3       	ldi	r24, 0x39	; 57
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 454:	82 e3       	ldi	r24, 0x32	; 50
 456:	0e 94 0a 02 	call	0x414	; 0x414 <_delay_ms>
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	89 e3       	ldi	r24, 0x39	; 57
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 466:	08 95       	ret

00000468 <LCD_Send_Command>:
 468:	cf 93       	push	r28
 46a:	c8 2f       	mov	r28, r24
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	89 e3       	ldi	r24, 0x39	; 57
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	89 e3       	ldi	r24, 0x39	; 57
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 484:	4c 2f       	mov	r20, r28
 486:	40 71       	andi	r20, 0x10	; 16
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	55 95       	asr	r21
 48c:	47 95       	ror	r20
 48e:	55 95       	asr	r21
 490:	47 95       	ror	r20
 492:	55 95       	asr	r21
 494:	47 95       	ror	r20
 496:	55 95       	asr	r21
 498:	47 95       	ror	r20
 49a:	62 e0       	ldi	r22, 0x02	; 2
 49c:	89 e3       	ldi	r24, 0x39	; 57
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 4a4:	4c 2f       	mov	r20, r28
 4a6:	40 72       	andi	r20, 0x20	; 32
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	55 95       	asr	r21
 4ac:	47 95       	ror	r20
 4ae:	55 95       	asr	r21
 4b0:	47 95       	ror	r20
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	55 95       	asr	r21
 4b8:	47 95       	ror	r20
 4ba:	55 95       	asr	r21
 4bc:	47 95       	ror	r20
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	89 e3       	ldi	r24, 0x39	; 57
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 4c8:	4c 2f       	mov	r20, r28
 4ca:	40 74       	andi	r20, 0x40	; 64
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	04 2e       	mov	r0, r20
 4d0:	45 2f       	mov	r20, r21
 4d2:	00 0c       	add	r0, r0
 4d4:	44 1f       	adc	r20, r20
 4d6:	55 0b       	sbc	r21, r21
 4d8:	00 0c       	add	r0, r0
 4da:	44 1f       	adc	r20, r20
 4dc:	55 1f       	adc	r21, r21
 4de:	64 e0       	ldi	r22, 0x04	; 4
 4e0:	89 e3       	ldi	r24, 0x39	; 57
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 4e8:	4c 2f       	mov	r20, r28
 4ea:	44 1f       	adc	r20, r20
 4ec:	44 27       	eor	r20, r20
 4ee:	44 1f       	adc	r20, r20
 4f0:	65 e0       	ldi	r22, 0x05	; 5
 4f2:	89 e3       	ldi	r24, 0x39	; 57
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 4fa:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_Pulse>
 4fe:	4c 2f       	mov	r20, r28
 500:	41 70       	andi	r20, 0x01	; 1
 502:	62 e0       	ldi	r22, 0x02	; 2
 504:	89 e3       	ldi	r24, 0x39	; 57
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 50c:	4c 2f       	mov	r20, r28
 50e:	42 70       	andi	r20, 0x02	; 2
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	55 95       	asr	r21
 514:	47 95       	ror	r20
 516:	63 e0       	ldi	r22, 0x03	; 3
 518:	89 e3       	ldi	r24, 0x39	; 57
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 520:	4c 2f       	mov	r20, r28
 522:	44 70       	andi	r20, 0x04	; 4
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	55 95       	asr	r21
 52c:	47 95       	ror	r20
 52e:	64 e0       	ldi	r22, 0x04	; 4
 530:	89 e3       	ldi	r24, 0x39	; 57
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 538:	c8 70       	andi	r28, 0x08	; 8
 53a:	4c 2f       	mov	r20, r28
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	55 95       	asr	r21
 540:	47 95       	ror	r20
 542:	55 95       	asr	r21
 544:	47 95       	ror	r20
 546:	55 95       	asr	r21
 548:	47 95       	ror	r20
 54a:	65 e0       	ldi	r22, 0x05	; 5
 54c:	89 e3       	ldi	r24, 0x39	; 57
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 554:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_Pulse>
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <LCD_Init>:
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	84 e1       	ldi	r24, 0x14	; 20
 564:	0e 94 0a 02 	call	0x414	; 0x414 <_delay_ms>
 568:	c9 ec       	ldi	r28, 0xC9	; 201
 56a:	d0 e0       	ldi	r29, 0x00	; 0
 56c:	18 82       	st	Y, r1
 56e:	11 e0       	ldi	r17, 0x01	; 1
 570:	19 83       	std	Y+1, r17	; 0x01
 572:	be 01       	movw	r22, r28
 574:	89 e3       	ldi	r24, 0x39	; 57
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 57c:	18 83       	st	Y, r17
 57e:	19 83       	std	Y+1, r17	; 0x01
 580:	be 01       	movw	r22, r28
 582:	89 e3       	ldi	r24, 0x39	; 57
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	89 e3       	ldi	r24, 0x39	; 57
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	89 e3       	ldi	r24, 0x39	; 57
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 5a2:	8f e0       	ldi	r24, 0x0F	; 15
 5a4:	0e 94 0a 02 	call	0x414	; 0x414 <_delay_ms>
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	88 83       	st	Y, r24
 5ac:	19 83       	std	Y+1, r17	; 0x01
 5ae:	be 01       	movw	r22, r28
 5b0:	89 e3       	ldi	r24, 0x39	; 57
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	88 83       	st	Y, r24
 5bc:	19 83       	std	Y+1, r17	; 0x01
 5be:	be 01       	movw	r22, r28
 5c0:	89 e3       	ldi	r24, 0x39	; 57
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	88 83       	st	Y, r24
 5cc:	19 83       	std	Y+1, r17	; 0x01
 5ce:	be 01       	movw	r22, r28
 5d0:	89 e3       	ldi	r24, 0x39	; 57
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	88 83       	st	Y, r24
 5dc:	19 83       	std	Y+1, r17	; 0x01
 5de:	be 01       	movw	r22, r28
 5e0:	89 e3       	ldi	r24, 0x39	; 57
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 5e8:	85 e0       	ldi	r24, 0x05	; 5
 5ea:	0e 94 0a 02 	call	0x414	; 0x414 <_delay_ms>
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 5f4:	88 e2       	ldi	r24, 0x28	; 40
 5f6:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 600:	80 e8       	ldi	r24, 0x80	; 128
 602:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 606:	8f e0       	ldi	r24, 0x0F	; 15
 608:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	08 95       	ret

00000614 <LCD_Cursor_XY>:
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	60 31       	cpi	r22, 0x10	; 16
 61a:	18 f5       	brcc	.+70     	; 0x662 <LCD_Cursor_XY+0x4e>
 61c:	84 30       	cpi	r24, 0x04	; 4
 61e:	08 f5       	brcc	.+66     	; 0x662 <LCD_Cursor_XY+0x4e>
 620:	d6 2f       	mov	r29, r22
 622:	c8 2f       	mov	r28, r24
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	59 f0       	breq	.+22     	; 0x63e <LCD_Cursor_XY+0x2a>
 628:	28 f0       	brcs	.+10     	; 0x634 <LCD_Cursor_XY+0x20>
 62a:	82 30       	cpi	r24, 0x02	; 2
 62c:	69 f0       	breq	.+26     	; 0x648 <LCD_Cursor_XY+0x34>
 62e:	83 30       	cpi	r24, 0x03	; 3
 630:	81 f0       	breq	.+32     	; 0x652 <LCD_Cursor_XY+0x3e>
 632:	13 c0       	rjmp	.+38     	; 0x65a <LCD_Cursor_XY+0x46>
 634:	80 e8       	ldi	r24, 0x80	; 128
 636:	86 0f       	add	r24, r22
 638:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 63c:	0e c0       	rjmp	.+28     	; 0x65a <LCD_Cursor_XY+0x46>
 63e:	80 ec       	ldi	r24, 0xC0	; 192
 640:	86 0f       	add	r24, r22
 642:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 646:	09 c0       	rjmp	.+18     	; 0x65a <LCD_Cursor_XY+0x46>
 648:	80 e9       	ldi	r24, 0x90	; 144
 64a:	86 0f       	add	r24, r22
 64c:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 650:	04 c0       	rjmp	.+8      	; 0x65a <LCD_Cursor_XY+0x46>
 652:	80 ed       	ldi	r24, 0xD0	; 208
 654:	86 0f       	add	r24, r22
 656:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
 65a:	c0 93 b0 00 	sts	0x00B0, r28	; 0x8000b0 <lineCounter>
 65e:	d0 93 b1 00 	sts	0x00B1, r29	; 0x8000b1 <charCounter>
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <LCD_Clear_Screen>:
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
	charCounter = 0;
 66e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <charCounter>
	lineCounter = 0;
 672:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <lineCounter>
 676:	08 95       	ret

00000678 <Check_End_Of_Line>:
============================================================================================================
 */
void Check_End_Of_Line()
{
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
 678:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <charCounter>
 67c:	90 31       	cpi	r25, 0x10	; 16
 67e:	68 f0       	brcs	.+26     	; 0x69a <Check_End_Of_Line+0x22>
 680:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <lineCounter>
 684:	83 30       	cpi	r24, 0x03	; 3
 686:	48 f4       	brcc	.+18     	; 0x69a <Check_End_Of_Line+0x22>
	{
		charCounter = 0;
 688:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <charCounter>
		lineCounter++;
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <lineCounter>
		LCD_Cursor_XY(lineCounter, 0);
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	0e 94 0a 03 	call	0x614	; 0x614 <LCD_Cursor_XY>
 698:	08 95       	ret
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
 69a:	90 31       	cpi	r25, 0x10	; 16
 69c:	68 f0       	brcs	.+26     	; 0x6b8 <Check_End_Of_Line+0x40>
 69e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <lineCounter>
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	49 f4       	brne	.+18     	; 0x6b8 <Check_End_Of_Line+0x40>
	{
		LCD_Clear_Screen();
 6a6:	0e 94 34 03 	call	0x668	; 0x668 <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 6aa:	80 e8       	ldi	r24, 0x80	; 128
 6ac:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Send_Command>
		charCounter = 0;
 6b0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <charCounter>
		lineCounter = 0;
 6b4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <lineCounter>
 6b8:	08 95       	ret

000006ba <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8_t data)
{
 6ba:	cf 93       	push	r28
 6bc:	c8 2f       	mov	r28, r24
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
 6be:	0e 94 3c 03 	call	0x678	; 0x678 <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	89 e3       	ldi	r24, 0x39	; 57
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	89 e3       	ldi	r24, 0x39	; 57
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
 6da:	4c 2f       	mov	r20, r28
 6dc:	40 71       	andi	r20, 0x10	; 16
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	55 95       	asr	r21
 6e2:	47 95       	ror	r20
 6e4:	55 95       	asr	r21
 6e6:	47 95       	ror	r20
 6e8:	55 95       	asr	r21
 6ea:	47 95       	ror	r20
 6ec:	55 95       	asr	r21
 6ee:	47 95       	ror	r20
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	89 e3       	ldi	r24, 0x39	; 57
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
 6fa:	4c 2f       	mov	r20, r28
 6fc:	40 72       	andi	r20, 0x20	; 32
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	55 95       	asr	r21
 702:	47 95       	ror	r20
 704:	55 95       	asr	r21
 706:	47 95       	ror	r20
 708:	55 95       	asr	r21
 70a:	47 95       	ror	r20
 70c:	55 95       	asr	r21
 70e:	47 95       	ror	r20
 710:	55 95       	asr	r21
 712:	47 95       	ror	r20
 714:	63 e0       	ldi	r22, 0x03	; 3
 716:	89 e3       	ldi	r24, 0x39	; 57
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
 71e:	4c 2f       	mov	r20, r28
 720:	40 74       	andi	r20, 0x40	; 64
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	04 2e       	mov	r0, r20
 726:	45 2f       	mov	r20, r21
 728:	00 0c       	add	r0, r0
 72a:	44 1f       	adc	r20, r20
 72c:	55 0b       	sbc	r21, r21
 72e:	00 0c       	add	r0, r0
 730:	44 1f       	adc	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	64 e0       	ldi	r22, 0x04	; 4
 736:	89 e3       	ldi	r24, 0x39	; 57
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
 73e:	4c 2f       	mov	r20, r28
 740:	44 1f       	adc	r20, r20
 742:	44 27       	eor	r20, r20
 744:	44 1f       	adc	r20, r20
 746:	65 e0       	ldi	r22, 0x05	; 5
 748:	89 e3       	ldi	r24, 0x39	; 57
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 750:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
 754:	4c 2f       	mov	r20, r28
 756:	41 70       	andi	r20, 0x01	; 1
 758:	62 e0       	ldi	r22, 0x02	; 2
 75a:	89 e3       	ldi	r24, 0x39	; 57
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
 762:	4c 2f       	mov	r20, r28
 764:	42 70       	andi	r20, 0x02	; 2
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	55 95       	asr	r21
 76a:	47 95       	ror	r20
 76c:	63 e0       	ldi	r22, 0x03	; 3
 76e:	89 e3       	ldi	r24, 0x39	; 57
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
 776:	4c 2f       	mov	r20, r28
 778:	44 70       	andi	r20, 0x04	; 4
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	55 95       	asr	r21
 77e:	47 95       	ror	r20
 780:	55 95       	asr	r21
 782:	47 95       	ror	r20
 784:	64 e0       	ldi	r22, 0x04	; 4
 786:	89 e3       	ldi	r24, 0x39	; 57
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
 78e:	c8 70       	andi	r28, 0x08	; 8
 790:	4c 2f       	mov	r20, r28
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	55 95       	asr	r21
 796:	47 95       	ror	r20
 798:	55 95       	asr	r21
 79a:	47 95       	ror	r20
 79c:	55 95       	asr	r21
 79e:	47 95       	ror	r20
 7a0:	65 e0       	ldi	r22, 0x05	; 5
 7a2:	89 e3       	ldi	r24, 0x39	; 57
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 7aa:	0e 94 24 02 	call	0x448	; 0x448 <LCD_Enable_Pulse>
#endif
	charCounter++;
 7ae:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <charCounter>
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <charCounter>
}
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	ec 01       	movw	r28, r24
	while(*string)
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
 7c4:	21 96       	adiw	r28, 0x01	; 1
 7c6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_Send_Char>
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
	while(*string)
 7ca:	88 81       	ld	r24, Y
 7cc:	81 11       	cpse	r24, r1
 7ce:	fa cf       	rjmp	.-12     	; 0x7c4 <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <MCAL_GPIO_Init>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePort(volatile GPIO_typedef * GPIOx, uint8_t value)
{
    GPIOx->PORT = (uint8_t)value;
 7d6:	dc 01       	movw	r26, r24
 7d8:	fb 01       	movw	r30, r22
 7da:	81 81       	ldd	r24, Z+1	; 0x01
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	79 f4       	brne	.+30     	; 0x7fe <MCAL_GPIO_Init+0x28>
 7e0:	11 96       	adiw	r26, 0x01	; 1
 7e2:	2c 91       	ld	r18, X
 7e4:	11 97       	sbiw	r26, 0x01	; 1
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	00 80       	ld	r0, Z
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <MCAL_GPIO_Init+0x1c>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	0a 94       	dec	r0
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <MCAL_GPIO_Init+0x18>
 7f6:	82 2b       	or	r24, r18
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	8c 93       	st	X, r24
 7fc:	08 95       	ret
 7fe:	11 96       	adiw	r26, 0x01	; 1
 800:	8c 91       	ld	r24, X
 802:	11 97       	sbiw	r26, 0x01	; 1
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	00 80       	ld	r0, Z
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	0a 94       	dec	r0
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	20 95       	com	r18
 816:	28 23       	and	r18, r24
 818:	11 96       	adiw	r26, 0x01	; 1
 81a:	2c 93       	st	X, r18
 81c:	11 97       	sbiw	r26, 0x01	; 1
 81e:	81 81       	ldd	r24, Z+1	; 0x01
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	89 f4       	brne	.+34     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 824:	80 b7       	in	r24, 0x30	; 48
 826:	8e 7f       	andi	r24, 0xFE	; 254
 828:	80 bf       	out	0x30, r24	; 48
 82a:	12 96       	adiw	r26, 0x02	; 2
 82c:	2c 91       	ld	r18, X
 82e:	12 97       	sbiw	r26, 0x02	; 2
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	00 80       	ld	r0, Z
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	0a 94       	dec	r0
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	82 2b       	or	r24, r18
 842:	12 96       	adiw	r26, 0x02	; 2
 844:	8c 93       	st	X, r24
 846:	08 95       	ret

00000848 <MCAL_GPIO_WritePin>:
 848:	fc 01       	movw	r30, r24
 84a:	41 30       	cpi	r20, 0x01	; 1
 84c:	59 f4       	brne	.+22     	; 0x864 <__stack+0x5>
 84e:	22 81       	ldd	r18, Z+2	; 0x02
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <MCAL_GPIO_WritePin+0x12>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	6a 95       	dec	r22
 85c:	e2 f7       	brpl	.-8      	; 0x856 <MCAL_GPIO_WritePin+0xe>
 85e:	82 2b       	or	r24, r18
 860:	82 83       	std	Z+2, r24	; 0x02
 862:	08 95       	ret
 864:	92 81       	ldd	r25, Z+2	; 0x02
 866:	21 e0       	ldi	r18, 0x01	; 1
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	22 0f       	add	r18, r18
 86e:	33 1f       	adc	r19, r19
 870:	6a 95       	dec	r22
 872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
 874:	20 95       	com	r18
 876:	29 23       	and	r18, r25
 878:	22 83       	std	Z+2, r18	; 0x02
 87a:	08 95       	ret

0000087c <MCAL_GPIO_TogglePin>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_TogglePin(volatile GPIO_typedef * GPIOx, uint8_t pinNumber)
{
    TOGGLE_BIT(GPIOx->PORT,  pinNumber);
 87c:	fc 01       	movw	r30, r24
 87e:	42 81       	ldd	r20, Z+2	; 0x02
 880:	21 e0       	ldi	r18, 0x01	; 1
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <MCAL_GPIO_TogglePin+0xe>
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	6a 95       	dec	r22
 88c:	e2 f7       	brpl	.-8      	; 0x886 <MCAL_GPIO_TogglePin+0xa>
 88e:	24 27       	eor	r18, r20
 890:	22 83       	std	Z+2, r18	; 0x02
 892:	08 95       	ret

00000894 <MCAL_SPI_GPIO_Set_Pins>:
* @brief		:   Disable the SPI peripheral.
======================================================================================================================
*/
void MCAL_SPI_Disable()
{
    SPI->SPCR &= SPCR_SPE_RESET;
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	00 d0       	rcall	.+0      	; 0x89e <MCAL_SPI_GPIO_Set_Pins+0xa>
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
 8a2:	80 31       	cpi	r24, 0x10	; 16
 8a4:	c9 f5       	brne	.+114    	; 0x918 <MCAL_SPI_GPIO_Set_Pins+0x84>
 8a6:	85 e0       	ldi	r24, 0x05	; 5
 8a8:	89 83       	std	Y+1, r24	; 0x01
 8aa:	11 e0       	ldi	r17, 0x01	; 1
 8ac:	1a 83       	std	Y+2, r17	; 0x02
 8ae:	be 01       	movw	r22, r28
 8b0:	6f 5f       	subi	r22, 0xFF	; 255
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	86 e3       	ldi	r24, 0x36	; 54
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 8bc:	07 e0       	ldi	r16, 0x07	; 7
 8be:	09 83       	std	Y+1, r16	; 0x01
 8c0:	1a 83       	std	Y+2, r17	; 0x02
 8c2:	be 01       	movw	r22, r28
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	86 e3       	ldi	r24, 0x36	; 54
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 8d0:	84 e0       	ldi	r24, 0x04	; 4
 8d2:	89 83       	std	Y+1, r24	; 0x01
 8d4:	1a 83       	std	Y+2, r17	; 0x02
 8d6:	be 01       	movw	r22, r28
 8d8:	6f 5f       	subi	r22, 0xFF	; 255
 8da:	7f 4f       	sbci	r23, 0xFF	; 255
 8dc:	86 e3       	ldi	r24, 0x36	; 54
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 8e4:	09 83       	std	Y+1, r16	; 0x01
 8e6:	1a 83       	std	Y+2, r17	; 0x02
 8e8:	be 01       	movw	r22, r28
 8ea:	6f 5f       	subi	r22, 0xFF	; 255
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	86 e3       	ldi	r24, 0x36	; 54
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 8f6:	86 e0       	ldi	r24, 0x06	; 6
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	1a 82       	std	Y+2, r1	; 0x02
 8fc:	be 01       	movw	r22, r28
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	86 e3       	ldi	r24, 0x36	; 54
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	64 e0       	ldi	r22, 0x04	; 4
 90e:	86 e3       	ldi	r24, 0x36	; 54
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 24 04 	call	0x848	; 0x848 <MCAL_GPIO_WritePin>
 916:	32 c0       	rjmp	.+100    	; 0x97c <MCAL_SPI_GPIO_Set_Pins+0xe8>
 918:	85 e0       	ldi	r24, 0x05	; 5
 91a:	89 83       	std	Y+1, r24	; 0x01
 91c:	11 e0       	ldi	r17, 0x01	; 1
 91e:	1a 83       	std	Y+2, r17	; 0x02
 920:	be 01       	movw	r22, r28
 922:	6f 5f       	subi	r22, 0xFF	; 255
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	86 e3       	ldi	r24, 0x36	; 54
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 92e:	07 e0       	ldi	r16, 0x07	; 7
 930:	09 83       	std	Y+1, r16	; 0x01
 932:	1a 82       	std	Y+2, r1	; 0x02
 934:	be 01       	movw	r22, r28
 936:	6f 5f       	subi	r22, 0xFF	; 255
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	86 e3       	ldi	r24, 0x36	; 54
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 942:	84 e0       	ldi	r24, 0x04	; 4
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	1a 82       	std	Y+2, r1	; 0x02
 948:	be 01       	movw	r22, r28
 94a:	6f 5f       	subi	r22, 0xFF	; 255
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	86 e3       	ldi	r24, 0x36	; 54
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 956:	09 83       	std	Y+1, r16	; 0x01
 958:	1a 82       	std	Y+2, r1	; 0x02
 95a:	be 01       	movw	r22, r28
 95c:	6f 5f       	subi	r22, 0xFF	; 255
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	86 e3       	ldi	r24, 0x36	; 54
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 968:	86 e0       	ldi	r24, 0x06	; 6
 96a:	89 83       	std	Y+1, r24	; 0x01
 96c:	1a 83       	std	Y+2, r17	; 0x02
 96e:	be 01       	movw	r22, r28
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	86 e3       	ldi	r24, 0x36	; 54
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 97c:	0f 90       	pop	r0
 97e:	0f 90       	pop	r0
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <MCAL_SPI_Init>:
 98a:	fc 01       	movw	r30, r24
 98c:	1d b8       	out	0x0d, r1	; 13
 98e:	9d b1       	in	r25, 0x0d	; 13
 990:	60 81       	ld	r22, Z
 992:	81 81       	ldd	r24, Z+1	; 0x01
 994:	54 81       	ldd	r21, Z+4	; 0x04
 996:	42 81       	ldd	r20, Z+2	; 0x02
 998:	33 81       	ldd	r19, Z+3	; 0x03
 99a:	26 81       	ldd	r18, Z+6	; 0x06
 99c:	86 2b       	or	r24, r22
 99e:	85 2b       	or	r24, r21
 9a0:	84 2b       	or	r24, r20
 9a2:	83 2b       	or	r24, r19
 9a4:	82 2b       	or	r24, r18
 9a6:	89 2b       	or	r24, r25
 9a8:	8d b9       	out	0x0d, r24	; 13
 9aa:	8e b1       	in	r24, 0x0e	; 14
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	8e 7f       	andi	r24, 0xFE	; 254
 9b0:	25 81       	ldd	r18, Z+5	; 0x05
 9b2:	82 2b       	or	r24, r18
 9b4:	9e b1       	in	r25, 0x0e	; 14
 9b6:	89 2b       	or	r24, r25
 9b8:	8e b9       	out	0x0e, r24	; 14
 9ba:	86 81       	ldd	r24, Z+6	; 0x06
 9bc:	80 38       	cpi	r24, 0x80	; 128
 9be:	49 f4       	brne	.+18     	; 0x9d2 <MCAL_SPI_Init+0x48>
 9c0:	8f b7       	in	r24, 0x3f	; 63
 9c2:	80 68       	ori	r24, 0x80	; 128
 9c4:	8f bf       	out	0x3f, r24	; 63
 9c6:	87 81       	ldd	r24, Z+7	; 0x07
 9c8:	90 85       	ldd	r25, Z+8	; 0x08
 9ca:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <p_IRQ_callback_SPI+0x1>
 9ce:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <p_IRQ_callback_SPI>
 9d2:	80 81       	ld	r24, Z
 9d4:	0e 94 4a 04 	call	0x894	; 0x894 <MCAL_SPI_GPIO_Set_Pins>
 9d8:	8d b1       	in	r24, 0x0d	; 13
 9da:	80 64       	ori	r24, 0x40	; 64
 9dc:	8d b9       	out	0x0d, r24	; 13
 9de:	08 95       	ret

000009e0 <MCAL_SPI_SendData>:
 9e0:	fc 01       	movw	r30, r24
 9e2:	80 81       	ld	r24, Z
 9e4:	8f b9       	out	0x0f, r24	; 15
 9e6:	61 11       	cpse	r22, r1
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <MCAL_SPI_SendData+0xe>
 9ea:	77 9b       	sbis	0x0e, 7	; 14
 9ec:	fe cf       	rjmp	.-4      	; 0x9ea <MCAL_SPI_SendData+0xa>
 9ee:	08 95       	ret

000009f0 <MCAL_SPI_ExchangeData>:
 9f0:	fc 01       	movw	r30, r24
 9f2:	20 81       	ld	r18, Z
 9f4:	2f b9       	out	0x0f, r18	; 15
 9f6:	77 9b       	sbis	0x0e, 7	; 14
 9f8:	fe cf       	rjmp	.-4      	; 0x9f6 <MCAL_SPI_ExchangeData+0x6>
 9fa:	2f b1       	in	r18, 0x0f	; 15
 9fc:	fc 01       	movw	r30, r24
 9fe:	20 83       	st	Z, r18
 a00:	08 95       	ret

00000a02 <__vector_12>:
*               SPI ISR functions
*===============================================
*/

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void){
 a02:	1f 92       	push	r1
 a04:	0f 92       	push	r0
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	0f 92       	push	r0
 a0a:	11 24       	eor	r1, r1
 a0c:	2f 93       	push	r18
 a0e:	3f 93       	push	r19
 a10:	4f 93       	push	r20
 a12:	5f 93       	push	r21
 a14:	6f 93       	push	r22
 a16:	7f 93       	push	r23
 a18:	8f 93       	push	r24
 a1a:	9f 93       	push	r25
 a1c:	af 93       	push	r26
 a1e:	bf 93       	push	r27
 a20:	ef 93       	push	r30
 a22:	ff 93       	push	r31

  	p_IRQ_callback_SPI();
 a24:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <p_IRQ_callback_SPI>
 a28:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <p_IRQ_callback_SPI+0x1>
 a2c:	09 95       	icall
}
 a2e:	ff 91       	pop	r31
 a30:	ef 91       	pop	r30
 a32:	bf 91       	pop	r27
 a34:	af 91       	pop	r26
 a36:	9f 91       	pop	r25
 a38:	8f 91       	pop	r24
 a3a:	7f 91       	pop	r23
 a3c:	6f 91       	pop	r22
 a3e:	5f 91       	pop	r21
 a40:	4f 91       	pop	r20
 a42:	3f 91       	pop	r19
 a44:	2f 91       	pop	r18
 a46:	0f 90       	pop	r0
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	0f 90       	pop	r0
 a4c:	1f 90       	pop	r1
 a4e:	18 95       	reti

00000a50 <MCAL_TIMER0_Init>:
* @param [in]	:   callback: the overflow interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER0_CALLBACK_Overflow_INTERRUPT(Ptr_Func callback)
{
    overflowCallback = callback;
 a50:	0f 93       	push	r16
 a52:	1f 93       	push	r17
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	00 d0       	rcall	.+0      	; 0xa5a <MCAL_TIMER0_Init+0xa>
 a5a:	cd b7       	in	r28, 0x3d	; 61
 a5c:	de b7       	in	r29, 0x3e	; 62
 a5e:	fc 01       	movw	r30, r24
 a60:	89 2b       	or	r24, r25
 a62:	09 f4       	brne	.+2      	; 0xa66 <MCAL_TIMER0_Init+0x16>
 a64:	54 c0       	rjmp	.+168    	; 0xb0e <MCAL_TIMER0_Init+0xbe>
 a66:	80 81       	ld	r24, Z
 a68:	88 30       	cpi	r24, 0x08	; 8
 a6a:	08 f0       	brcs	.+2      	; 0xa6e <MCAL_TIMER0_Init+0x1e>
 a6c:	52 c0       	rjmp	.+164    	; 0xb12 <MCAL_TIMER0_Init+0xc2>
 a6e:	81 81       	ldd	r24, Z+1	; 0x01
 a70:	88 23       	and	r24, r24
 a72:	39 f0       	breq	.+14     	; 0xa82 <MCAL_TIMER0_Init+0x32>
 a74:	88 30       	cpi	r24, 0x08	; 8
 a76:	29 f0       	breq	.+10     	; 0xa82 <MCAL_TIMER0_Init+0x32>
 a78:	80 34       	cpi	r24, 0x40	; 64
 a7a:	19 f0       	breq	.+6      	; 0xa82 <MCAL_TIMER0_Init+0x32>
 a7c:	88 34       	cpi	r24, 0x48	; 72
 a7e:	09 f0       	breq	.+2      	; 0xa82 <MCAL_TIMER0_Init+0x32>
 a80:	4a c0       	rjmp	.+148    	; 0xb16 <MCAL_TIMER0_Init+0xc6>
 a82:	82 81       	ldd	r24, Z+2	; 0x02
 a84:	88 23       	and	r24, r24
 a86:	39 f0       	breq	.+14     	; 0xa96 <MCAL_TIMER0_Init+0x46>
 a88:	80 31       	cpi	r24, 0x10	; 16
 a8a:	29 f0       	breq	.+10     	; 0xa96 <MCAL_TIMER0_Init+0x46>
 a8c:	80 32       	cpi	r24, 0x20	; 32
 a8e:	19 f0       	breq	.+6      	; 0xa96 <MCAL_TIMER0_Init+0x46>
 a90:	80 33       	cpi	r24, 0x30	; 48
 a92:	09 f0       	breq	.+2      	; 0xa96 <MCAL_TIMER0_Init+0x46>
 a94:	42 c0       	rjmp	.+132    	; 0xb1a <MCAL_TIMER0_Init+0xca>
 a96:	83 81       	ldd	r24, Z+3	; 0x03
 a98:	82 30       	cpi	r24, 0x02	; 2
 a9a:	08 f0       	brcs	.+2      	; 0xa9e <MCAL_TIMER0_Init+0x4e>
 a9c:	40 c0       	rjmp	.+128    	; 0xb1e <MCAL_TIMER0_Init+0xce>
 a9e:	84 81       	ldd	r24, Z+4	; 0x04
 aa0:	88 23       	and	r24, r24
 aa2:	11 f0       	breq	.+4      	; 0xaa8 <MCAL_TIMER0_Init+0x58>
 aa4:	82 30       	cpi	r24, 0x02	; 2
 aa6:	e9 f5       	brne	.+122    	; 0xb22 <MCAL_TIMER0_Init+0xd2>
 aa8:	8f 01       	movw	r16, r30
 aaa:	85 e0       	ldi	r24, 0x05	; 5
 aac:	ad ec       	ldi	r26, 0xCD	; 205
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	01 90       	ld	r0, Z+
 ab2:	0d 92       	st	X+, r0
 ab4:	8a 95       	dec	r24
 ab6:	e1 f7       	brne	.-8      	; 0xab0 <MCAL_TIMER0_Init+0x60>
 ab8:	13 be       	out	0x33, r1	; 51
 aba:	f8 01       	movw	r30, r16
 abc:	20 81       	ld	r18, Z
 abe:	81 81       	ldd	r24, Z+1	; 0x01
 ac0:	92 81       	ldd	r25, Z+2	; 0x02
 ac2:	82 2b       	or	r24, r18
 ac4:	89 2b       	or	r24, r25
 ac6:	83 bf       	out	0x33, r24	; 51
 ac8:	89 b7       	in	r24, 0x39	; 57
 aca:	8c 7f       	andi	r24, 0xFC	; 252
 acc:	89 bf       	out	0x39, r24	; 57
 ace:	99 b7       	in	r25, 0x39	; 57
 ad0:	23 81       	ldd	r18, Z+3	; 0x03
 ad2:	84 81       	ldd	r24, Z+4	; 0x04
 ad4:	82 2b       	or	r24, r18
 ad6:	89 2b       	or	r24, r25
 ad8:	89 bf       	out	0x39, r24	; 57
 ada:	82 81       	ldd	r24, Z+2	; 0x02
 adc:	88 23       	and	r24, r24
 ade:	59 f0       	breq	.+22     	; 0xaf6 <MCAL_TIMER0_Init+0xa6>
 ae0:	83 e0       	ldi	r24, 0x03	; 3
 ae2:	89 83       	std	Y+1, r24	; 0x01
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	8a 83       	std	Y+2, r24	; 0x02
 ae8:	be 01       	movw	r22, r28
 aea:	6f 5f       	subi	r22, 0xFF	; 255
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	86 e3       	ldi	r24, 0x36	; 54
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <MCAL_GPIO_Init>
 af6:	f8 01       	movw	r30, r16
 af8:	84 81       	ldd	r24, Z+4	; 0x04
 afa:	82 30       	cpi	r24, 0x02	; 2
 afc:	19 f0       	breq	.+6      	; 0xb04 <MCAL_TIMER0_Init+0xb4>
 afe:	83 81       	ldd	r24, Z+3	; 0x03
 b00:	81 30       	cpi	r24, 0x01	; 1
 b02:	89 f4       	brne	.+34     	; 0xb26 <MCAL_TIMER0_Init+0xd6>
 b04:	8f b7       	in	r24, 0x3f	; 63
 b06:	80 68       	ori	r24, 0x80	; 128
 b08:	8f bf       	out	0x3f, r24	; 63
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	0d c0       	rjmp	.+26     	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b0e:	81 e0       	ldi	r24, 0x01	; 1
 b10:	0b c0       	rjmp	.+22     	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	09 c0       	rjmp	.+18     	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	05 c0       	rjmp	.+10     	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <MCAL_TIMER0_Init+0xd8>
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	0f 90       	pop	r0
 b2a:	0f 90       	pop	r0
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	1f 91       	pop	r17
 b32:	0f 91       	pop	r16
 b34:	08 95       	ret

00000b36 <MCAL_TIMER0_Stop>:
 b36:	83 b7       	in	r24, 0x33	; 51
 b38:	88 7f       	andi	r24, 0xF8	; 248
 b3a:	83 bf       	out	0x33, r24	; 51
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	08 95       	ret

00000b40 <MCAL_TIMER0_Start>:
 b40:	93 b7       	in	r25, 0x33	; 51
 b42:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <timer0_CFG>
 b46:	89 2b       	or	r24, r25
 b48:	83 bf       	out	0x33, r24	; 51
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	08 95       	ret

00000b4e <MCAL_TIMER0_SetCompare>:
 b4e:	8c bf       	out	0x3c, r24	; 60
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	08 95       	ret

00000b54 <MCAL_TIMER0_SetCounter>:
 b54:	82 bf       	out	0x32, r24	; 50
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	08 95       	ret

00000b5a <MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
* @param [in]	:   callback: the output compare match interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT(Ptr_Func callback)
{
    outputCompareMatchCallback = callback;
 b5a:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <outputCompareMatchCallback+0x1>
 b5e:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <outputCompareMatchCallback>
 b62:	08 95       	ret

00000b64 <__vector_10>:
*===============================================
*/

/*Timer/Counter0 Compare Match (Vector number in the datasheet - 1)*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
 b64:	1f 92       	push	r1
 b66:	0f 92       	push	r0
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	0f 92       	push	r0
 b6c:	11 24       	eor	r1, r1
 b6e:	2f 93       	push	r18
 b70:	3f 93       	push	r19
 b72:	4f 93       	push	r20
 b74:	5f 93       	push	r21
 b76:	6f 93       	push	r22
 b78:	7f 93       	push	r23
 b7a:	8f 93       	push	r24
 b7c:	9f 93       	push	r25
 b7e:	af 93       	push	r26
 b80:	bf 93       	push	r27
 b82:	ef 93       	push	r30
 b84:	ff 93       	push	r31
    
    outputCompareMatchCallback();
 b86:	e0 91 cb 00 	lds	r30, 0x00CB	; 0x8000cb <outputCompareMatchCallback>
 b8a:	f0 91 cc 00 	lds	r31, 0x00CC	; 0x8000cc <outputCompareMatchCallback+0x1>
 b8e:	09 95       	icall
}
 b90:	ff 91       	pop	r31
 b92:	ef 91       	pop	r30
 b94:	bf 91       	pop	r27
 b96:	af 91       	pop	r26
 b98:	9f 91       	pop	r25
 b9a:	8f 91       	pop	r24
 b9c:	7f 91       	pop	r23
 b9e:	6f 91       	pop	r22
 ba0:	5f 91       	pop	r21
 ba2:	4f 91       	pop	r20
 ba4:	3f 91       	pop	r19
 ba6:	2f 91       	pop	r18
 ba8:	0f 90       	pop	r0
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	0f 90       	pop	r0
 bae:	1f 90       	pop	r1
 bb0:	18 95       	reti

00000bb2 <__vector_11>:

/*Timer/Counter0 Overflow*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
 bb2:	1f 92       	push	r1
 bb4:	0f 92       	push	r0
 bb6:	0f b6       	in	r0, 0x3f	; 63
 bb8:	0f 92       	push	r0
 bba:	11 24       	eor	r1, r1
 bbc:	2f 93       	push	r18
 bbe:	3f 93       	push	r19
 bc0:	4f 93       	push	r20
 bc2:	5f 93       	push	r21
 bc4:	6f 93       	push	r22
 bc6:	7f 93       	push	r23
 bc8:	8f 93       	push	r24
 bca:	9f 93       	push	r25
 bcc:	af 93       	push	r26
 bce:	bf 93       	push	r27
 bd0:	ef 93       	push	r30
 bd2:	ff 93       	push	r31

    overflowCounter++;
 bd4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <overflowCounter>
 bd8:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <overflowCounter+0x1>
 bdc:	a0 91 b6 00 	lds	r26, 0x00B6	; 0x8000b6 <overflowCounter+0x2>
 be0:	b0 91 b7 00 	lds	r27, 0x00B7	; 0x8000b7 <overflowCounter+0x3>
 be4:	01 96       	adiw	r24, 0x01	; 1
 be6:	a1 1d       	adc	r26, r1
 be8:	b1 1d       	adc	r27, r1
 bea:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <overflowCounter>
 bee:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <overflowCounter+0x1>
 bf2:	a0 93 b6 00 	sts	0x00B6, r26	; 0x8000b6 <overflowCounter+0x2>
 bf6:	b0 93 b7 00 	sts	0x00B7, r27	; 0x8000b7 <overflowCounter+0x3>
    overflowCallback();
 bfa:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <overflowCallback>
 bfe:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <overflowCallback+0x1>
 c02:	09 95       	icall
}
 c04:	ff 91       	pop	r31
 c06:	ef 91       	pop	r30
 c08:	bf 91       	pop	r27
 c0a:	af 91       	pop	r26
 c0c:	9f 91       	pop	r25
 c0e:	8f 91       	pop	r24
 c10:	7f 91       	pop	r23
 c12:	6f 91       	pop	r22
 c14:	5f 91       	pop	r21
 c16:	4f 91       	pop	r20
 c18:	3f 91       	pop	r19
 c1a:	2f 91       	pop	r18
 c1c:	0f 90       	pop	r0
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	0f 90       	pop	r0
 c22:	1f 90       	pop	r1
 c24:	18 95       	reti

00000c26 <MCAL_UART_Init>:
    case USART_IRQ_TXC:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_TXCIE_POS);
        break;
    
    case USART_IRQ_UDRE:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_UDREIE_POS);
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	ec 01       	movw	r28, r24
 c2c:	89 e0       	ldi	r24, 0x09	; 9
 c2e:	fe 01       	movw	r30, r28
 c30:	ae eb       	ldi	r26, 0xBE	; 190
 c32:	b0 e0       	ldi	r27, 0x00	; 0
 c34:	01 90       	ld	r0, Z+
 c36:	0d 92       	st	X+, r0
 c38:	8a 95       	dec	r24
 c3a:	e1 f7       	brne	.-8      	; 0xc34 <MCAL_UART_Init+0xe>
 c3c:	88 81       	ld	r24, Y
 c3e:	88 23       	and	r24, r24
 c40:	21 f0       	breq	.+8      	; 0xc4a <MCAL_UART_Init+0x24>
 c42:	81 30       	cpi	r24, 0x01	; 1
 c44:	21 f4       	brne	.+8      	; 0xc4e <MCAL_UART_Init+0x28>
 c46:	a8 e0       	ldi	r26, 0x08	; 8
 c48:	03 c0       	rjmp	.+6      	; 0xc50 <MCAL_UART_Init+0x2a>
 c4a:	a0 e1       	ldi	r26, 0x10	; 16
 c4c:	01 c0       	rjmp	.+2      	; 0xc50 <MCAL_UART_Init+0x2a>
 c4e:	a2 e0       	ldi	r26, 0x02	; 2
 c50:	2a 81       	ldd	r18, Y+2	; 0x02
 c52:	3b 81       	ldd	r19, Y+3	; 0x03
 c54:	4c 81       	ldd	r20, Y+4	; 0x04
 c56:	5d 81       	ldd	r21, Y+5	; 0x05
 c58:	b0 e0       	ldi	r27, 0x00	; 0
 c5a:	0e 94 78 07 	call	0xef0	; 0xef0 <__muluhisi3>
 c5e:	9b 01       	movw	r18, r22
 c60:	ac 01       	movw	r20, r24
 c62:	60 e0       	ldi	r22, 0x00	; 0
 c64:	72 e1       	ldi	r23, 0x12	; 18
 c66:	8a e7       	ldi	r24, 0x7A	; 122
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	0e 94 56 07 	call	0xeac	; 0xeac <__udivmodsi4>
 c6e:	21 50       	subi	r18, 0x01	; 1
 c70:	31 09       	sbc	r19, r1
 c72:	21 15       	cp	r18, r1
 c74:	80 e1       	ldi	r24, 0x10	; 16
 c76:	38 07       	cpc	r19, r24
 c78:	58 f5       	brcc	.+86     	; 0xcd0 <MCAL_UART_Init+0xaa>
 c7a:	29 b9       	out	0x09, r18	; 9
 c7c:	2f 3f       	cpi	r18, 0xFF	; 255
 c7e:	31 05       	cpc	r19, r1
 c80:	21 f0       	breq	.+8      	; 0xc8a <MCAL_UART_Init+0x64>
 c82:	18 f0       	brcs	.+6      	; 0xc8a <MCAL_UART_Init+0x64>
 c84:	83 2f       	mov	r24, r19
 c86:	8f 70       	andi	r24, 0x0F	; 15
 c88:	80 bd       	out	0x20, r24	; 32
 c8a:	88 81       	ld	r24, Y
 c8c:	82 30       	cpi	r24, 0x02	; 2
 c8e:	61 f0       	breq	.+24     	; 0xca8 <MCAL_UART_Init+0x82>
 c90:	81 30       	cpi	r24, 0x01	; 1
 c92:	29 f4       	brne	.+10     	; 0xc9e <MCAL_UART_Init+0x78>
 c94:	8b b1       	in	r24, 0x0b	; 11
 c96:	82 60       	ori	r24, 0x02	; 2
 c98:	8b b9       	out	0x0b, r24	; 11
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	06 c0       	rjmp	.+12     	; 0xcaa <MCAL_UART_Init+0x84>
 c9e:	8b b1       	in	r24, 0x0b	; 11
 ca0:	8d 7f       	andi	r24, 0xFD	; 253
 ca2:	8b b9       	out	0x0b, r24	; 11
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	01 c0       	rjmp	.+2      	; 0xcaa <MCAL_UART_Init+0x84>
 ca8:	90 e8       	ldi	r25, 0x80	; 128
 caa:	88 85       	ldd	r24, Y+8	; 0x08
 cac:	89 2b       	or	r24, r25
 cae:	9f 81       	ldd	r25, Y+7	; 0x07
 cb0:	98 2b       	or	r25, r24
 cb2:	8e 81       	ldd	r24, Y+6	; 0x06
 cb4:	87 30       	cpi	r24, 0x07	; 7
 cb6:	29 f4       	brne	.+10     	; 0xcc2 <MCAL_UART_Init+0x9c>
 cb8:	89 2f       	mov	r24, r25
 cba:	86 60       	ori	r24, 0x06	; 6
 cbc:	94 e0       	ldi	r25, 0x04	; 4
 cbe:	9a b9       	out	0x0a, r25	; 10
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <MCAL_UART_Init+0x9e>
 cc2:	89 2b       	or	r24, r25
 cc4:	80 68       	ori	r24, 0x80	; 128
 cc6:	80 bd       	out	0x20, r24	; 32
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
 cca:	8a b9       	out	0x0a, r24	; 10
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	01 c0       	rjmp	.+2      	; 0xcd2 <MCAL_UART_Init+0xac>
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	df 91       	pop	r29
 cd4:	cf 91       	pop	r28
 cd6:	08 95       	ret

00000cd8 <MCAL_UART_Disable>:
 cd8:	8a b1       	in	r24, 0x0a	; 10
 cda:	87 7e       	andi	r24, 0xE7	; 231
 cdc:	8a b9       	out	0x0a, r24	; 10
 cde:	08 95       	ret

00000ce0 <MCAL_UART_Enable>:
 ce0:	9a b1       	in	r25, 0x0a	; 10
 ce2:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <LOC_cfg+0x1>
 ce6:	89 2b       	or	r24, r25
 ce8:	8a b9       	out	0x0a, r24	; 10
 cea:	08 95       	ret

00000cec <MCAL_UART_Send_Data>:
 cec:	61 11       	cpse	r22, r1
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <MCAL_UART_Send_Data+0x8>
 cf0:	5d 9b       	sbis	0x0b, 5	; 11
 cf2:	fe cf       	rjmp	.-4      	; 0xcf0 <MCAL_UART_Send_Data+0x4>
 cf4:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <LOC_cfg+0x6>
 cf8:	27 30       	cpi	r18, 0x07	; 7
 cfa:	49 f4       	brne	.+18     	; 0xd0e <MCAL_UART_Send_Data+0x22>
 cfc:	2a b1       	in	r18, 0x0a	; 10
 cfe:	2e 7f       	andi	r18, 0xFE	; 254
 d00:	2a b9       	out	0x0a, r18	; 10
 d02:	3a b1       	in	r19, 0x0a	; 10
 d04:	fc 01       	movw	r30, r24
 d06:	21 81       	ldd	r18, Z+1	; 0x01
 d08:	21 70       	andi	r18, 0x01	; 1
 d0a:	23 2b       	or	r18, r19
 d0c:	2a b9       	out	0x0a, r18	; 10
 d0e:	fc 01       	movw	r30, r24
 d10:	80 81       	ld	r24, Z
 d12:	8c b9       	out	0x0c, r24	; 12
 d14:	08 95       	ret

00000d16 <MCAL_UART_Get_Data>:
 d16:	61 11       	cpse	r22, r1
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <MCAL_UART_Get_Data+0x8>
 d1a:	5f 9b       	sbis	0x0b, 7	; 11
 d1c:	fe cf       	rjmp	.-4      	; 0xd1a <MCAL_UART_Get_Data+0x4>
 d1e:	5c 99       	sbic	0x0b, 4	; 11
 d20:	19 c0       	rjmp	.+50     	; 0xd54 <MCAL_UART_Get_Data+0x3e>
 d22:	5a 99       	sbic	0x0b, 2	; 11
 d24:	19 c0       	rjmp	.+50     	; 0xd58 <MCAL_UART_Get_Data+0x42>
 d26:	5b 99       	sbic	0x0b, 3	; 11
 d28:	19 c0       	rjmp	.+50     	; 0xd5c <MCAL_UART_Get_Data+0x46>
 d2a:	fc 01       	movw	r30, r24
 d2c:	11 82       	std	Z+1, r1	; 0x01
 d2e:	10 82       	st	Z, r1
 d30:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <LOC_cfg+0x6>
 d34:	27 30       	cpi	r18, 0x07	; 7
 d36:	39 f4       	brne	.+14     	; 0xd46 <MCAL_UART_Get_Data+0x30>
 d38:	2a b1       	in	r18, 0x0a	; 10
 d3a:	22 70       	andi	r18, 0x02	; 2
 d3c:	30 e0       	ldi	r19, 0x00	; 0
 d3e:	35 95       	asr	r19
 d40:	27 95       	ror	r18
 d42:	10 82       	st	Z, r1
 d44:	21 83       	std	Z+1, r18	; 0x01
 d46:	2c b1       	in	r18, 0x0c	; 12
 d48:	30 e0       	ldi	r19, 0x00	; 0
 d4a:	fc 01       	movw	r30, r24
 d4c:	31 83       	std	Z+1, r19	; 0x01
 d4e:	20 83       	st	Z, r18
 d50:	80 e0       	ldi	r24, 0x00	; 0
 d52:	08 95       	ret
 d54:	81 e0       	ldi	r24, 0x01	; 1
 d56:	08 95       	ret
 d58:	81 e0       	ldi	r24, 0x01	; 1
 d5a:	08 95       	ret
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	08 95       	ret

00000d60 <MCAL_UART_Interrupt_EN>:
 d60:	61 15       	cp	r22, r1
 d62:	71 05       	cpc	r23, r1
 d64:	29 f1       	breq	.+74     	; 0xdb0 <MCAL_UART_Interrupt_EN+0x50>
 d66:	9f b7       	in	r25, 0x3f	; 63
 d68:	90 68       	ori	r25, 0x80	; 128
 d6a:	9f bf       	out	0x3f, r25	; 63
 d6c:	80 34       	cpi	r24, 0x40	; 64
 d6e:	71 f0       	breq	.+28     	; 0xd8c <MCAL_UART_Interrupt_EN+0x2c>
 d70:	80 38       	cpi	r24, 0x80	; 128
 d72:	19 f0       	breq	.+6      	; 0xd7a <MCAL_UART_Interrupt_EN+0x1a>
 d74:	80 32       	cpi	r24, 0x20	; 32
 d76:	f1 f4       	brne	.+60     	; 0xdb4 <MCAL_UART_Interrupt_EN+0x54>
 d78:	12 c0       	rjmp	.+36     	; 0xd9e <MCAL_UART_Interrupt_EN+0x3e>
 d7a:	8a b1       	in	r24, 0x0a	; 10
 d7c:	80 68       	ori	r24, 0x80	; 128
 d7e:	8a b9       	out	0x0a, r24	; 10
 d80:	70 93 bd 00 	sts	0x00BD, r23	; 0x8000bd <LOC_fptr_RXC_callback+0x1>
 d84:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <LOC_fptr_RXC_callback>
 d88:	80 e0       	ldi	r24, 0x00	; 0
 d8a:	08 95       	ret
 d8c:	8a b1       	in	r24, 0x0a	; 10
 d8e:	80 64       	ori	r24, 0x40	; 64
 d90:	8a b9       	out	0x0a, r24	; 10
 d92:	70 93 bb 00 	sts	0x00BB, r23	; 0x8000bb <LOC_fptr_TXC_callback+0x1>
 d96:	60 93 ba 00 	sts	0x00BA, r22	; 0x8000ba <LOC_fptr_TXC_callback>
 d9a:	80 e0       	ldi	r24, 0x00	; 0
 d9c:	08 95       	ret
 d9e:	8a b1       	in	r24, 0x0a	; 10
 da0:	80 62       	ori	r24, 0x20	; 32
 da2:	8a b9       	out	0x0a, r24	; 10
 da4:	70 93 b9 00 	sts	0x00B9, r23	; 0x8000b9 <LOC_fptr_UDRE_callback+0x1>
 da8:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <LOC_fptr_UDRE_callback>
 dac:	80 e0       	ldi	r24, 0x00	; 0
 dae:	08 95       	ret
 db0:	81 e0       	ldi	r24, 0x01	; 1
 db2:	08 95       	ret
 db4:	81 e0       	ldi	r24, 0x01	; 1
 db6:	08 95       	ret

00000db8 <__vector_13>:
/**
 * @brief This is the ISR for the USART RXC (USART, Rx Complete) 
 * 
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
 db8:	1f 92       	push	r1
 dba:	0f 92       	push	r0
 dbc:	0f b6       	in	r0, 0x3f	; 63
 dbe:	0f 92       	push	r0
 dc0:	11 24       	eor	r1, r1
 dc2:	2f 93       	push	r18
 dc4:	3f 93       	push	r19
 dc6:	4f 93       	push	r20
 dc8:	5f 93       	push	r21
 dca:	6f 93       	push	r22
 dcc:	7f 93       	push	r23
 dce:	8f 93       	push	r24
 dd0:	9f 93       	push	r25
 dd2:	af 93       	push	r26
 dd4:	bf 93       	push	r27
 dd6:	ef 93       	push	r30
 dd8:	ff 93       	push	r31

  	LOC_fptr_RXC_callback();
 dda:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <LOC_fptr_RXC_callback>
 dde:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <LOC_fptr_RXC_callback+0x1>
 de2:	09 95       	icall
}
 de4:	ff 91       	pop	r31
 de6:	ef 91       	pop	r30
 de8:	bf 91       	pop	r27
 dea:	af 91       	pop	r26
 dec:	9f 91       	pop	r25
 dee:	8f 91       	pop	r24
 df0:	7f 91       	pop	r23
 df2:	6f 91       	pop	r22
 df4:	5f 91       	pop	r21
 df6:	4f 91       	pop	r20
 df8:	3f 91       	pop	r19
 dfa:	2f 91       	pop	r18
 dfc:	0f 90       	pop	r0
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	0f 90       	pop	r0
 e02:	1f 90       	pop	r1
 e04:	18 95       	reti

00000e06 <__vector_14>:
/**
 * @brief This is the ISR for the USART UDRE (USART Data Register Empty) 
 * 
 */
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void){
 e06:	1f 92       	push	r1
 e08:	0f 92       	push	r0
 e0a:	0f b6       	in	r0, 0x3f	; 63
 e0c:	0f 92       	push	r0
 e0e:	11 24       	eor	r1, r1
 e10:	2f 93       	push	r18
 e12:	3f 93       	push	r19
 e14:	4f 93       	push	r20
 e16:	5f 93       	push	r21
 e18:	6f 93       	push	r22
 e1a:	7f 93       	push	r23
 e1c:	8f 93       	push	r24
 e1e:	9f 93       	push	r25
 e20:	af 93       	push	r26
 e22:	bf 93       	push	r27
 e24:	ef 93       	push	r30
 e26:	ff 93       	push	r31

  	LOC_fptr_UDRE_callback();
 e28:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <LOC_fptr_UDRE_callback>
 e2c:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <LOC_fptr_UDRE_callback+0x1>
 e30:	09 95       	icall
}
 e32:	ff 91       	pop	r31
 e34:	ef 91       	pop	r30
 e36:	bf 91       	pop	r27
 e38:	af 91       	pop	r26
 e3a:	9f 91       	pop	r25
 e3c:	8f 91       	pop	r24
 e3e:	7f 91       	pop	r23
 e40:	6f 91       	pop	r22
 e42:	5f 91       	pop	r21
 e44:	4f 91       	pop	r20
 e46:	3f 91       	pop	r19
 e48:	2f 91       	pop	r18
 e4a:	0f 90       	pop	r0
 e4c:	0f be       	out	0x3f, r0	; 63
 e4e:	0f 90       	pop	r0
 e50:	1f 90       	pop	r1
 e52:	18 95       	reti

00000e54 <__vector_15>:
/**
 * @brief This is the ISR for the USART TXC (USART, Tx Complete) 
 * 
 */
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void){
 e54:	1f 92       	push	r1
 e56:	0f 92       	push	r0
 e58:	0f b6       	in	r0, 0x3f	; 63
 e5a:	0f 92       	push	r0
 e5c:	11 24       	eor	r1, r1
 e5e:	2f 93       	push	r18
 e60:	3f 93       	push	r19
 e62:	4f 93       	push	r20
 e64:	5f 93       	push	r21
 e66:	6f 93       	push	r22
 e68:	7f 93       	push	r23
 e6a:	8f 93       	push	r24
 e6c:	9f 93       	push	r25
 e6e:	af 93       	push	r26
 e70:	bf 93       	push	r27
 e72:	ef 93       	push	r30
 e74:	ff 93       	push	r31

  	LOC_fptr_TXC_callback();
 e76:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <LOC_fptr_TXC_callback>
 e7a:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <LOC_fptr_TXC_callback+0x1>
 e7e:	09 95       	icall
 e80:	ff 91       	pop	r31
 e82:	ef 91       	pop	r30
 e84:	bf 91       	pop	r27
 e86:	af 91       	pop	r26
 e88:	9f 91       	pop	r25
 e8a:	8f 91       	pop	r24
 e8c:	7f 91       	pop	r23
 e8e:	6f 91       	pop	r22
 e90:	5f 91       	pop	r21
 e92:	4f 91       	pop	r20
 e94:	3f 91       	pop	r19
 e96:	2f 91       	pop	r18
 e98:	0f 90       	pop	r0
 e9a:	0f be       	out	0x3f, r0	; 63
 e9c:	0f 90       	pop	r0
 e9e:	1f 90       	pop	r1
 ea0:	18 95       	reti

00000ea2 <main>:
#define F_CPU  8000000UL
#include "Atmega32_Drivers/APP/APP.h"

int main(void)
{
    EntranceGate_ECU_APP_SETUP();
 ea2:	0e 94 49 00 	call	0x92	; 0x92 <EntranceGate_ECU_APP_SETUP>

    while (1) 
    {
        EntranceGate_ECU_APP_Loop();
 ea6:	0e 94 4c 00 	call	0x98	; 0x98 <EntranceGate_ECU_APP_Loop>
 eaa:	fd cf       	rjmp	.-6      	; 0xea6 <main+0x4>

00000eac <__udivmodsi4>:
 eac:	a1 e2       	ldi	r26, 0x21	; 33
 eae:	1a 2e       	mov	r1, r26
 eb0:	aa 1b       	sub	r26, r26
 eb2:	bb 1b       	sub	r27, r27
 eb4:	fd 01       	movw	r30, r26
 eb6:	0d c0       	rjmp	.+26     	; 0xed2 <__udivmodsi4_ep>

00000eb8 <__udivmodsi4_loop>:
 eb8:	aa 1f       	adc	r26, r26
 eba:	bb 1f       	adc	r27, r27
 ebc:	ee 1f       	adc	r30, r30
 ebe:	ff 1f       	adc	r31, r31
 ec0:	a2 17       	cp	r26, r18
 ec2:	b3 07       	cpc	r27, r19
 ec4:	e4 07       	cpc	r30, r20
 ec6:	f5 07       	cpc	r31, r21
 ec8:	20 f0       	brcs	.+8      	; 0xed2 <__udivmodsi4_ep>
 eca:	a2 1b       	sub	r26, r18
 ecc:	b3 0b       	sbc	r27, r19
 ece:	e4 0b       	sbc	r30, r20
 ed0:	f5 0b       	sbc	r31, r21

00000ed2 <__udivmodsi4_ep>:
 ed2:	66 1f       	adc	r22, r22
 ed4:	77 1f       	adc	r23, r23
 ed6:	88 1f       	adc	r24, r24
 ed8:	99 1f       	adc	r25, r25
 eda:	1a 94       	dec	r1
 edc:	69 f7       	brne	.-38     	; 0xeb8 <__udivmodsi4_loop>
 ede:	60 95       	com	r22
 ee0:	70 95       	com	r23
 ee2:	80 95       	com	r24
 ee4:	90 95       	com	r25
 ee6:	9b 01       	movw	r18, r22
 ee8:	ac 01       	movw	r20, r24
 eea:	bd 01       	movw	r22, r26
 eec:	cf 01       	movw	r24, r30
 eee:	08 95       	ret

00000ef0 <__muluhisi3>:
 ef0:	0e 94 83 07 	call	0xf06	; 0xf06 <__umulhisi3>
 ef4:	a5 9f       	mul	r26, r21
 ef6:	90 0d       	add	r25, r0
 ef8:	b4 9f       	mul	r27, r20
 efa:	90 0d       	add	r25, r0
 efc:	a4 9f       	mul	r26, r20
 efe:	80 0d       	add	r24, r0
 f00:	91 1d       	adc	r25, r1
 f02:	11 24       	eor	r1, r1
 f04:	08 95       	ret

00000f06 <__umulhisi3>:
 f06:	a2 9f       	mul	r26, r18
 f08:	b0 01       	movw	r22, r0
 f0a:	b3 9f       	mul	r27, r19
 f0c:	c0 01       	movw	r24, r0
 f0e:	a3 9f       	mul	r26, r19
 f10:	70 0d       	add	r23, r0
 f12:	81 1d       	adc	r24, r1
 f14:	11 24       	eor	r1, r1
 f16:	91 1d       	adc	r25, r1
 f18:	b2 9f       	mul	r27, r18
 f1a:	70 0d       	add	r23, r0
 f1c:	81 1d       	adc	r24, r1
 f1e:	11 24       	eor	r1, r1
 f20:	91 1d       	adc	r25, r1
 f22:	08 95       	ret

00000f24 <_exit>:
 f24:	f8 94       	cli

00000f26 <__stop_program>:
 f26:	ff cf       	rjmp	.-2      	; 0xf26 <__stop_program>
