
Gate_Entrance_ECU_Src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001218  000012ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  008000a0  008000a0  000012ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d2e  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c2  00000000  00000000  00005496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002329  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b44  00000000  00000000  00008c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a4f  00000000  00000000  000097c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001985  00000000  00000000  0000b217  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_4>
      14:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_10>
      2c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_11>
      30:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_12>
      34:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_13>
      38:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_14>
      3c:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c9 08 	call	0x1192	; 0x1192 <main>
      8a:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EntranceGate_ECU_APP_SETUP>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_SETUP(void)
{
    st_UAI_Init();
      92:	0e 94 f7 01 	call	0x3ee	; 0x3ee <st_UAI_Init>

    st_GateController_Init();
      96:	0e 94 7f 00 	call	0xfe	; 0xfe <st_GateController_Init>
      9a:	08 95       	ret

0000009c <EntranceGate_ECU_APP_Loop>:
* Note			:   none.
======================================================================================================================
*/
void EntranceGate_ECU_APP_Loop(void)
{
    fptr_st_UserAdminInterface();
      9c:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <fptr_st_UserAdminInterface>
      a0:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
      a4:	09 95       	icall

    fptr_st_GateController();
      a6:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <fptr_st_GateController>
      aa:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <fptr_st_GateController+0x1>
      ae:	09 95       	icall
      b0:	08 95       	ret

000000b2 <Timer0_DelaycheckCar_Callback>:
/** @defgroup ISR_CALLBACK_FUNCTIONS
  * @{
  */
static void Timer0_DelaycheckCar_Callback(void)
{
    fptr_st_GateController = st_GateController_CheckCarPassed;
      b2:	83 e7       	ldi	r24, 0x73	; 115
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_GateController+0x1>
      ba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_GateController>
      be:	08 95       	ret

000000c0 <st_GateController_Idle>:
 * @brief This state puts the module in an idle state 
 * waiting for a signal from the User_Admin_Interface module. 
 * 
 */
void st_GateController_Idle(void)
{
      c0:	08 95       	ret

000000c2 <st_GateController_OpenGate>:
 * @note :The gate opens by turning the servo motor +90 degree
 */
void st_GateController_OpenGate(void)
{   
    /*Turns the servo motor to open the gate*/
    HAL_ServoMotorTurn(ServoMotor_90Degree);
      c2:	8a ef       	ldi	r24, 0xFA	; 250
      c4:	0e 94 1a 04 	call	0x834	; 0x834 <HAL_ServoMotorTurn>

    /** TODO: Wait for 3 seconds then move to the state that 
     * checks if the car already passed the gate using the PIR sensor.
    */
    MCAL_TIMER0_SingleIntervalDelayms(GATE_OPENED_TIME_MS, Timer0_DelaycheckCar_Callback);
      c8:	49 e5       	ldi	r20, 0x59	; 89
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	68 eb       	ldi	r22, 0xB8	; 184
      ce:	7b e0       	ldi	r23, 0x0B	; 11
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 11 06 	call	0xc22	; 0xc22 <MCAL_TIMER0_SingleIntervalDelayms>

    /*Idle until the delay is over*/
    fptr_st_GateController = st_GateController_Idle;
      d8:	80 e6       	ldi	r24, 0x60	; 96
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_GateController+0x1>
      e0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_GateController>
      e4:	08 95       	ret

000000e6 <st_GateController_CheckCarPassed>:
 * 
 */
void st_GateController_CheckCarPassed(void)
{
    /*Turns the servo motor to open the gate*/
    HAL_ServoMotorTurn(ServoMotor_0Degree);
      e6:	80 ef       	ldi	r24, 0xF0	; 240
      e8:	0e 94 1a 04 	call	0x834	; 0x834 <HAL_ServoMotorTurn>

    GC_UAI_GateClosed();
      ec:	0e 94 04 02 	call	0x408	; 0x408 <GC_UAI_GateClosed>
    fptr_st_GateController = st_GateController_Idle;
      f0:	80 e6       	ldi	r24, 0x60	; 96
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_GateController+0x1>
      f8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_GateController>
      fc:	08 95       	ret

000000fe <st_GateController_Init>:
 * 
 */
void st_GateController_Init(void)
{
    /*Initialize the gates servo motor to be on the 0 degree position*/
    HAL_ServoMotorInit();
      fe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <HAL_ServoMotorInit>
    
    /*Set the initial state to be idle until there is a request to be processed*/
    fptr_st_GateController = st_GateController_Idle;
     102:	80 e6       	ldi	r24, 0x60	; 96
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_GateController+0x1>
     10a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_GateController>
     10e:	08 95       	ret

00000110 <UAI_GC_OpenGateReuest>:
 * to request it to open the gate.
 * 
 */
void UAI_GC_OpenGateReuest(void)
{
    fptr_st_GateController = st_GateController_OpenGate;
     110:	81 e6       	ldi	r24, 0x61	; 97
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <fptr_st_GateController+0x1>
     118:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <fptr_st_GateController>
     11c:	08 95       	ret

0000011e <Timer0_SingleIntervalDelaycallback>:
* @brief		  :  This function is the callback function for the Timer0_SingleIntervalDelayms function.
======================================================================================================================
*/
static void Timer0_SingleIntervalDelaycallback(void)
{
  fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     11e:	8f e5       	ldi	r24, 0x5F	; 95
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     126:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     12a:	08 95       	ret

0000012c <st_UAI_Idle>:
/**
 * @brief this state makes the module go into idle mode until some user action is done.
 * 
 */
void st_UAI_Idle(void)
{
     12c:	08 95       	ret

0000012e <USART_Init>:

/** @defgroup Private Functions
  * @{
  */
static void USART_Init()
{
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	29 97       	sbiw	r28, 0x09	; 9
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	0f be       	out	0x3f, r0	; 63
     140:	cd bf       	out	0x3d, r28	; 61
    sUSART_config_t cfg;

    cfg.USART_CLKOperation = USART_CLKOP_NormalAsynch;
     142:	19 82       	std	Y+1, r1	; 0x01
    cfg.USART_baudRate = USART_BAUD_RATE_9600;
     144:	80 e8       	ldi	r24, 0x80	; 128
     146:	95 e2       	ldi	r25, 0x25	; 37
     148:	a0 e0       	ldi	r26, 0x00	; 0
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	8b 83       	std	Y+3, r24	; 0x03
     14e:	9c 83       	std	Y+4, r25	; 0x04
     150:	ad 83       	std	Y+5, r26	; 0x05
     152:	be 83       	std	Y+6, r27	; 0x06
    cfg.USART_Mode = USART_ModeTXRX;
     154:	88 e1       	ldi	r24, 0x18	; 24
     156:	8a 83       	std	Y+2, r24	; 0x02
    cfg.USART_wordLength = USART_8BitWord;
     158:	86 e0       	ldi	r24, 0x06	; 6
     15a:	8f 83       	std	Y+7, r24	; 0x07
    cfg.USART_parityCTRL = USART_ParityMode_Disabled;
     15c:	19 86       	std	Y+9, r1	; 0x09
    cfg.USART_stopBits = USART_1StopBit;
     15e:	18 86       	std	Y+8, r1	; 0x08

    MCAL_UART_Init(&cfg);
     160:	ce 01       	movw	r24, r28
     162:	01 96       	adiw	r24, 0x01	; 1
     164:	0e 94 8b 07 	call	0xf16	; 0xf16 <MCAL_UART_Init>

    MCAL_UART_Interrupt_EN(USART_IRQ_RXC, USART_RX_ISR_Callback);
     168:	64 ec       	ldi	r22, 0xC4	; 196
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	80 e8       	ldi	r24, 0x80	; 128
     16e:	0e 94 28 08 	call	0x1050	; 0x1050 <MCAL_UART_Interrupt_EN>

    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
     172:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <MCAL_UART_Disable>
}
     176:	29 96       	adiw	r28, 0x09	; 9
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	0f be       	out	0x3f, r0	; 63
     180:	cd bf       	out	0x3d, r28	; 61
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <USART_RX_ISR_Callback>:
static void USART_RX_ISR_Callback(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    /*Get the character the user typed*/
    MCAL_UART_Get_Data((uint16_t *)(&Glob_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
     188:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <sLOC_u8CharCounter.1904>
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	8d 55       	subi	r24, 0x5D	; 93
     192:	9f 4f       	sbci	r25, 0xFF	; 255
     194:	0e 94 03 08 	call	0x1006	; 0x1006 <MCAL_UART_Get_Data>

    /*Send the character again to show it on the terminal*/
    MCAL_UART_Send_Data((uint16_t *)(&Glob_u8DriverID[sLOC_u8CharCounter]), USART_PollingDisabled);
     198:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <sLOC_u8CharCounter.1904>
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	8d 55       	subi	r24, 0x5D	; 93
     1a2:	9f 4f       	sbci	r25, 0xFF	; 255
     1a4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <MCAL_UART_Send_Data>
        
    sLOC_u8CharCounter++;
     1a8:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <sLOC_u8CharCounter.1904>
     1ac:	ef 5f       	subi	r30, 0xFF	; 255
     1ae:	e0 93 a1 00 	sts	0x00A1, r30	; 0x8000a1 <sLOC_u8CharCounter.1904>

    if(sLOC_u8CharCounter == DRIVER_ID_SIZE)
     1b2:	e3 30       	cpi	r30, 0x03	; 3
     1b4:	71 f4       	brne	.+28     	; 0x1d2 <USART_RX_ISR_Callback+0x4a>
    {
        /*Add a NULL character at the end*/
        Glob_u8DriverID[sLOC_u8CharCounter] = '\0';
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ed 55       	subi	r30, 0x5D	; 93
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	10 82       	st	Z, r1

        sLOC_u8CharCounter = 0;
     1be:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <sLOC_u8CharCounter.1904>
 
        /*Disable the UART to stop it from serving another customer 
          until processing this customer's request*/
        MCAL_UART_Disable();
     1c2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <MCAL_UART_Disable>

        fptr_st_UserAdminInterface = st_UAI_SendIDToAdmin;
     1c6:	8c e7       	ldi	r24, 0x7C	; 124
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     1ce:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     1d2:	08 95       	ret

000001d4 <SPI_Init>:
    /*Disable the UART until the initialization is done*/
    MCAL_UART_Disable();
}

static void SPI_Init()
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	2b 97       	sbiw	r28, 0x0b	; 11
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
    SPI_Config_t LOC_sSPI_cfg;
    GPIO_Pin_Config_t LOC_sGPIO_CFG;

    LOC_sSPI_cfg.SPI_Mode       = SPI_MODE_SLAVE;
     1e8:	19 82       	std	Y+1, r1	; 0x01
    LOC_sSPI_cfg.SPI_DataOrder  = SPI_FIRST_BIT_LSB;
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	8a 83       	std	Y+2, r24	; 0x02
    LOC_sSPI_cfg.SPI_CPOL       = SPI_IDLE_HIGH;
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	8b 83       	std	Y+3, r24	; 0x03
    LOC_sSPI_cfg.SPI_CPHA       = SPI_SAMPLE_SECOND_EDGE;
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	8c 83       	std	Y+4, r24	; 0x04
    LOC_sSPI_cfg.SPI_IRQ_EN     = SPI_IRQ_ENABLE;
     1f6:	80 e8       	ldi	r24, 0x80	; 128
     1f8:	8f 83       	std	Y+7, r24	; 0x07
    LOC_sSPI_cfg.SPI_IRQHandler = SPI_ISR_Callback;
     1fa:	8a ee       	ldi	r24, 0xEA	; 234
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	99 87       	std	Y+9, r25	; 0x09
     200:	88 87       	std	Y+8, r24	; 0x08

    MCAL_SPI_Init(&LOC_sSPI_cfg);
     202:	ce 01       	movw	r24, r28
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <MCAL_SPI_Init>

    /*Configure the pin to be used to interrupt the admin ECU to request attention*/
    LOC_sGPIO_CFG.pinMode = GPIO_MODE_OUTPUT;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	8b 87       	std	Y+11, r24	; 0x0b
    LOC_sGPIO_CFG.pinNumber = ADMIN_ECU_INTERRUPT_PIN;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	8a 87       	std	Y+10, r24	; 0x0a
    MCAL_GPIO_Init(ADMIN_ECU_INTERRUPT_PORT, &LOC_sGPIO_CFG);
     212:	be 01       	movw	r22, r28
     214:	66 5f       	subi	r22, 0xF6	; 246
     216:	7f 4f       	sbci	r23, 0xFF	; 255
     218:	86 e3       	ldi	r24, 0x36	; 54
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>

}
     220:	2b 96       	adiw	r28, 0x0b	; 11
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <SPI_SendingID>:
*/
static void SPI_SendingID(void)
{
    static uint8_t sLOC_u8CharCounter = 0;

    if(sLOC_u8CharCounter == 0)
     232:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     236:	81 11       	cpse	r24, r1
     238:	06 c0       	rjmp	.+12     	; 0x246 <SPI_SendingID+0x14>
    {
        MCAL_SPI_SendData((uint8_t *)&Glob_u8GateAddress, PollingDisable);
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	8e e9       	ldi	r24, 0x9E	; 158
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 23 05 	call	0xa46	; 0xa46 <MCAL_SPI_SendData>
     244:	06 c0       	rjmp	.+12     	; 0x252 <SPI_SendingID+0x20>
    }else{
        MCAL_SPI_SendData(&Glob_u8DriverID[sLOC_u8CharCounter - 1], PollingDisable);
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	8e 55       	subi	r24, 0x5E	; 94
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	0e 94 23 05 	call	0xa46	; 0xa46 <MCAL_SPI_SendData>
    }
            
    sLOC_u8CharCounter++;
     252:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>

    if(sLOC_u8CharCounter == (DRIVER_ID_SIZE + 1))
     25c:	84 30       	cpi	r24, 0x04	; 4
     25e:	a9 f4       	brne	.+42     	; 0x28a <SPI_SendingID+0x58>
    {
        MCAL_TIMER0_Stop();
     260:	0e 94 cd 05 	call	0xb9a	; 0xb9a <MCAL_TIMER0_Stop>

        sLOC_u8CharCounter = 0;
     264:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
        
        Glob_u8ModuleCurrentState = UAI_WAITING_AUTHENTICATION_RESULT;
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Glob_u8ModuleCurrentState>
        
        /*Enable the timer to prevent getting stuck in this state forever*/
        MCAL_TIMER0_SingleIntervalDelayms(TIME_BEFORE_RESET_MS, Timer0_SingleIntervalDelaycallback);
     26e:	4f e8       	ldi	r20, 0x8F	; 143
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	68 ee       	ldi	r22, 0xE8	; 232
     274:	73 e0       	ldi	r23, 0x03	; 3
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 11 06 	call	0xc22	; 0xc22 <MCAL_TIMER0_SingleIntervalDelayms>

        fptr_st_UserAdminInterface = st_UAI_Idle;
     27e:	86 e9       	ldi	r24, 0x96	; 150
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     286:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     28a:	08 95       	ret

0000028c <st_UAI_IDAuthenticationFailed>:
 * 
 * 
 */
void st_UAI_IDAuthenticationFailed(void)
{
    LCD_Clear_Screen();
     28c:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_SECOND_LINE, 3);
     290:	63 e0       	ldi	r22, 0x03	; 3
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("INVALID ID!"));
     298:	80 e6       	ldi	r24, 0x60	; 96
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_String>

    MCAL_TIMER0_SingleIntervalDelayms(TIME_BEFORE_RESET_MS, Timer0_SingleIntervalDelaycallback);
     2a0:	4f e8       	ldi	r20, 0x8F	; 143
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	68 ee       	ldi	r22, 0xE8	; 232
     2a6:	73 e0       	ldi	r23, 0x03	; 3
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 11 06 	call	0xc22	; 0xc22 <MCAL_TIMER0_SingleIntervalDelayms>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     2b0:	86 e9       	ldi	r24, 0x96	; 150
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     2b8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     2bc:	08 95       	ret

000002be <st_UAI_ShowWelcomeMsg>:
 * @brief this state prints the welcome message to guide the user on what to do.  
 * 
 */
void st_UAI_ShowWelcomeMsg(void)
{
    Glob_u8ModuleCurrentState = UAI_IDLE; 
     2be:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Glob_u8ModuleCurrentState>

    LCD_Clear_Screen();
     2c2:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_FIRST_LINE, 4);
     2c6:	64 e0       	ldi	r22, 0x04	; 4
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Welcome!"));
     2ce:	8c e6       	ldi	r24, 0x6C	; 108
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Please enter the 3 digits ID"));
     2de:	85 e7       	ldi	r24, 0x75	; 117
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_String>

    /*Enable the UART module to take the user input*/
    MCAL_UART_Enable();
     2e6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <MCAL_UART_Enable>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     2ea:	86 e9       	ldi	r24, 0x96	; 150
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     2f2:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     2f6:	08 95       	ret

000002f8 <st_UAI_SendIDToAdmin>:
 * 
 */
void st_UAI_SendIDToAdmin(void)
{    
    
    LCD_Clear_Screen();
     2f8:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_Clear_Screen>
    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
     2fc:	64 e0       	ldi	r22, 0x04	; 4
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Processing!"));
     304:	82 e9       	ldi	r24, 0x92	; 146
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_String>

    /*Set the current state of the module*/
    Glob_u8ModuleCurrentState = UAI_SENDING_ID;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Glob_u8ModuleCurrentState>

    MCAL_TIMER0_SingleIntervalDelayms(TIME_BEFORE_RESET_MS, Timer0_SingleIntervalDelaycallback);
     312:	4f e8       	ldi	r20, 0x8F	; 143
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	68 ee       	ldi	r22, 0xE8	; 232
     318:	73 e0       	ldi	r23, 0x03	; 3
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 11 06 	call	0xc22	; 0xc22 <MCAL_TIMER0_SingleIntervalDelayms>

    /*Toggle the ADMIN_ECU_INTERRUPT_PIN to alert the admin that we need attention*/
    MCAL_GPIO_TogglePin(ADMIN_ECU_INTERRUPT_PORT, ADMIN_ECU_INTERRUPT_PIN);
     322:	63 e0       	ldi	r22, 0x03	; 3
     324:	86 e3       	ldi	r24, 0x36	; 54
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 71 04 	call	0x8e2	; 0x8e2 <MCAL_GPIO_TogglePin>

    fptr_st_UserAdminInterface = st_UAI_Idle;
     32c:	86 e9       	ldi	r24, 0x96	; 150
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     334:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     338:	08 95       	ret

0000033a <st_UAI_IDAuthenticationPassed>:
 * @brief This state sends the open gate request and informs the driver that his ID is valid.
 * 
 */
void st_UAI_IDAuthenticationPassed(void)
{
    LCD_Clear_Screen();
     33a:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_Clear_Screen>

    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("VALID ID!"));
     346:	82 e6       	ldi	r24, 0x62	; 98
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_String>

    /*Send a signal to the gate controller to open the gate*/
    UAI_GC_OpenGateReuest();
     34e:	0e 94 88 00 	call	0x110	; 0x110 <UAI_GC_OpenGateReuest>

    /** TODO: Send a signal to the alarm manager*/

    fptr_st_UserAdminInterface = st_UAI_Idle;
     352:	86 e9       	ldi	r24, 0x96	; 150
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     35a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     35e:	08 95       	ret

00000360 <SPI_GetAuthenticationResult>:
* @Func_name	:   SPI_GetAuthenticationResult
* @brief		:   This function checks the authentication process result.
======================================================================================================================
*/
void SPI_GetAuthenticationResult(void)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	1f 92       	push	r1
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
    static boolean LOC_boolDetectedGateAddress = FALSE;
    uint8_t LOC_u8RxBuffer = ENTRANCE_GATE_ECU_ADDRESS;
     36a:	87 ee       	ldi	r24, 0xE7	; 231
     36c:	89 83       	std	Y+1, r24	; 0x01

    MCAL_SPI_ReceiveData(&LOC_u8RxBuffer, PollingEnable);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	ce 01       	movw	r24, r28
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	0e 94 2b 05 	call	0xa56	; 0xa56 <MCAL_SPI_ReceiveData>

    /*If we already received the gate ID from the last transmission 
      then check the authentication result*/
    if(LOC_boolDetectedGateAddress)
     378:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <LOC_boolDetectedGateAddress.1912>
     37c:	88 23       	and	r24, r24
     37e:	d9 f0       	breq	.+54     	; 0x3b6 <SPI_GetAuthenticationResult+0x56>
    { 
        /*Stop the timer as we are already done from this state*/
        MCAL_TIMER0_Stop();
     380:	0e 94 cd 05 	call	0xb9a	; 0xb9a <MCAL_TIMER0_Stop>

        LOC_boolDetectedGateAddress = FALSE;
     384:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <LOC_boolDetectedGateAddress.1912>

        /*check if the data we got matches the successful authentication code*/
        if(LOC_u8RxBuffer == AUTHENTICATION_RESULT_PASS)
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	39 f4       	brne	.+14     	; 0x39c <SPI_GetAuthenticationResult+0x3c>
        {
            fptr_st_UserAdminInterface = st_UAI_IDAuthenticationPassed;
     38e:	8d e9       	ldi	r24, 0x9D	; 157
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     396:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <SPI_GetAuthenticationResult+0x48>
        }else{
            fptr_st_UserAdminInterface = st_UAI_IDAuthenticationFailed;
     39c:	86 e4       	ldi	r24, 0x46	; 70
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     3a4:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
        }

        LOC_u8RxBuffer = 0x00u;
     3a8:	19 82       	std	Y+1, r1	; 0x01
        
        /*Write zero in the transmit buffer to avoid confusion in the next time*/
        MCAL_SPI_SendData(&LOC_u8RxBuffer, PollingDisable);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	0e 94 23 05 	call	0xa46	; 0xa46 <MCAL_SPI_SendData>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <SPI_GetAuthenticationResult+0x6c>

    }else{

        /*check if the received data matches the the gate address*/
        if(LOC_u8RxBuffer == Glob_u8GateAddress)
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	87 3e       	cpi	r24, 0xE7	; 231
     3ba:	41 f4       	brne	.+16     	; 0x3cc <SPI_GetAuthenticationResult+0x6c>
        {
            MCAL_SPI_SendData(&LOC_u8RxBuffer , PollingEnable);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 23 05 	call	0xa46	; 0xa46 <MCAL_SPI_SendData>
            LOC_boolDetectedGateAddress = TRUE;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <LOC_boolDetectedGateAddress.1912>
        }else{

        }
    }
}
     3cc:	0f 90       	pop	r0
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <SPI_ISR_Callback>:
* @note			:   none.
======================================================================================================================
*/
static void SPI_ISR_Callback(void)
{
    switch (Glob_u8ModuleCurrentState)
     3d4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Glob_u8ModuleCurrentState>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	19 f0       	breq	.+6      	; 0x3e2 <SPI_ISR_Callback+0xe>
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	21 f0       	breq	.+8      	; 0x3e8 <SPI_ISR_Callback+0x14>
     3e0:	08 95       	ret
        /* If we didn't send a request just ignore this interrupt as it's probably
           done to communicate with the other gate ECU. (Can be changed later if needed)*/
        break;

    case UAI_SENDING_ID:
        SPI_SendingID();
     3e2:	0e 94 19 01 	call	0x232	; 0x232 <SPI_SendingID>
        break;
     3e6:	08 95       	ret

    case UAI_WAITING_AUTHENTICATION_RESULT:
        SPI_GetAuthenticationResult();
     3e8:	0e 94 b0 01 	call	0x360	; 0x360 <SPI_GetAuthenticationResult>
     3ec:	08 95       	ret

000003ee <st_UAI_Init>:
 * 
 */
void st_UAI_Init(void)
{
    /*Initialize the USART module to get the input from the user*/
    USART_Init();
     3ee:	0e 94 97 00 	call	0x12e	; 0x12e <USART_Init>

    /*Initialize the SPI module to communicate with the admin ECU*/
    SPI_Init();
     3f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_Init>

    /*Initialize the LCD module to print messages to the driver*/
    LCD_Init();
     3f6:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_Init>

    /*Set the initial state*/
    fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     3fa:	8f e5       	ldi	r24, 0x5F	; 95
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     402:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     406:	08 95       	ret

00000408 <GC_UAI_GateClosed>:
 * 
 */
void GC_UAI_GateClosed(void)
{
  /*Return to the original state to serve the next customer*/
  fptr_st_UserAdminInterface = st_UAI_ShowWelcomeMsg;
     408:	8f e5       	ldi	r24, 0x5F	; 95
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <fptr_st_UserAdminInterface+0x1>
     410:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <fptr_st_UserAdminInterface>
     414:	08 95       	ret

00000416 <_delay_ms>:
	
	config.pinNumber = LCD_D7;
	config.pinMode = GPIO_MODE_OUTPUT;
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
#endif
}
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	00 d0       	rcall	.+0      	; 0x41c <_delay_ms+0x6>
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	19 82       	std	Y+1, r1	; 0x01
     422:	0b c0       	rjmp	.+22     	; 0x43a <_delay_ms+0x24>
     424:	1a 82       	std	Y+2, r1	; 0x02
     426:	03 c0       	rjmp	.+6      	; 0x42e <_delay_ms+0x18>
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	9f 5f       	subi	r25, 0xFF	; 255
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	94 36       	cpi	r25, 0x64	; 100
     432:	d0 f3       	brcs	.-12     	; 0x428 <_delay_ms+0x12>
     434:	99 81       	ldd	r25, Y+1	; 0x01
     436:	9f 5f       	subi	r25, 0xFF	; 255
     438:	99 83       	std	Y+1, r25	; 0x01
     43a:	99 81       	ldd	r25, Y+1	; 0x01
     43c:	98 17       	cp	r25, r24
     43e:	90 f3       	brcs	.-28     	; 0x424 <_delay_ms+0xe>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <LCD_Enable_Pulse>:
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	89 e3       	ldi	r24, 0x39	; 57
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     456:	82 e3       	ldi	r24, 0x32	; 50
     458:	0e 94 0b 02 	call	0x416	; 0x416 <_delay_ms>
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	89 e3       	ldi	r24, 0x39	; 57
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     468:	08 95       	ret

0000046a <LCD_Send_Command>:
     46a:	cf 93       	push	r28
     46c:	c8 2f       	mov	r28, r24
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	89 e3       	ldi	r24, 0x39	; 57
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	89 e3       	ldi	r24, 0x39	; 57
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     486:	4c 2f       	mov	r20, r28
     488:	40 71       	andi	r20, 0x10	; 16
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	55 95       	asr	r21
     48e:	47 95       	ror	r20
     490:	55 95       	asr	r21
     492:	47 95       	ror	r20
     494:	55 95       	asr	r21
     496:	47 95       	ror	r20
     498:	55 95       	asr	r21
     49a:	47 95       	ror	r20
     49c:	62 e0       	ldi	r22, 0x02	; 2
     49e:	89 e3       	ldi	r24, 0x39	; 57
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     4a6:	4c 2f       	mov	r20, r28
     4a8:	40 72       	andi	r20, 0x20	; 32
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	55 95       	asr	r21
     4ae:	47 95       	ror	r20
     4b0:	55 95       	asr	r21
     4b2:	47 95       	ror	r20
     4b4:	55 95       	asr	r21
     4b6:	47 95       	ror	r20
     4b8:	55 95       	asr	r21
     4ba:	47 95       	ror	r20
     4bc:	55 95       	asr	r21
     4be:	47 95       	ror	r20
     4c0:	63 e0       	ldi	r22, 0x03	; 3
     4c2:	89 e3       	ldi	r24, 0x39	; 57
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     4ca:	4c 2f       	mov	r20, r28
     4cc:	40 74       	andi	r20, 0x40	; 64
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	04 2e       	mov	r0, r20
     4d2:	45 2f       	mov	r20, r21
     4d4:	00 0c       	add	r0, r0
     4d6:	44 1f       	adc	r20, r20
     4d8:	55 0b       	sbc	r21, r21
     4da:	00 0c       	add	r0, r0
     4dc:	44 1f       	adc	r20, r20
     4de:	55 1f       	adc	r21, r21
     4e0:	64 e0       	ldi	r22, 0x04	; 4
     4e2:	89 e3       	ldi	r24, 0x39	; 57
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     4ea:	4c 2f       	mov	r20, r28
     4ec:	44 1f       	adc	r20, r20
     4ee:	44 27       	eor	r20, r20
     4f0:	44 1f       	adc	r20, r20
     4f2:	65 e0       	ldi	r22, 0x05	; 5
     4f4:	89 e3       	ldi	r24, 0x39	; 57
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     4fc:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_Enable_Pulse>
     500:	4c 2f       	mov	r20, r28
     502:	41 70       	andi	r20, 0x01	; 1
     504:	62 e0       	ldi	r22, 0x02	; 2
     506:	89 e3       	ldi	r24, 0x39	; 57
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     50e:	4c 2f       	mov	r20, r28
     510:	42 70       	andi	r20, 0x02	; 2
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	55 95       	asr	r21
     516:	47 95       	ror	r20
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	89 e3       	ldi	r24, 0x39	; 57
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     522:	4c 2f       	mov	r20, r28
     524:	44 70       	andi	r20, 0x04	; 4
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	55 95       	asr	r21
     52a:	47 95       	ror	r20
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	89 e3       	ldi	r24, 0x39	; 57
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     53a:	c8 70       	andi	r28, 0x08	; 8
     53c:	4c 2f       	mov	r20, r28
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	55 95       	asr	r21
     542:	47 95       	ror	r20
     544:	55 95       	asr	r21
     546:	47 95       	ror	r20
     548:	55 95       	asr	r21
     54a:	47 95       	ror	r20
     54c:	65 e0       	ldi	r22, 0x05	; 5
     54e:	89 e3       	ldi	r24, 0x39	; 57
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     556:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_Enable_Pulse>
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <LCD_Init>:
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	84 e1       	ldi	r24, 0x14	; 20
     566:	0e 94 0b 02 	call	0x416	; 0x416 <_delay_ms>
     56a:	c3 ee       	ldi	r28, 0xE3	; 227
     56c:	d0 e0       	ldi	r29, 0x00	; 0
     56e:	18 82       	st	Y, r1
     570:	11 e0       	ldi	r17, 0x01	; 1
     572:	19 83       	std	Y+1, r17	; 0x01
     574:	be 01       	movw	r22, r28
     576:	89 e3       	ldi	r24, 0x39	; 57
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     57e:	18 83       	st	Y, r17
     580:	19 83       	std	Y+1, r17	; 0x01
     582:	be 01       	movw	r22, r28
     584:	89 e3       	ldi	r24, 0x39	; 57
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	89 e3       	ldi	r24, 0x39	; 57
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	89 e3       	ldi	r24, 0x39	; 57
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     5a4:	8f e0       	ldi	r24, 0x0F	; 15
     5a6:	0e 94 0b 02 	call	0x416	; 0x416 <_delay_ms>
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	88 83       	st	Y, r24
     5ae:	19 83       	std	Y+1, r17	; 0x01
     5b0:	be 01       	movw	r22, r28
     5b2:	89 e3       	ldi	r24, 0x39	; 57
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	88 83       	st	Y, r24
     5be:	19 83       	std	Y+1, r17	; 0x01
     5c0:	be 01       	movw	r22, r28
     5c2:	89 e3       	ldi	r24, 0x39	; 57
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     5ca:	84 e0       	ldi	r24, 0x04	; 4
     5cc:	88 83       	st	Y, r24
     5ce:	19 83       	std	Y+1, r17	; 0x01
     5d0:	be 01       	movw	r22, r28
     5d2:	89 e3       	ldi	r24, 0x39	; 57
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     5da:	85 e0       	ldi	r24, 0x05	; 5
     5dc:	88 83       	st	Y, r24
     5de:	19 83       	std	Y+1, r17	; 0x01
     5e0:	be 01       	movw	r22, r28
     5e2:	89 e3       	ldi	r24, 0x39	; 57
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	0e 94 0b 02 	call	0x416	; 0x416 <_delay_ms>
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     5f6:	88 e2       	ldi	r24, 0x28	; 40
     5f8:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     602:	80 e8       	ldi	r24, 0x80	; 128
     604:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     608:	8f e0       	ldi	r24, 0x0F	; 15
     60a:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	08 95       	ret

00000616 <LCD_Cursor_XY>:
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	60 31       	cpi	r22, 0x10	; 16
     61c:	18 f5       	brcc	.+70     	; 0x664 <LCD_Cursor_XY+0x4e>
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	08 f5       	brcc	.+66     	; 0x664 <LCD_Cursor_XY+0x4e>
     622:	d6 2f       	mov	r29, r22
     624:	c8 2f       	mov	r28, r24
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	59 f0       	breq	.+22     	; 0x640 <LCD_Cursor_XY+0x2a>
     62a:	28 f0       	brcs	.+10     	; 0x636 <LCD_Cursor_XY+0x20>
     62c:	82 30       	cpi	r24, 0x02	; 2
     62e:	69 f0       	breq	.+26     	; 0x64a <LCD_Cursor_XY+0x34>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	81 f0       	breq	.+32     	; 0x654 <LCD_Cursor_XY+0x3e>
     634:	13 c0       	rjmp	.+38     	; 0x65c <LCD_Cursor_XY+0x46>
     636:	80 e8       	ldi	r24, 0x80	; 128
     638:	86 0f       	add	r24, r22
     63a:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     63e:	0e c0       	rjmp	.+28     	; 0x65c <LCD_Cursor_XY+0x46>
     640:	80 ec       	ldi	r24, 0xC0	; 192
     642:	86 0f       	add	r24, r22
     644:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     648:	09 c0       	rjmp	.+18     	; 0x65c <LCD_Cursor_XY+0x46>
     64a:	80 e9       	ldi	r24, 0x90	; 144
     64c:	86 0f       	add	r24, r22
     64e:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     652:	04 c0       	rjmp	.+8      	; 0x65c <LCD_Cursor_XY+0x46>
     654:	80 ed       	ldi	r24, 0xD0	; 208
     656:	86 0f       	add	r24, r22
     658:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
     65c:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <lineCounter>
     660:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <charCounter>
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <LCD_Clear_Screen>:
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_CLEAR_SCREEN);
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
	charCounter = 0;
     670:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <charCounter>
	lineCounter = 0;
     674:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <lineCounter>
     678:	08 95       	ret

0000067a <Check_End_Of_Line>:
============================================================================================================
 */
void Check_End_Of_Line()
{
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
     67a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <charCounter>
     67e:	90 31       	cpi	r25, 0x10	; 16
     680:	68 f0       	brcs	.+26     	; 0x69c <Check_End_Of_Line+0x22>
     682:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <lineCounter>
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	48 f4       	brcc	.+18     	; 0x69c <Check_End_Of_Line+0x22>
	{
		charCounter = 0;
     68a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <charCounter>
		lineCounter++;
     68e:	8f 5f       	subi	r24, 0xFF	; 255
     690:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <lineCounter>
		LCD_Cursor_XY(lineCounter, 0);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_Cursor_XY>
     69a:	08 95       	ret
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
     69c:	90 31       	cpi	r25, 0x10	; 16
     69e:	68 f0       	brcs	.+26     	; 0x6ba <Check_End_Of_Line+0x40>
     6a0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <lineCounter>
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	49 f4       	brne	.+18     	; 0x6ba <Check_End_Of_Line+0x40>
	{
		LCD_Clear_Screen();
     6a8:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
     6ac:	80 e8       	ldi	r24, 0x80	; 128
     6ae:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Send_Command>
		charCounter = 0;
     6b2:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <charCounter>
		lineCounter = 0;
     6b6:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <lineCounter>
     6ba:	08 95       	ret

000006bc <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8_t data)
{
     6bc:	cf 93       	push	r28
     6be:	c8 2f       	mov	r28, r24
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
     6c0:	0e 94 3d 03 	call	0x67a	; 0x67a <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	89 e3       	ldi	r24, 0x39	; 57
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	89 e3       	ldi	r24, 0x39	; 57
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
     6dc:	4c 2f       	mov	r20, r28
     6de:	40 71       	andi	r20, 0x10	; 16
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	55 95       	asr	r21
     6e4:	47 95       	ror	r20
     6e6:	55 95       	asr	r21
     6e8:	47 95       	ror	r20
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	55 95       	asr	r21
     6f0:	47 95       	ror	r20
     6f2:	62 e0       	ldi	r22, 0x02	; 2
     6f4:	89 e3       	ldi	r24, 0x39	; 57
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
     6fc:	4c 2f       	mov	r20, r28
     6fe:	40 72       	andi	r20, 0x20	; 32
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	55 95       	asr	r21
     704:	47 95       	ror	r20
     706:	55 95       	asr	r21
     708:	47 95       	ror	r20
     70a:	55 95       	asr	r21
     70c:	47 95       	ror	r20
     70e:	55 95       	asr	r21
     710:	47 95       	ror	r20
     712:	55 95       	asr	r21
     714:	47 95       	ror	r20
     716:	63 e0       	ldi	r22, 0x03	; 3
     718:	89 e3       	ldi	r24, 0x39	; 57
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
     720:	4c 2f       	mov	r20, r28
     722:	40 74       	andi	r20, 0x40	; 64
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	04 2e       	mov	r0, r20
     728:	45 2f       	mov	r20, r21
     72a:	00 0c       	add	r0, r0
     72c:	44 1f       	adc	r20, r20
     72e:	55 0b       	sbc	r21, r21
     730:	00 0c       	add	r0, r0
     732:	44 1f       	adc	r20, r20
     734:	55 1f       	adc	r21, r21
     736:	64 e0       	ldi	r22, 0x04	; 4
     738:	89 e3       	ldi	r24, 0x39	; 57
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
     740:	4c 2f       	mov	r20, r28
     742:	44 1f       	adc	r20, r20
     744:	44 27       	eor	r20, r20
     746:	44 1f       	adc	r20, r20
     748:	65 e0       	ldi	r22, 0x05	; 5
     74a:	89 e3       	ldi	r24, 0x39	; 57
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
     752:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
     756:	4c 2f       	mov	r20, r28
     758:	41 70       	andi	r20, 0x01	; 1
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	89 e3       	ldi	r24, 0x39	; 57
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
     764:	4c 2f       	mov	r20, r28
     766:	42 70       	andi	r20, 0x02	; 2
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	55 95       	asr	r21
     76c:	47 95       	ror	r20
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	89 e3       	ldi	r24, 0x39	; 57
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
     778:	4c 2f       	mov	r20, r28
     77a:	44 70       	andi	r20, 0x04	; 4
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	55 95       	asr	r21
     780:	47 95       	ror	r20
     782:	55 95       	asr	r21
     784:	47 95       	ror	r20
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	89 e3       	ldi	r24, 0x39	; 57
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
     790:	c8 70       	andi	r28, 0x08	; 8
     792:	4c 2f       	mov	r20, r28
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	55 95       	asr	r21
     798:	47 95       	ror	r20
     79a:	55 95       	asr	r21
     79c:	47 95       	ror	r20
     79e:	55 95       	asr	r21
     7a0:	47 95       	ror	r20
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	89 e3       	ldi	r24, 0x39	; 57
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
     7ac:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_Enable_Pulse>
#endif
	charCounter++;
     7b0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <charCounter>
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <charCounter>
}
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
	while(*string)
     7c4:	03 c0       	rjmp	.+6      	; 0x7cc <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
     7c6:	21 96       	adiw	r28, 0x01	; 1
     7c8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCD_Send_Char>
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
	while(*string)
     7cc:	88 81       	ld	r24, Y
     7ce:	81 11       	cpse	r24, r1
     7d0:	fa cf       	rjmp	.-12     	; 0x7c6 <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <HAL_ServoMotorInit>:
 * @brief This function does the required initialization to use the servo motor.
 * 
 * @return eStatus_t: E_OK if the initialization was successful, E_NOK otherwise.
 */
eStatus_t HAL_ServoMotorInit(void)
{
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	27 97       	sbiw	r28, 0x07	; 7
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
    eStatus_t LOC_sStatus = E_OK;

    sTIMER2_Config_t timer2_Config;
    GPIO_Pin_Config_t GPIO_cfg;

    GPIO_cfg.pinNumber = GPIO_PIN7;
     7ee:	17 e0       	ldi	r17, 0x07	; 7
     7f0:	1e 83       	std	Y+6, r17	; 0x06
    GPIO_cfg.pinMode = GPIO_MODE_OUTPUT;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	8f 83       	std	Y+7, r24	; 0x07
    MCAL_GPIO_Init(GPIOD, &GPIO_cfg);
     7f6:	be 01       	movw	r22, r28
     7f8:	6a 5f       	subi	r22, 0xFA	; 250
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	80 e3       	ldi	r24, 0x30	; 48
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>

    timer2_Config.Timer2_CLK_SRC = Timer2_Prescale_1024;
     804:	19 83       	std	Y+1, r17	; 0x01
    timer2_Config.Timer2_Mode = Timer2_FAST_PWM_Mode;
     806:	88 e4       	ldi	r24, 0x48	; 72
     808:	8a 83       	std	Y+2, r24	; 0x02
    timer2_Config.Timer2_COM = Timer2_COM_Set;
     80a:	80 e3       	ldi	r24, 0x30	; 48
     80c:	8b 83       	std	Y+3, r24	; 0x03
    timer2_Config.Timer2_OCIE = Timer2_TOCI_Disable;
     80e:	1d 82       	std	Y+5, r1	; 0x05
    timer2_Config.Timer2_OIE = Timer2_TOI_Disable;
     810:	1c 82       	std	Y+4, r1	; 0x04

    MCAL_TIMER2_SetCompare(ServoMotor_0Degree);
     812:	80 ef       	ldi	r24, 0xF0	; 240
     814:	0e 94 27 07 	call	0xe4e	; 0xe4e <MCAL_TIMER2_SetCompare>

    LOC_sStatus = MCAL_TIMER2_Init(& timer2_Config);
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 b2 06 	call	0xd64	; 0xd64 <MCAL_TIMER2_Init>


    return LOC_sStatus;
}
     820:	27 96       	adiw	r28, 0x07	; 7
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	08 95       	ret

00000834 <HAL_ServoMotorTurn>:
 */
eStatus_t HAL_ServoMotorTurn(eServoMotorDegree_t copy_eDegree)
{
    eStatus_t LOC_sStatus = E_OK;
    
    MCAL_TIMER2_SetCompare(copy_eDegree);
     834:	0e 94 27 07 	call	0xe4e	; 0xe4e <MCAL_TIMER2_SetCompare>

    return LOC_sStatus;
}
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 95       	ret

0000083c <MCAL_GPIO_Init>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePort(volatile GPIO_typedef * GPIOx, uint8_t value)
{
    GPIOx->PORT = (uint8_t)value;
     83c:	dc 01       	movw	r26, r24
     83e:	fb 01       	movw	r30, r22
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	79 f4       	brne	.+30     	; 0x864 <__stack+0x5>
     846:	11 96       	adiw	r26, 0x01	; 1
     848:	2c 91       	ld	r18, X
     84a:	11 97       	sbiw	r26, 0x01	; 1
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	00 80       	ld	r0, Z
     852:	02 c0       	rjmp	.+4      	; 0x858 <MCAL_GPIO_Init+0x1c>
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	0a 94       	dec	r0
     85a:	e2 f7       	brpl	.-8      	; 0x854 <MCAL_GPIO_Init+0x18>
     85c:	82 2b       	or	r24, r18
     85e:	11 96       	adiw	r26, 0x01	; 1
     860:	8c 93       	st	X, r24
     862:	08 95       	ret
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	8c 91       	ld	r24, X
     868:	11 97       	sbiw	r26, 0x01	; 1
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	00 80       	ld	r0, Z
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	22 0f       	add	r18, r18
     874:	33 1f       	adc	r19, r19
     876:	0a 94       	dec	r0
     878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
     87a:	20 95       	com	r18
     87c:	28 23       	and	r18, r24
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	2c 93       	st	X, r18
     882:	11 97       	sbiw	r26, 0x01	; 1
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	89 f4       	brne	.+34     	; 0x8ac <__stack+0x4d>
     88a:	80 b7       	in	r24, 0x30	; 48
     88c:	8e 7f       	andi	r24, 0xFE	; 254
     88e:	80 bf       	out	0x30, r24	; 48
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	2c 91       	ld	r18, X
     894:	12 97       	sbiw	r26, 0x02	; 2
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	00 80       	ld	r0, Z
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	0a 94       	dec	r0
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
     8a6:	82 2b       	or	r24, r18
     8a8:	12 96       	adiw	r26, 0x02	; 2
     8aa:	8c 93       	st	X, r24
     8ac:	08 95       	ret

000008ae <MCAL_GPIO_WritePin>:
     8ae:	fc 01       	movw	r30, r24
     8b0:	41 30       	cpi	r20, 0x01	; 1
     8b2:	59 f4       	brne	.+22     	; 0x8ca <MCAL_GPIO_WritePin+0x1c>
     8b4:	22 81       	ldd	r18, Z+2	; 0x02
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <MCAL_GPIO_WritePin+0x12>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	6a 95       	dec	r22
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <MCAL_GPIO_WritePin+0xe>
     8c4:	82 2b       	or	r24, r18
     8c6:	82 83       	std	Z+2, r24	; 0x02
     8c8:	08 95       	ret
     8ca:	92 81       	ldd	r25, Z+2	; 0x02
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <MCAL_GPIO_WritePin+0x28>
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	6a 95       	dec	r22
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <MCAL_GPIO_WritePin+0x24>
     8da:	20 95       	com	r18
     8dc:	29 23       	and	r18, r25
     8de:	22 83       	std	Z+2, r18	; 0x02
     8e0:	08 95       	ret

000008e2 <MCAL_GPIO_TogglePin>:
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_TogglePin(volatile GPIO_typedef * GPIOx, uint8_t pinNumber)
{
    TOGGLE_BIT(GPIOx->PORT,  pinNumber);
     8e2:	fc 01       	movw	r30, r24
     8e4:	42 81       	ldd	r20, Z+2	; 0x02
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <MCAL_GPIO_TogglePin+0xe>
     8ec:	22 0f       	add	r18, r18
     8ee:	33 1f       	adc	r19, r19
     8f0:	6a 95       	dec	r22
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <MCAL_GPIO_TogglePin+0xa>
     8f4:	24 27       	eor	r18, r20
     8f6:	22 83       	std	Z+2, r18	; 0x02
     8f8:	08 95       	ret

000008fa <MCAL_SPI_GPIO_Set_Pins>:
* @brief		:   Disable the SPI peripheral.
======================================================================================================================
*/
void MCAL_SPI_Disable()
{
    SPI->SPCR &= SPCR_SPE_RESET;
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	00 d0       	rcall	.+0      	; 0x904 <MCAL_SPI_GPIO_Set_Pins+0xa>
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	80 31       	cpi	r24, 0x10	; 16
     90a:	c9 f5       	brne	.+114    	; 0x97e <MCAL_SPI_GPIO_Set_Pins+0x84>
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	11 e0       	ldi	r17, 0x01	; 1
     912:	1a 83       	std	Y+2, r17	; 0x02
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	86 e3       	ldi	r24, 0x36	; 54
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     922:	07 e0       	ldi	r16, 0x07	; 7
     924:	09 83       	std	Y+1, r16	; 0x01
     926:	1a 83       	std	Y+2, r17	; 0x02
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	86 e3       	ldi	r24, 0x36	; 54
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	1a 83       	std	Y+2, r17	; 0x02
     93c:	be 01       	movw	r22, r28
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	86 e3       	ldi	r24, 0x36	; 54
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     94a:	09 83       	std	Y+1, r16	; 0x01
     94c:	1a 83       	std	Y+2, r17	; 0x02
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	86 e3       	ldi	r24, 0x36	; 54
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     95c:	86 e0       	ldi	r24, 0x06	; 6
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	1a 82       	std	Y+2, r1	; 0x02
     962:	be 01       	movw	r22, r28
     964:	6f 5f       	subi	r22, 0xFF	; 255
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	86 e3       	ldi	r24, 0x36	; 54
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     970:	41 e0       	ldi	r20, 0x01	; 1
     972:	64 e0       	ldi	r22, 0x04	; 4
     974:	86 e3       	ldi	r24, 0x36	; 54
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 57 04 	call	0x8ae	; 0x8ae <MCAL_GPIO_WritePin>
     97c:	32 c0       	rjmp	.+100    	; 0x9e2 <MCAL_SPI_GPIO_Set_Pins+0xe8>
     97e:	85 e0       	ldi	r24, 0x05	; 5
     980:	89 83       	std	Y+1, r24	; 0x01
     982:	11 e0       	ldi	r17, 0x01	; 1
     984:	1a 83       	std	Y+2, r17	; 0x02
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	86 e3       	ldi	r24, 0x36	; 54
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     994:	07 e0       	ldi	r16, 0x07	; 7
     996:	09 83       	std	Y+1, r16	; 0x01
     998:	1a 82       	std	Y+2, r1	; 0x02
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	86 e3       	ldi	r24, 0x36	; 54
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	1a 82       	std	Y+2, r1	; 0x02
     9ae:	be 01       	movw	r22, r28
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	86 e3       	ldi	r24, 0x36	; 54
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     9bc:	09 83       	std	Y+1, r16	; 0x01
     9be:	1a 82       	std	Y+2, r1	; 0x02
     9c0:	be 01       	movw	r22, r28
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	86 e3       	ldi	r24, 0x36	; 54
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	1a 83       	std	Y+2, r17	; 0x02
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	86 e3       	ldi	r24, 0x36	; 54
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <MCAL_SPI_Init>:
     9f0:	fc 01       	movw	r30, r24
     9f2:	1d b8       	out	0x0d, r1	; 13
     9f4:	9d b1       	in	r25, 0x0d	; 13
     9f6:	60 81       	ld	r22, Z
     9f8:	81 81       	ldd	r24, Z+1	; 0x01
     9fa:	54 81       	ldd	r21, Z+4	; 0x04
     9fc:	42 81       	ldd	r20, Z+2	; 0x02
     9fe:	33 81       	ldd	r19, Z+3	; 0x03
     a00:	26 81       	ldd	r18, Z+6	; 0x06
     a02:	86 2b       	or	r24, r22
     a04:	85 2b       	or	r24, r21
     a06:	84 2b       	or	r24, r20
     a08:	83 2b       	or	r24, r19
     a0a:	82 2b       	or	r24, r18
     a0c:	89 2b       	or	r24, r25
     a0e:	8d b9       	out	0x0d, r24	; 13
     a10:	8e b1       	in	r24, 0x0e	; 14
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	25 81       	ldd	r18, Z+5	; 0x05
     a18:	82 2b       	or	r24, r18
     a1a:	9e b1       	in	r25, 0x0e	; 14
     a1c:	89 2b       	or	r24, r25
     a1e:	8e b9       	out	0x0e, r24	; 14
     a20:	86 81       	ldd	r24, Z+6	; 0x06
     a22:	80 38       	cpi	r24, 0x80	; 128
     a24:	49 f4       	brne	.+18     	; 0xa38 <MCAL_SPI_Init+0x48>
     a26:	8f b7       	in	r24, 0x3f	; 63
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	8f bf       	out	0x3f, r24	; 63
     a2c:	87 81       	ldd	r24, Z+7	; 0x07
     a2e:	90 85       	ldd	r25, Z+8	; 0x08
     a30:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <p_IRQ_callback_SPI+0x1>
     a34:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <p_IRQ_callback_SPI>
     a38:	80 81       	ld	r24, Z
     a3a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <MCAL_SPI_GPIO_Set_Pins>
     a3e:	8d b1       	in	r24, 0x0d	; 13
     a40:	80 64       	ori	r24, 0x40	; 64
     a42:	8d b9       	out	0x0d, r24	; 13
     a44:	08 95       	ret

00000a46 <MCAL_SPI_SendData>:
     a46:	fc 01       	movw	r30, r24
     a48:	80 81       	ld	r24, Z
     a4a:	8f b9       	out	0x0f, r24	; 15
     a4c:	61 11       	cpse	r22, r1
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <MCAL_SPI_SendData+0xe>
     a50:	77 9b       	sbis	0x0e, 7	; 14
     a52:	fe cf       	rjmp	.-4      	; 0xa50 <MCAL_SPI_SendData+0xa>
     a54:	08 95       	ret

00000a56 <MCAL_SPI_ReceiveData>:
     a56:	61 11       	cpse	r22, r1
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <MCAL_SPI_ReceiveData+0x8>
     a5a:	77 9b       	sbis	0x0e, 7	; 14
     a5c:	fe cf       	rjmp	.-4      	; 0xa5a <MCAL_SPI_ReceiveData+0x4>
     a5e:	2f b1       	in	r18, 0x0f	; 15
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
     a64:	08 95       	ret

00000a66 <__vector_12>:
*               SPI ISR functions
*===============================================
*/

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void){
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	2f 93       	push	r18
     a72:	3f 93       	push	r19
     a74:	4f 93       	push	r20
     a76:	5f 93       	push	r21
     a78:	6f 93       	push	r22
     a7a:	7f 93       	push	r23
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
     a80:	af 93       	push	r26
     a82:	bf 93       	push	r27
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31

  	p_IRQ_callback_SPI();
     a88:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <p_IRQ_callback_SPI>
     a8c:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <p_IRQ_callback_SPI+0x1>
     a90:	09 95       	icall
}
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <MCAL_TIMER0_Init>:
* @param [in]	:   callback: the overflow interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER0_CALLBACK_Overflow_INTERRUPT(Ptr_Func callback)
{
    overflowCallback = callback;
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	00 d0       	rcall	.+0      	; 0xabe <MCAL_TIMER0_Init+0xa>
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	fc 01       	movw	r30, r24
     ac4:	89 2b       	or	r24, r25
     ac6:	09 f4       	brne	.+2      	; 0xaca <MCAL_TIMER0_Init+0x16>
     ac8:	54 c0       	rjmp	.+168    	; 0xb72 <MCAL_TIMER0_Init+0xbe>
     aca:	80 81       	ld	r24, Z
     acc:	88 30       	cpi	r24, 0x08	; 8
     ace:	08 f0       	brcs	.+2      	; 0xad2 <MCAL_TIMER0_Init+0x1e>
     ad0:	52 c0       	rjmp	.+164    	; 0xb76 <MCAL_TIMER0_Init+0xc2>
     ad2:	81 81       	ldd	r24, Z+1	; 0x01
     ad4:	88 23       	and	r24, r24
     ad6:	39 f0       	breq	.+14     	; 0xae6 <MCAL_TIMER0_Init+0x32>
     ad8:	88 30       	cpi	r24, 0x08	; 8
     ada:	29 f0       	breq	.+10     	; 0xae6 <MCAL_TIMER0_Init+0x32>
     adc:	80 34       	cpi	r24, 0x40	; 64
     ade:	19 f0       	breq	.+6      	; 0xae6 <MCAL_TIMER0_Init+0x32>
     ae0:	88 34       	cpi	r24, 0x48	; 72
     ae2:	09 f0       	breq	.+2      	; 0xae6 <MCAL_TIMER0_Init+0x32>
     ae4:	4a c0       	rjmp	.+148    	; 0xb7a <MCAL_TIMER0_Init+0xc6>
     ae6:	82 81       	ldd	r24, Z+2	; 0x02
     ae8:	88 23       	and	r24, r24
     aea:	39 f0       	breq	.+14     	; 0xafa <MCAL_TIMER0_Init+0x46>
     aec:	80 31       	cpi	r24, 0x10	; 16
     aee:	29 f0       	breq	.+10     	; 0xafa <MCAL_TIMER0_Init+0x46>
     af0:	80 32       	cpi	r24, 0x20	; 32
     af2:	19 f0       	breq	.+6      	; 0xafa <MCAL_TIMER0_Init+0x46>
     af4:	80 33       	cpi	r24, 0x30	; 48
     af6:	09 f0       	breq	.+2      	; 0xafa <MCAL_TIMER0_Init+0x46>
     af8:	42 c0       	rjmp	.+132    	; 0xb7e <MCAL_TIMER0_Init+0xca>
     afa:	83 81       	ldd	r24, Z+3	; 0x03
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	08 f0       	brcs	.+2      	; 0xb02 <MCAL_TIMER0_Init+0x4e>
     b00:	40 c0       	rjmp	.+128    	; 0xb82 <MCAL_TIMER0_Init+0xce>
     b02:	84 81       	ldd	r24, Z+4	; 0x04
     b04:	88 23       	and	r24, r24
     b06:	11 f0       	breq	.+4      	; 0xb0c <MCAL_TIMER0_Init+0x58>
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	e9 f5       	brne	.+122    	; 0xb86 <MCAL_TIMER0_Init+0xd2>
     b0c:	8f 01       	movw	r16, r30
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	ae eb       	ldi	r26, 0xBE	; 190
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	01 90       	ld	r0, Z+
     b16:	0d 92       	st	X+, r0
     b18:	8a 95       	dec	r24
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <MCAL_TIMER0_Init+0x60>
     b1c:	13 be       	out	0x33, r1	; 51
     b1e:	f8 01       	movw	r30, r16
     b20:	20 81       	ld	r18, Z
     b22:	81 81       	ldd	r24, Z+1	; 0x01
     b24:	92 81       	ldd	r25, Z+2	; 0x02
     b26:	82 2b       	or	r24, r18
     b28:	89 2b       	or	r24, r25
     b2a:	83 bf       	out	0x33, r24	; 51
     b2c:	89 b7       	in	r24, 0x39	; 57
     b2e:	8c 7f       	andi	r24, 0xFC	; 252
     b30:	89 bf       	out	0x39, r24	; 57
     b32:	99 b7       	in	r25, 0x39	; 57
     b34:	23 81       	ldd	r18, Z+3	; 0x03
     b36:	84 81       	ldd	r24, Z+4	; 0x04
     b38:	82 2b       	or	r24, r18
     b3a:	89 2b       	or	r24, r25
     b3c:	89 bf       	out	0x39, r24	; 57
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	88 23       	and	r24, r24
     b42:	59 f0       	breq	.+22     	; 0xb5a <MCAL_TIMER0_Init+0xa6>
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	be 01       	movw	r22, r28
     b4e:	6f 5f       	subi	r22, 0xFF	; 255
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	86 e3       	ldi	r24, 0x36	; 54
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     b5a:	f8 01       	movw	r30, r16
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	19 f0       	breq	.+6      	; 0xb68 <MCAL_TIMER0_Init+0xb4>
     b62:	83 81       	ldd	r24, Z+3	; 0x03
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	89 f4       	brne	.+34     	; 0xb8a <MCAL_TIMER0_Init+0xd6>
     b68:	8f b7       	in	r24, 0x3f	; 63
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8f bf       	out	0x3f, r24	; 63
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	0d c0       	rjmp	.+26     	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	0b c0       	rjmp	.+22     	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	07 c0       	rjmp	.+14     	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <MCAL_TIMER0_Init+0xd8>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	08 95       	ret

00000b9a <MCAL_TIMER0_Stop>:
     b9a:	83 b7       	in	r24, 0x33	; 51
     b9c:	88 7f       	andi	r24, 0xF8	; 248
     b9e:	83 bf       	out	0x33, r24	; 51
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 95       	ret

00000ba4 <Timer0_SingleIntervalDelayCallback>:
     ba4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <LOC_u32CTCcounter.1746>
     ba8:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <LOC_u32CTCcounter.1746+0x1>
     bac:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <LOC_u32CTCcounter.1746+0x2>
     bb0:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <LOC_u32CTCcounter.1746+0x3>
     bb4:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <Glob_u32DelayInMilliseconds>
     bb8:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <Glob_u32DelayInMilliseconds+0x1>
     bbc:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <Glob_u32DelayInMilliseconds+0x2>
     bc0:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <Glob_u32DelayInMilliseconds+0x3>
     bc4:	84 17       	cp	r24, r20
     bc6:	95 07       	cpc	r25, r21
     bc8:	a6 07       	cpc	r26, r22
     bca:	b7 07       	cpc	r27, r23
     bcc:	78 f4       	brcc	.+30     	; 0xbec <Timer0_SingleIntervalDelayCallback+0x48>
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <LOC_u32CTCcounter.1746>
     bd8:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <LOC_u32CTCcounter.1746+0x1>
     bdc:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <LOC_u32CTCcounter.1746+0x2>
     be0:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <LOC_u32CTCcounter.1746+0x3>
     be4:	88 b7       	in	r24, 0x38	; 56
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	88 bf       	out	0x38, r24	; 56
     bea:	08 95       	ret
     bec:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <LOC_u32CTCcounter.1746>
     bf0:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <LOC_u32CTCcounter.1746+0x1>
     bf4:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <LOC_u32CTCcounter.1746+0x2>
     bf8:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <LOC_u32CTCcounter.1746+0x3>
     bfc:	0e 94 cd 05 	call	0xb9a	; 0xb9a <MCAL_TIMER0_Stop>
     c00:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <Glob_fptrInterruptedDelayCallback>
     c04:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <Glob_fptrInterruptedDelayCallback+0x1>
     c08:	09 95       	icall
     c0a:	08 95       	ret

00000c0c <MCAL_TIMER0_SetCompare>:
     c0c:	8c bf       	out	0x3c, r24	; 60
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	08 95       	ret

00000c12 <MCAL_TIMER0_SetCounter>:
     c12:	82 bf       	out	0x32, r24	; 50
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	08 95       	ret

00000c18 <MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT>:
* @param [in]	:   callback: the output compare match interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT(Ptr_Func callback)
{
    outputCompareMatchCallback = callback;
     c18:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <outputCompareMatchCallback+0x1>
     c1c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <outputCompareMatchCallback>
     c20:	08 95       	ret

00000c22 <MCAL_TIMER0_SingleIntervalDelayms>:
* @brief		  : Function to delay the TIMER0 for a certain amount of time without halting the CPU.
* @param [in]	: copy_Milliseconds number of milliseconds to delay.
======================================================================================================================
*/
void MCAL_TIMER0_SingleIntervalDelayms(uint32_t copy_Milliseconds, Ptr_Func func)
{
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	00 d0       	rcall	.+0      	; 0xc34 <MCAL_TIMER0_SingleIntervalDelayms+0x12>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <MCAL_TIMER0_SingleIntervalDelayms+0x14>
     c36:	1f 92       	push	r1
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	6b 01       	movw	r12, r22
     c3e:	7c 01       	movw	r14, r24
     c40:	8a 01       	movw	r16, r20
    sTIMER0_Config_t Timer0_cfg;
    uint8_t LOC_u8CompareValue;

    Timer0_cfg.TIMER0_CLK_SRC = TIMER0_Prescale_64;
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	89 83       	std	Y+1, r24	; 0x01
    Timer0_cfg.TIMER0_Mode = TIMER0_CTC_Mode;
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	8a 83       	std	Y+2, r24	; 0x02
    Timer0_cfg.TIMER0_COM = TIMER0_COM_Disconnected;
     c4a:	1b 82       	std	Y+3, r1	; 0x03
    Timer0_cfg.TIMER0_OCIE = TIMER0_TOCI_Enable;
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	8d 83       	std	Y+5, r24	; 0x05
    Timer0_cfg.TIMER0_OIE = TIMER0_TOI_Disable;
     c50:	1c 82       	std	Y+4, r1	; 0x04

    /*Delay of one millisecond*/
    LOC_u8CompareValue = (uint8_t)(((F_CPU / 1000) / 64) - 1);
    MCAL_TIMER0_SetCompare(LOC_u8CompareValue);
     c52:	8c e7       	ldi	r24, 0x7C	; 124
     c54:	0e 94 06 06 	call	0xc0c	; 0xc0c <MCAL_TIMER0_SetCompare>
    MCAL_TIMER0_SetCounter(0x00);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e 94 09 06 	call	0xc12	; 0xc12 <MCAL_TIMER0_SetCounter>
    
    MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT(Timer0_SingleIntervalDelayCallback);    
     c5e:	82 ed       	ldi	r24, 0xD2	; 210
     c60:	95 e0       	ldi	r25, 0x05	; 5
     c62:	0e 94 0c 06 	call	0xc18	; 0xc18 <MCAL_TIMER0_CALLBACK_CompareMatch_INTERRUPT>

    Glob_u32DelayInMilliseconds = copy_Milliseconds;
     c66:	c0 92 b6 00 	sts	0x00B6, r12	; 0x8000b6 <Glob_u32DelayInMilliseconds>
     c6a:	d0 92 b7 00 	sts	0x00B7, r13	; 0x8000b7 <Glob_u32DelayInMilliseconds+0x1>
     c6e:	e0 92 b8 00 	sts	0x00B8, r14	; 0x8000b8 <Glob_u32DelayInMilliseconds+0x2>
     c72:	f0 92 b9 00 	sts	0x00B9, r15	; 0x8000b9 <Glob_u32DelayInMilliseconds+0x3>
    Glob_fptrInterruptedDelayCallback = func;
     c76:	10 93 b1 00 	sts	0x00B1, r17	; 0x8000b1 <Glob_fptrInterruptedDelayCallback+0x1>
     c7a:	00 93 b0 00 	sts	0x00B0, r16	; 0x8000b0 <Glob_fptrInterruptedDelayCallback>
    MCAL_TIMER0_Init(&Timer0_cfg);
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 5a 05 	call	0xab4	; 0xab4 <MCAL_TIMER0_Init>
}
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	08 95       	ret

00000ca2 <__vector_10>:
*===============================================
*/

/*Timer/Counter0 Compare Match (Vector number in the datasheet - 1)*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
    
    outputCompareMatchCallback();
     cc4:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <outputCompareMatchCallback>
     cc8:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <outputCompareMatchCallback+0x1>
     ccc:	09 95       	icall
}
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_11>:

/*Timer/Counter0 Overflow*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31

    overflowCounter++;
     d12:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <overflowCounter>
     d16:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <overflowCounter+0x1>
     d1a:	a0 91 bc 00 	lds	r26, 0x00BC	; 0x8000bc <overflowCounter+0x2>
     d1e:	b0 91 bd 00 	lds	r27, 0x00BD	; 0x8000bd <overflowCounter+0x3>
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <overflowCounter>
     d2c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <overflowCounter+0x1>
     d30:	a0 93 bc 00 	sts	0x00BC, r26	; 0x8000bc <overflowCounter+0x2>
     d34:	b0 93 bd 00 	sts	0x00BD, r27	; 0x8000bd <overflowCounter+0x3>
    overflowCallback();
     d38:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <overflowCallback>
     d3c:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <overflowCallback+0x1>
     d40:	09 95       	icall
}
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0f 90       	pop	r0
     d60:	1f 90       	pop	r1
     d62:	18 95       	reti

00000d64 <MCAL_TIMER2_Init>:
* @param [in]	:   callback: the output compare match interrupt callback function.
======================================================================================================================
*/
void MCAL_TIMER2_CALLBACK_CompareMatch_INTERRUPT(Ptr_Func callback)
{
    outputCompareMatchCallback = callback;
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <MCAL_TIMER2_Init+0xa>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	fc 01       	movw	r30, r24
     d74:	89 2b       	or	r24, r25
     d76:	09 f4       	brne	.+2      	; 0xd7a <MCAL_TIMER2_Init+0x16>
     d78:	56 c0       	rjmp	.+172    	; 0xe26 <MCAL_TIMER2_Init+0xc2>
     d7a:	80 81       	ld	r24, Z
     d7c:	8a 30       	cpi	r24, 0x0A	; 10
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <MCAL_TIMER2_Init+0x1e>
     d80:	54 c0       	rjmp	.+168    	; 0xe2a <MCAL_TIMER2_Init+0xc6>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	88 23       	and	r24, r24
     d86:	39 f0       	breq	.+14     	; 0xd96 <MCAL_TIMER2_Init+0x32>
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	29 f0       	breq	.+10     	; 0xd96 <MCAL_TIMER2_Init+0x32>
     d8c:	80 34       	cpi	r24, 0x40	; 64
     d8e:	19 f0       	breq	.+6      	; 0xd96 <MCAL_TIMER2_Init+0x32>
     d90:	88 34       	cpi	r24, 0x48	; 72
     d92:	09 f0       	breq	.+2      	; 0xd96 <MCAL_TIMER2_Init+0x32>
     d94:	4c c0       	rjmp	.+152    	; 0xe2e <MCAL_TIMER2_Init+0xca>
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	88 23       	and	r24, r24
     d9a:	39 f0       	breq	.+14     	; 0xdaa <MCAL_TIMER2_Init+0x46>
     d9c:	80 31       	cpi	r24, 0x10	; 16
     d9e:	29 f0       	breq	.+10     	; 0xdaa <MCAL_TIMER2_Init+0x46>
     da0:	80 32       	cpi	r24, 0x20	; 32
     da2:	19 f0       	breq	.+6      	; 0xdaa <MCAL_TIMER2_Init+0x46>
     da4:	80 33       	cpi	r24, 0x30	; 48
     da6:	09 f0       	breq	.+2      	; 0xdaa <MCAL_TIMER2_Init+0x46>
     da8:	44 c0       	rjmp	.+136    	; 0xe32 <MCAL_TIMER2_Init+0xce>
     daa:	83 81       	ldd	r24, Z+3	; 0x03
     dac:	88 23       	and	r24, r24
     dae:	19 f0       	breq	.+6      	; 0xdb6 <MCAL_TIMER2_Init+0x52>
     db0:	80 34       	cpi	r24, 0x40	; 64
     db2:	09 f0       	breq	.+2      	; 0xdb6 <MCAL_TIMER2_Init+0x52>
     db4:	40 c0       	rjmp	.+128    	; 0xe36 <MCAL_TIMER2_Init+0xd2>
     db6:	84 81       	ldd	r24, Z+4	; 0x04
     db8:	88 23       	and	r24, r24
     dba:	11 f0       	breq	.+4      	; 0xdc0 <MCAL_TIMER2_Init+0x5c>
     dbc:	80 38       	cpi	r24, 0x80	; 128
     dbe:	e9 f5       	brne	.+122    	; 0xe3a <MCAL_TIMER2_Init+0xd6>
     dc0:	8f 01       	movw	r16, r30
     dc2:	85 e0       	ldi	r24, 0x05	; 5
     dc4:	ab ec       	ldi	r26, 0xCB	; 203
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	01 90       	ld	r0, Z+
     dca:	0d 92       	st	X+, r0
     dcc:	8a 95       	dec	r24
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <MCAL_TIMER2_Init+0x64>
     dd0:	15 bc       	out	0x25, r1	; 37
     dd2:	f8 01       	movw	r30, r16
     dd4:	20 81       	ld	r18, Z
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
     dd8:	92 81       	ldd	r25, Z+2	; 0x02
     dda:	82 2b       	or	r24, r18
     ddc:	89 2b       	or	r24, r25
     dde:	85 bd       	out	0x25, r24	; 37
     de0:	89 b7       	in	r24, 0x39	; 57
     de2:	8f 77       	andi	r24, 0x7F	; 127
     de4:	89 bf       	out	0x39, r24	; 57
     de6:	99 b7       	in	r25, 0x39	; 57
     de8:	23 81       	ldd	r18, Z+3	; 0x03
     dea:	84 81       	ldd	r24, Z+4	; 0x04
     dec:	82 2b       	or	r24, r18
     dee:	89 2b       	or	r24, r25
     df0:	89 bf       	out	0x39, r24	; 57
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	88 23       	and	r24, r24
     df6:	59 f0       	breq	.+22     	; 0xe0e <MCAL_TIMER2_Init+0xaa>
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	8a 83       	std	Y+2, r24	; 0x02
     e00:	be 01       	movw	r22, r28
     e02:	6f 5f       	subi	r22, 0xFF	; 255
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	86 e3       	ldi	r24, 0x36	; 54
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 1e 04 	call	0x83c	; 0x83c <MCAL_GPIO_Init>
     e0e:	f8 01       	movw	r30, r16
     e10:	84 81       	ldd	r24, Z+4	; 0x04
     e12:	80 38       	cpi	r24, 0x80	; 128
     e14:	19 f0       	breq	.+6      	; 0xe1c <MCAL_TIMER2_Init+0xb8>
     e16:	83 81       	ldd	r24, Z+3	; 0x03
     e18:	80 34       	cpi	r24, 0x40	; 64
     e1a:	89 f4       	brne	.+34     	; 0xe3e <MCAL_TIMER2_Init+0xda>
     e1c:	8f b7       	in	r24, 0x3f	; 63
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	8f bf       	out	0x3f, r24	; 63
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0d c0       	rjmp	.+26     	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0b c0       	rjmp	.+22     	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <MCAL_TIMER2_Init+0xdc>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <MCAL_TIMER2_SetCompare>:
     e4e:	83 bd       	out	0x23, r24	; 35
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret

00000e54 <__vector_4>:
*===============================================
*/

/*Timer/Counter2 Compare Match (Vector number in the datasheet - 1)*/
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void){
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
    
    outputCompareMatchCallback();
     e76:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <outputCompareMatchCallback>
     e7a:	f0 91 c4 00 	lds	r31, 0x00C4	; 0x8000c4 <outputCompareMatchCallback+0x1>
     e7e:	09 95       	icall
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_5>:

/*Timer/Counter2 Overflow*/
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void){
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31

    overflowCounter++;
     ec4:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <overflowCounter>
     ec8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <overflowCounter+0x1>
     ecc:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <overflowCounter+0x2>
     ed0:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <overflowCounter+0x3>
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	a1 1d       	adc	r26, r1
     ed8:	b1 1d       	adc	r27, r1
     eda:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <overflowCounter>
     ede:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <overflowCounter+0x1>
     ee2:	a0 93 c9 00 	sts	0x00C9, r26	; 0x8000c9 <overflowCounter+0x2>
     ee6:	b0 93 ca 00 	sts	0x00CA, r27	; 0x8000ca <overflowCounter+0x3>
    overflowCallback();
     eea:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <overflowCallback>
     eee:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <overflowCallback+0x1>
     ef2:	09 95       	icall
}
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <MCAL_UART_Init>:
    case USART_IRQ_TXC:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_TXCIE_POS);
        break;
    
    case USART_IRQ_UDRE:
        CLEAR_BIT(USART->UCSRB, USART_UCSRB_UDREIE_POS);
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
     f1c:	89 e0       	ldi	r24, 0x09	; 9
     f1e:	fe 01       	movw	r30, r28
     f20:	a6 ed       	ldi	r26, 0xD6	; 214
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	01 90       	ld	r0, Z+
     f26:	0d 92       	st	X+, r0
     f28:	8a 95       	dec	r24
     f2a:	e1 f7       	brne	.-8      	; 0xf24 <MCAL_UART_Init+0xe>
     f2c:	88 81       	ld	r24, Y
     f2e:	88 23       	and	r24, r24
     f30:	21 f0       	breq	.+8      	; 0xf3a <MCAL_UART_Init+0x24>
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	21 f4       	brne	.+8      	; 0xf3e <MCAL_UART_Init+0x28>
     f36:	a8 e0       	ldi	r26, 0x08	; 8
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <MCAL_UART_Init+0x2a>
     f3a:	a0 e1       	ldi	r26, 0x10	; 16
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <MCAL_UART_Init+0x2a>
     f3e:	a2 e0       	ldi	r26, 0x02	; 2
     f40:	2a 81       	ldd	r18, Y+2	; 0x02
     f42:	3b 81       	ldd	r19, Y+3	; 0x03
     f44:	4c 81       	ldd	r20, Y+4	; 0x04
     f46:	5d 81       	ldd	r21, Y+5	; 0x05
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__muluhisi3>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	72 e1       	ldi	r23, 0x12	; 18
     f56:	8a e7       	ldi	r24, 0x7A	; 122
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 ce 08 	call	0x119c	; 0x119c <__udivmodsi4>
     f5e:	21 50       	subi	r18, 0x01	; 1
     f60:	31 09       	sbc	r19, r1
     f62:	21 15       	cp	r18, r1
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	38 07       	cpc	r19, r24
     f68:	58 f5       	brcc	.+86     	; 0xfc0 <MCAL_UART_Init+0xaa>
     f6a:	29 b9       	out	0x09, r18	; 9
     f6c:	2f 3f       	cpi	r18, 0xFF	; 255
     f6e:	31 05       	cpc	r19, r1
     f70:	21 f0       	breq	.+8      	; 0xf7a <MCAL_UART_Init+0x64>
     f72:	18 f0       	brcs	.+6      	; 0xf7a <MCAL_UART_Init+0x64>
     f74:	83 2f       	mov	r24, r19
     f76:	8f 70       	andi	r24, 0x0F	; 15
     f78:	80 bd       	out	0x20, r24	; 32
     f7a:	88 81       	ld	r24, Y
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	61 f0       	breq	.+24     	; 0xf98 <MCAL_UART_Init+0x82>
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	29 f4       	brne	.+10     	; 0xf8e <MCAL_UART_Init+0x78>
     f84:	8b b1       	in	r24, 0x0b	; 11
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	8b b9       	out	0x0b, r24	; 11
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <MCAL_UART_Init+0x84>
     f8e:	8b b1       	in	r24, 0x0b	; 11
     f90:	8d 7f       	andi	r24, 0xFD	; 253
     f92:	8b b9       	out	0x0b, r24	; 11
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <MCAL_UART_Init+0x84>
     f98:	90 e8       	ldi	r25, 0x80	; 128
     f9a:	88 85       	ldd	r24, Y+8	; 0x08
     f9c:	89 2b       	or	r24, r25
     f9e:	9f 81       	ldd	r25, Y+7	; 0x07
     fa0:	98 2b       	or	r25, r24
     fa2:	8e 81       	ldd	r24, Y+6	; 0x06
     fa4:	87 30       	cpi	r24, 0x07	; 7
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <MCAL_UART_Init+0x9c>
     fa8:	89 2f       	mov	r24, r25
     faa:	86 60       	ori	r24, 0x06	; 6
     fac:	94 e0       	ldi	r25, 0x04	; 4
     fae:	9a b9       	out	0x0a, r25	; 10
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <MCAL_UART_Init+0x9e>
     fb2:	89 2b       	or	r24, r25
     fb4:	80 68       	ori	r24, 0x80	; 128
     fb6:	80 bd       	out	0x20, r24	; 32
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	8a b9       	out	0x0a, r24	; 10
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <MCAL_UART_Init+0xac>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <MCAL_UART_Disable>:
     fc8:	8a b1       	in	r24, 0x0a	; 10
     fca:	87 7e       	andi	r24, 0xE7	; 231
     fcc:	8a b9       	out	0x0a, r24	; 10
     fce:	08 95       	ret

00000fd0 <MCAL_UART_Enable>:
     fd0:	9a b1       	in	r25, 0x0a	; 10
     fd2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <LOC_cfg+0x1>
     fd6:	89 2b       	or	r24, r25
     fd8:	8a b9       	out	0x0a, r24	; 10
     fda:	08 95       	ret

00000fdc <MCAL_UART_Send_Data>:
     fdc:	61 11       	cpse	r22, r1
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MCAL_UART_Send_Data+0x8>
     fe0:	5d 9b       	sbis	0x0b, 5	; 11
     fe2:	fe cf       	rjmp	.-4      	; 0xfe0 <MCAL_UART_Send_Data+0x4>
     fe4:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <LOC_cfg+0x6>
     fe8:	27 30       	cpi	r18, 0x07	; 7
     fea:	49 f4       	brne	.+18     	; 0xffe <MCAL_UART_Send_Data+0x22>
     fec:	2a b1       	in	r18, 0x0a	; 10
     fee:	2e 7f       	andi	r18, 0xFE	; 254
     ff0:	2a b9       	out	0x0a, r18	; 10
     ff2:	3a b1       	in	r19, 0x0a	; 10
     ff4:	fc 01       	movw	r30, r24
     ff6:	21 81       	ldd	r18, Z+1	; 0x01
     ff8:	21 70       	andi	r18, 0x01	; 1
     ffa:	23 2b       	or	r18, r19
     ffc:	2a b9       	out	0x0a, r18	; 10
     ffe:	fc 01       	movw	r30, r24
    1000:	80 81       	ld	r24, Z
    1002:	8c b9       	out	0x0c, r24	; 12
    1004:	08 95       	ret

00001006 <MCAL_UART_Get_Data>:
    1006:	61 11       	cpse	r22, r1
    1008:	02 c0       	rjmp	.+4      	; 0x100e <MCAL_UART_Get_Data+0x8>
    100a:	5f 9b       	sbis	0x0b, 7	; 11
    100c:	fe cf       	rjmp	.-4      	; 0x100a <MCAL_UART_Get_Data+0x4>
    100e:	5c 99       	sbic	0x0b, 4	; 11
    1010:	19 c0       	rjmp	.+50     	; 0x1044 <MCAL_UART_Get_Data+0x3e>
    1012:	5a 99       	sbic	0x0b, 2	; 11
    1014:	19 c0       	rjmp	.+50     	; 0x1048 <MCAL_UART_Get_Data+0x42>
    1016:	5b 99       	sbic	0x0b, 3	; 11
    1018:	19 c0       	rjmp	.+50     	; 0x104c <MCAL_UART_Get_Data+0x46>
    101a:	fc 01       	movw	r30, r24
    101c:	11 82       	std	Z+1, r1	; 0x01
    101e:	10 82       	st	Z, r1
    1020:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <LOC_cfg+0x6>
    1024:	27 30       	cpi	r18, 0x07	; 7
    1026:	39 f4       	brne	.+14     	; 0x1036 <MCAL_UART_Get_Data+0x30>
    1028:	2a b1       	in	r18, 0x0a	; 10
    102a:	22 70       	andi	r18, 0x02	; 2
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	35 95       	asr	r19
    1030:	27 95       	ror	r18
    1032:	10 82       	st	Z, r1
    1034:	21 83       	std	Z+1, r18	; 0x01
    1036:	2c b1       	in	r18, 0x0c	; 12
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	31 83       	std	Z+1, r19	; 0x01
    103e:	20 83       	st	Z, r18
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	08 95       	ret
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	08 95       	ret
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	08 95       	ret
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	08 95       	ret

00001050 <MCAL_UART_Interrupt_EN>:
    1050:	61 15       	cp	r22, r1
    1052:	71 05       	cpc	r23, r1
    1054:	29 f1       	breq	.+74     	; 0x10a0 <MCAL_UART_Interrupt_EN+0x50>
    1056:	9f b7       	in	r25, 0x3f	; 63
    1058:	90 68       	ori	r25, 0x80	; 128
    105a:	9f bf       	out	0x3f, r25	; 63
    105c:	80 34       	cpi	r24, 0x40	; 64
    105e:	71 f0       	breq	.+28     	; 0x107c <MCAL_UART_Interrupt_EN+0x2c>
    1060:	80 38       	cpi	r24, 0x80	; 128
    1062:	19 f0       	breq	.+6      	; 0x106a <MCAL_UART_Interrupt_EN+0x1a>
    1064:	80 32       	cpi	r24, 0x20	; 32
    1066:	f1 f4       	brne	.+60     	; 0x10a4 <MCAL_UART_Interrupt_EN+0x54>
    1068:	12 c0       	rjmp	.+36     	; 0x108e <MCAL_UART_Interrupt_EN+0x3e>
    106a:	8a b1       	in	r24, 0x0a	; 10
    106c:	80 68       	ori	r24, 0x80	; 128
    106e:	8a b9       	out	0x0a, r24	; 10
    1070:	70 93 d5 00 	sts	0x00D5, r23	; 0x8000d5 <LOC_fptr_RXC_callback+0x1>
    1074:	60 93 d4 00 	sts	0x00D4, r22	; 0x8000d4 <LOC_fptr_RXC_callback>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	08 95       	ret
    107c:	8a b1       	in	r24, 0x0a	; 10
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	8a b9       	out	0x0a, r24	; 10
    1082:	70 93 d3 00 	sts	0x00D3, r23	; 0x8000d3 <LOC_fptr_TXC_callback+0x1>
    1086:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <LOC_fptr_TXC_callback>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	08 95       	ret
    108e:	8a b1       	in	r24, 0x0a	; 10
    1090:	80 62       	ori	r24, 0x20	; 32
    1092:	8a b9       	out	0x0a, r24	; 10
    1094:	70 93 d1 00 	sts	0x00D1, r23	; 0x8000d1 <LOC_fptr_UDRE_callback+0x1>
    1098:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <LOC_fptr_UDRE_callback>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 95       	ret
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	08 95       	ret
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	08 95       	ret

000010a8 <__vector_13>:
/**
 * @brief This is the ISR for the USART RXC (USART, Rx Complete) 
 * 
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31

  	LOC_fptr_RXC_callback();
    10ca:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <LOC_fptr_RXC_callback>
    10ce:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <LOC_fptr_RXC_callback+0x1>
    10d2:	09 95       	icall
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <__vector_14>:
/**
 * @brief This is the ISR for the USART UDRE (USART Data Register Empty) 
 * 
 */
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void){
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31

  	LOC_fptr_UDRE_callback();
    1118:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <LOC_fptr_UDRE_callback>
    111c:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <LOC_fptr_UDRE_callback+0x1>
    1120:	09 95       	icall
}
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <__vector_15>:
/**
 * @brief This is the ISR for the USART TXC (USART, Tx Complete) 
 * 
 */
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void){
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31

  	LOC_fptr_TXC_callback();
    1166:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <LOC_fptr_TXC_callback>
    116a:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <LOC_fptr_TXC_callback+0x1>
    116e:	09 95       	icall
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <main>:
#define F_CPU  8000000UL
#include "Atmega32_Drivers/APP/APP.h"

int main(void)
{
    EntranceGate_ECU_APP_SETUP();
    1192:	0e 94 49 00 	call	0x92	; 0x92 <EntranceGate_ECU_APP_SETUP>

    while (1) 
    {
        EntranceGate_ECU_APP_Loop();
    1196:	0e 94 4e 00 	call	0x9c	; 0x9c <EntranceGate_ECU_APP_Loop>
    119a:	fd cf       	rjmp	.-6      	; 0x1196 <main+0x4>

0000119c <__udivmodsi4>:
    119c:	a1 e2       	ldi	r26, 0x21	; 33
    119e:	1a 2e       	mov	r1, r26
    11a0:	aa 1b       	sub	r26, r26
    11a2:	bb 1b       	sub	r27, r27
    11a4:	fd 01       	movw	r30, r26
    11a6:	0d c0       	rjmp	.+26     	; 0x11c2 <__udivmodsi4_ep>

000011a8 <__udivmodsi4_loop>:
    11a8:	aa 1f       	adc	r26, r26
    11aa:	bb 1f       	adc	r27, r27
    11ac:	ee 1f       	adc	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	a2 17       	cp	r26, r18
    11b2:	b3 07       	cpc	r27, r19
    11b4:	e4 07       	cpc	r30, r20
    11b6:	f5 07       	cpc	r31, r21
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <__udivmodsi4_ep>
    11ba:	a2 1b       	sub	r26, r18
    11bc:	b3 0b       	sbc	r27, r19
    11be:	e4 0b       	sbc	r30, r20
    11c0:	f5 0b       	sbc	r31, r21

000011c2 <__udivmodsi4_ep>:
    11c2:	66 1f       	adc	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	1a 94       	dec	r1
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <__udivmodsi4_loop>
    11ce:	60 95       	com	r22
    11d0:	70 95       	com	r23
    11d2:	80 95       	com	r24
    11d4:	90 95       	com	r25
    11d6:	9b 01       	movw	r18, r22
    11d8:	ac 01       	movw	r20, r24
    11da:	bd 01       	movw	r22, r26
    11dc:	cf 01       	movw	r24, r30
    11de:	08 95       	ret

000011e0 <__muluhisi3>:
    11e0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__umulhisi3>
    11e4:	a5 9f       	mul	r26, r21
    11e6:	90 0d       	add	r25, r0
    11e8:	b4 9f       	mul	r27, r20
    11ea:	90 0d       	add	r25, r0
    11ec:	a4 9f       	mul	r26, r20
    11ee:	80 0d       	add	r24, r0
    11f0:	91 1d       	adc	r25, r1
    11f2:	11 24       	eor	r1, r1
    11f4:	08 95       	ret

000011f6 <__umulhisi3>:
    11f6:	a2 9f       	mul	r26, r18
    11f8:	b0 01       	movw	r22, r0
    11fa:	b3 9f       	mul	r27, r19
    11fc:	c0 01       	movw	r24, r0
    11fe:	a3 9f       	mul	r26, r19
    1200:	70 0d       	add	r23, r0
    1202:	81 1d       	adc	r24, r1
    1204:	11 24       	eor	r1, r1
    1206:	91 1d       	adc	r25, r1
    1208:	b2 9f       	mul	r27, r18
    120a:	70 0d       	add	r23, r0
    120c:	81 1d       	adc	r24, r1
    120e:	11 24       	eor	r1, r1
    1210:	91 1d       	adc	r25, r1
    1212:	08 95       	ret

00001214 <_exit>:
    1214:	f8 94       	cli

00001216 <__stop_program>:
    1216:	ff cf       	rjmp	.-2      	; 0x1216 <__stop_program>
