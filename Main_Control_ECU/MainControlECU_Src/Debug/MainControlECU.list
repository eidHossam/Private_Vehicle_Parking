
MainControlECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000146c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800159c  0800159c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016e8  080016e8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080016e8  080016e8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016e8  080016e8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016e8  080016e8  000116e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080016f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000018  08001708  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001708  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bf0  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e38  00000000  00000000  00024c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000014b4  00000000  00000000  00025a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000378  00000000  00000000  00026f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e0  00000000  00000000  00027298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002c1a  00000000  00000000  00027578  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003cad  00000000  00000000  0002a192  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b536  00000000  00000000  0002de3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00039375  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b64  00000000  00000000  000393f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08001584 	.word	0x08001584

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08001584 	.word	0x08001584

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <main>:
 */
#include "APP.h"
#include "SYSTICK/Cortex_m3_SYSTICK_Interface.h"

int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0

	Dashboard_ECU_APP_SETUP();
 8000188:	f000 f82d 	bl	80001e6 <Dashboard_ECU_APP_SETUP>
  
  	while (1) 
	{
		Dashboard_ECU_APP_Loop();
 800018c:	f000 f832 	bl	80001f4 <Dashboard_ECU_APP_Loop>
 8000190:	e7fc      	b.n	800018c <main+0x8>
	...

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480d      	ldr	r0, [pc, #52]	; (80001cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000198:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480c      	ldr	r0, [pc, #48]	; (80001d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800019e:	490d      	ldr	r1, [pc, #52]	; (80001d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a0:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <LoopForever+0xe>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b4:	4c0a      	ldr	r4, [pc, #40]	; (80001e0 <LoopForever+0x16>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001c2:	f001 f9b3 	bl	800152c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c6:	f7ff ffdd 	bl	8000184 <main>

080001ca <LoopForever>:

LoopForever:
    b LoopForever
 80001ca:	e7fe      	b.n	80001ca <LoopForever>
  ldr   r0, =_estack
 80001cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80001d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80001d8:	080016f0 	.word	0x080016f0
  ldr r2, =_sbss
 80001dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80001e0:	20000090 	.word	0x20000090

080001e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e4:	e7fe      	b.n	80001e4 <ADC1_2_IRQHandler>

080001e6 <Dashboard_ECU_APP_SETUP>:
* @brief		:   Function to initialize all the components of the main control ECU.
* Note			:   none.
======================================================================================================================
*/
void Dashboard_ECU_APP_SETUP(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	af00      	add	r7, sp, #0
    st_Admin_DashboardInit();
 80001ea:	f000 f9c9 	bl	8000580 <st_Admin_DashboardInit>
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <Dashboard_ECU_APP_Loop>:
* @brief		:   Main functionality of the main dashboard ECU.
* Note			:   none.
======================================================================================================================
*/
void Dashboard_ECU_APP_Loop(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
    Admin_Dashboard_State();
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <Dashboard_ECU_APP_Loop+0x10>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4798      	blx	r3
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000088 	.word	0x20000088

08000208 <Peripheral_Clock_Init>:
* @brief		  : Enable all the required peripherals clocks.
* Note			  : none.
======================================================================================================================
*/
static void Peripheral_Clock_Init()
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*Enable GPIO_A*/
	APB2_PERI_CLOCK_EN(APB2_IOPA);
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <Peripheral_Clock_Init+0x30>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a09      	ldr	r2, [pc, #36]	; (8000238 <Peripheral_Clock_Init+0x30>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]

	/*Enable GPIO_B*/
	APB2_PERI_CLOCK_EN(APB2_IOPB);
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <Peripheral_Clock_Init+0x30>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <Peripheral_Clock_Init+0x30>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6193      	str	r3, [r2, #24]

  /*Enable AFIO*/
	APB2_PERI_CLOCK_EN(APB2_AFIO);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <Peripheral_Clock_Init+0x30>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <Peripheral_Clock_Init+0x30>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6193      	str	r3, [r2, #24]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40021000 	.word	0x40021000

0800023c <st_Admin_BacktoMainMenu>:
* @brief		  : Function to route the user back to the admin interface main menu.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_BacktoMainMenu(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
   pressedKey = Keypad_Get_Char();
 8000240:	f000 fcd2 	bl	8000be8 <Keypad_Get_Char>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <st_Admin_BacktoMainMenu+0x24>)
 800024a:	701a      	strb	r2, [r3, #0]

   if(pressedKey == '*')
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <st_Admin_BacktoMainMenu+0x24>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b2a      	cmp	r3, #42	; 0x2a
 8000252:	d102      	bne.n	800025a <st_Admin_BacktoMainMenu+0x1e>
   {
      Admin_Dashboard_State = st_Admin_ShowAdminOptions;
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <st_Admin_BacktoMainMenu+0x28>)
 8000256:	4a04      	ldr	r2, [pc, #16]	; (8000268 <st_Admin_BacktoMainMenu+0x2c>)
 8000258:	601a      	str	r2, [r3, #0]
   }else{

   }
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000034 	.word	0x20000034
 8000264:	20000088 	.word	0x20000088
 8000268:	080008a5 	.word	0x080008a5

0800026c <st_Admin_DisplayAddNewIDMessage>:
* @brief		  : A function to prompt the user to enter a new ID to be registered.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_DisplayAddNewIDMessage(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 8000270:	f000 ff50 	bl	8001114 <LCD_Clear_Screen>

  if(Glob_AuthIDsCount < AUTHORIZED_IDS_MAX_COUNT)
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <st_Admin_DisplayAddNewIDMessage+0x3c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d806      	bhi.n	800028a <st_Admin_DisplayAddNewIDMessage+0x1e>
  {
    LCD_Send_String(stringfy("Enter ID:"));
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <st_Admin_DisplayAddNewIDMessage+0x40>)
 800027e:	f000 feed 	bl	800105c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_AddNewID;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <st_Admin_DisplayAddNewIDMessage+0x44>)
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <st_Admin_DisplayAddNewIDMessage+0x48>)
 8000286:	601a      	str	r2, [r3, #0]
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
    LCD_Send_String(stringfy("main menu => '*'"));

    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
  }
}
 8000288:	e00c      	b.n	80002a4 <st_Admin_DisplayAddNewIDMessage+0x38>
    LCD_Send_String(stringfy("IDs count exceeded"));
 800028a:	480b      	ldr	r0, [pc, #44]	; (80002b8 <st_Admin_DisplayAddNewIDMessage+0x4c>)
 800028c:	f000 fee6 	bl	800105c <LCD_Send_String>
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000290:	2100      	movs	r1, #0
 8000292:	2003      	movs	r0, #3
 8000294:	f000 fef6 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("main menu => '*'"));
 8000298:	4808      	ldr	r0, [pc, #32]	; (80002bc <st_Admin_DisplayAddNewIDMessage+0x50>)
 800029a:	f000 fedf 	bl	800105c <LCD_Send_String>
    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <st_Admin_DisplayAddNewIDMessage+0x44>)
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <st_Admin_DisplayAddNewIDMessage+0x54>)
 80002a2:	601a      	str	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000060 	.word	0x20000060
 80002ac:	0800159c 	.word	0x0800159c
 80002b0:	20000088 	.word	0x20000088
 80002b4:	08000999 	.word	0x08000999
 80002b8:	080015a8 	.word	0x080015a8
 80002bc:	080015bc 	.word	0x080015bc
 80002c0:	0800023d 	.word	0x0800023d

080002c4 <st_Admin_AddedIDsuccessfully>:
* @brief		  : Function to tell the user that the process of adding a new ID had been successfull.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_AddedIDsuccessfully(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
   /*Copy the ID into the main list*/
   strcpy((sint8 *)Glob_DriversIDsList[Glob_AuthIDsCount], (const sint8 *)Glob_tempDriverIDinput);
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <st_Admin_AddedIDsuccessfully+0x44>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4a0f      	ldr	r2, [pc, #60]	; (800030c <st_Admin_AddedIDsuccessfully+0x48>)
 80002d0:	4413      	add	r3, r2
 80002d2:	490f      	ldr	r1, [pc, #60]	; (8000310 <st_Admin_AddedIDsuccessfully+0x4c>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 f94d 	bl	8001574 <strcpy>

   /*Increase the IDs count in the system*/
   Glob_AuthIDsCount++;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <st_Admin_AddedIDsuccessfully+0x44>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <st_Admin_AddedIDsuccessfully+0x44>)
 80002e4:	701a      	strb	r2, [r3, #0]
   
   LCD_Clear_Screen();
 80002e6:	f000 ff15 	bl	8001114 <LCD_Clear_Screen>

   LCD_Send_String(stringfy("ID Added successfully"));
 80002ea:	480a      	ldr	r0, [pc, #40]	; (8000314 <st_Admin_AddedIDsuccessfully+0x50>)
 80002ec:	f000 feb6 	bl	800105c <LCD_Send_String>
   LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 80002f0:	2100      	movs	r1, #0
 80002f2:	2003      	movs	r0, #3
 80002f4:	f000 fec6 	bl	8001084 <LCD_Cursor_XY>
   LCD_Send_String(stringfy("main menu => '*'"));
 80002f8:	4807      	ldr	r0, [pc, #28]	; (8000318 <st_Admin_AddedIDsuccessfully+0x54>)
 80002fa:	f000 feaf 	bl	800105c <LCD_Send_String>

  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <st_Admin_AddedIDsuccessfully+0x58>)
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <st_Admin_AddedIDsuccessfully+0x5c>)
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000060 	.word	0x20000060
 800030c:	2000004c 	.word	0x2000004c
 8000310:	20000048 	.word	0x20000048
 8000314:	080015d0 	.word	0x080015d0
 8000318:	080015bc 	.word	0x080015bc
 800031c:	20000088 	.word	0x20000088
 8000320:	0800023d 	.word	0x0800023d

08000324 <st_Admin_IDalreadyExists>:
* @brief		  : A function to warn the admin if he tries to register an already registered ID.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_IDalreadyExists(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 8000328:	f000 fef4 	bl	8001114 <LCD_Clear_Screen>
  LCD_Send_String(stringfy("ID already exist"));
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <st_Admin_IDalreadyExists+0x28>)
 800032e:	f000 fe95 	bl	800105c <LCD_Send_String>
  LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000332:	2100      	movs	r1, #0
 8000334:	2003      	movs	r0, #3
 8000336:	f000 fea5 	bl	8001084 <LCD_Cursor_XY>
  LCD_Send_String(stringfy("main menu => '*'"));
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <st_Admin_IDalreadyExists+0x2c>)
 800033c:	f000 fe8e 	bl	800105c <LCD_Send_String>
  
  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <st_Admin_IDalreadyExists+0x30>)
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <st_Admin_IDalreadyExists+0x34>)
 8000344:	601a      	str	r2, [r3, #0]
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	080015e8 	.word	0x080015e8
 8000350:	080015bc 	.word	0x080015bc
 8000354:	20000088 	.word	0x20000088
 8000358:	0800023d 	.word	0x0800023d

0800035c <st_Admin_RemovedIDsuccessfully>:
* @brief		  : A function to warn the admin if he tries to register an already registered ID.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_RemovedIDsuccessfully(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 8000360:	f000 fed8 	bl	8001114 <LCD_Clear_Screen>
  LCD_Send_String(stringfy("ID Deleted!"));
 8000364:	4807      	ldr	r0, [pc, #28]	; (8000384 <st_Admin_RemovedIDsuccessfully+0x28>)
 8000366:	f000 fe79 	bl	800105c <LCD_Send_String>
  LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 800036a:	2100      	movs	r1, #0
 800036c:	2003      	movs	r0, #3
 800036e:	f000 fe89 	bl	8001084 <LCD_Cursor_XY>
  LCD_Send_String(stringfy("main menu => '*'"));
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <st_Admin_RemovedIDsuccessfully+0x2c>)
 8000374:	f000 fe72 	bl	800105c <LCD_Send_String>
  
  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <st_Admin_RemovedIDsuccessfully+0x30>)
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <st_Admin_RemovedIDsuccessfully+0x34>)
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	080015fc 	.word	0x080015fc
 8000388:	080015bc 	.word	0x080015bc
 800038c:	20000088 	.word	0x20000088
 8000390:	0800023d 	.word	0x0800023d

08000394 <st_Admin_IDnotFound>:
* @brief		  : Function to inform the user that the required ID doesn't exist.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_IDnotFound(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 8000398:	f000 febc 	bl	8001114 <LCD_Clear_Screen>
  LCD_Send_String(stringfy("ID Doesn't Exist"));
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <st_Admin_IDnotFound+0x28>)
 800039e:	f000 fe5d 	bl	800105c <LCD_Send_String>
  LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 80003a2:	2100      	movs	r1, #0
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 fe6d 	bl	8001084 <LCD_Cursor_XY>
  LCD_Send_String(stringfy("main menu => '*'"));
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <st_Admin_IDnotFound+0x2c>)
 80003ac:	f000 fe56 	bl	800105c <LCD_Send_String>
  
  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <st_Admin_IDnotFound+0x30>)
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <st_Admin_IDnotFound+0x34>)
 80003b4:	601a      	str	r2, [r3, #0]

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08001608 	.word	0x08001608
 80003c0:	080015bc 	.word	0x080015bc
 80003c4:	20000088 	.word	0x20000088
 80003c8:	0800023d 	.word	0x0800023d

080003cc <deleteID>:
* @param [in]	: IDindex: index of the element to be removed.
* Note			  : The order of the elements in the list does not matter.
======================================================================================================================
*/
static void deleteID(uint8 IDindex)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  /*If the ID to be deleted is in the end of the list just decrease the IDs count*/
  if(IDindex < Glob_AuthIDsCount - 1)
 80003d6:	79fa      	ldrb	r2, [r7, #7]
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <deleteID+0x44>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	429a      	cmp	r2, r3
 80003e0:	da0c      	bge.n	80003fc <deleteID+0x30>
  {
    /*Delete the required ID from the list*/
    strcpy((sint8  *)Glob_DriversIDsList[IDindex], (const sint8 *)Glob_DriversIDsList[Glob_AuthIDsCount - 1]);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <deleteID+0x48>)
 80003e8:	1898      	adds	r0, r3, r2
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <deleteID+0x44>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <deleteID+0x48>)
 80003f4:	4413      	add	r3, r2
 80003f6:	4619      	mov	r1, r3
 80003f8:	f001 f8bc 	bl	8001574 <strcpy>
  }else{

  }

  Glob_AuthIDsCount--;
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <deleteID+0x44>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b02      	ldr	r3, [pc, #8]	; (8000410 <deleteID+0x44>)
 8000406:	701a      	strb	r2, [r3, #0]
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000060 	.word	0x20000060
 8000414:	2000004c 	.word	0x2000004c

08000418 <st_Admin_CheckRepeatedID>:
* @brief		  : FUnction to check if the ID to be registered already exists in the system.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_CheckRepeatedID(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  static uint8 counter = 0;
  boolean repeated = FALSE;
 800041e:	2300      	movs	r3, #0
 8000420:	71fb      	strb	r3, [r7, #7]

  if(!strcmp((const sint8 *)Glob_tempDriverIDinput, (const sint8 *)Glob_DriversIDsList[counter]))
 8000422:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <st_Admin_CheckRepeatedID+0xac>)
 800042a:	4413      	add	r3, r2
 800042c:	4619      	mov	r1, r3
 800042e:	4826      	ldr	r0, [pc, #152]	; (80004c8 <st_Admin_CheckRepeatedID+0xb0>)
 8000430:	f7ff fe9e 	bl	8000170 <strcmp>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d101      	bne.n	800043e <st_Admin_CheckRepeatedID+0x26>
  {
      repeated = TRUE;
 800043a:	2301      	movs	r3, #1
 800043c:	71fb      	strb	r3, [r7, #7]
  }else{

  }

  if(repeated)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d017      	beq.n	8000474 <st_Admin_CheckRepeatedID+0x5c>
  {
    if(currentOperation == ADMIN_ADD_ID)
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <st_Admin_CheckRepeatedID+0xb4>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b31      	cmp	r3, #49	; 0x31
 800044a:	d103      	bne.n	8000454 <st_Admin_CheckRepeatedID+0x3c>
    {
      Admin_Dashboard_State = st_Admin_IDalreadyExists;
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <st_Admin_CheckRepeatedID+0xb8>)
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <st_Admin_CheckRepeatedID+0xbc>)
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	e00b      	b.n	800046c <st_Admin_CheckRepeatedID+0x54>
    }else if(currentOperation == ADMIN_REMOVE_ID)
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <st_Admin_CheckRepeatedID+0xb4>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b32      	cmp	r3, #50	; 0x32
 800045a:	d107      	bne.n	800046c <st_Admin_CheckRepeatedID+0x54>
    {
      deleteID(counter);
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ffb3 	bl	80003cc <deleteID>
      Admin_Dashboard_State = st_Admin_RemovedIDsuccessfully;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <st_Admin_CheckRepeatedID+0xb8>)
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <st_Admin_CheckRepeatedID+0xc0>)
 800046a:	601a      	str	r2, [r3, #0]
    }else{

    }

    counter = 0;    
 800046c:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
      }else{

      }
    }
  }
}
 8000472:	e021      	b.n	80004b8 <st_Admin_CheckRepeatedID+0xa0>
    counter++;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 800047e:	701a      	strb	r2, [r3, #0]
    if(counter < Glob_AuthIDsCount)
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <st_Admin_CheckRepeatedID+0xc4>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	429a      	cmp	r2, r3
 800048a:	d203      	bcs.n	8000494 <st_Admin_CheckRepeatedID+0x7c>
      Admin_Dashboard_State = st_Admin_CheckRepeatedID;
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <st_Admin_CheckRepeatedID+0xb8>)
 800048e:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <st_Admin_CheckRepeatedID+0xc8>)
 8000490:	601a      	str	r2, [r3, #0]
}
 8000492:	e011      	b.n	80004b8 <st_Admin_CheckRepeatedID+0xa0>
      counter = 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <st_Admin_CheckRepeatedID+0xa8>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
      if(currentOperation == ADMIN_ADD_ID)
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <st_Admin_CheckRepeatedID+0xb4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b31      	cmp	r3, #49	; 0x31
 80004a0:	d103      	bne.n	80004aa <st_Admin_CheckRepeatedID+0x92>
        Admin_Dashboard_State = st_Admin_AddedIDsuccessfully;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <st_Admin_CheckRepeatedID+0xb8>)
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <st_Admin_CheckRepeatedID+0xcc>)
 80004a6:	601a      	str	r2, [r3, #0]
}
 80004a8:	e006      	b.n	80004b8 <st_Admin_CheckRepeatedID+0xa0>
      }else if(currentOperation == ADMIN_REMOVE_ID)
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <st_Admin_CheckRepeatedID+0xb4>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b32      	cmp	r3, #50	; 0x32
 80004b0:	d102      	bne.n	80004b8 <st_Admin_CheckRepeatedID+0xa0>
        Admin_Dashboard_State = st_Admin_IDnotFound;
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <st_Admin_CheckRepeatedID+0xb8>)
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <st_Admin_CheckRepeatedID+0xd0>)
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000061 	.word	0x20000061
 80004c4:	2000004c 	.word	0x2000004c
 80004c8:	20000048 	.word	0x20000048
 80004cc:	20000045 	.word	0x20000045
 80004d0:	20000088 	.word	0x20000088
 80004d4:	08000325 	.word	0x08000325
 80004d8:	0800035d 	.word	0x0800035d
 80004dc:	20000060 	.word	0x20000060
 80004e0:	08000419 	.word	0x08000419
 80004e4:	080002c5 	.word	0x080002c5
 80004e8:	08000395 	.word	0x08000395

080004ec <st_Admin_DisplayRemoveIDMessage>:
* @brief		  : A function to prompt the user to enter a an ID to be deleted from the system.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_DisplayRemoveIDMessage(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 80004f0:	f000 fe10 	bl	8001114 <LCD_Clear_Screen>

  if(Glob_AuthIDsCount > 0)
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <st_Admin_DisplayRemoveIDMessage+0x3c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d006      	beq.n	800050a <st_Admin_DisplayRemoveIDMessage+0x1e>
  {
    LCD_Send_String(stringfy("Enter ID:"));
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <st_Admin_DisplayRemoveIDMessage+0x40>)
 80004fe:	f000 fdad 	bl	800105c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_RemoveID;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <st_Admin_DisplayRemoveIDMessage+0x44>)
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <st_Admin_DisplayRemoveIDMessage+0x48>)
 8000506:	601a      	str	r2, [r3, #0]
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
    LCD_Send_String(stringfy("main menu => '*'"));

    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
  }
}
 8000508:	e00c      	b.n	8000524 <st_Admin_DisplayRemoveIDMessage+0x38>
    LCD_Send_String(stringfy("IDs List Empty"));
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <st_Admin_DisplayRemoveIDMessage+0x4c>)
 800050c:	f000 fda6 	bl	800105c <LCD_Send_String>
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000510:	2100      	movs	r1, #0
 8000512:	2003      	movs	r0, #3
 8000514:	f000 fdb6 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("main menu => '*'"));
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <st_Admin_DisplayRemoveIDMessage+0x50>)
 800051a:	f000 fd9f 	bl	800105c <LCD_Send_String>
    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <st_Admin_DisplayRemoveIDMessage+0x44>)
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <st_Admin_DisplayRemoveIDMessage+0x54>)
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000060 	.word	0x20000060
 800052c:	0800159c 	.word	0x0800159c
 8000530:	20000088 	.word	0x20000088
 8000534:	08000a41 	.word	0x08000a41
 8000538:	0800161c 	.word	0x0800161c
 800053c:	080015bc 	.word	0x080015bc
 8000540:	0800023d 	.word	0x0800023d

08000544 <SYSTICK_Callback>:

/** @defgroup ISR_CALLBACK_FUNCTION
  * @{
  */
void SYSTICK_Callback(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  static uint8 counter = 0;

  if(counter == TIMEOUT_10_SECONDS)
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <SYSTICK_Callback+0x30>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b04      	cmp	r3, #4
 800054e:	d108      	bne.n	8000562 <SYSTICK_Callback+0x1e>
  {
      counter = 0;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <SYSTICK_Callback+0x30>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
      MCAL_SYST_Stop();
 8000556:	f000 ff73 	bl	8001440 <MCAL_SYST_Stop>
      Admin_Dashboard_State = st_Admin_InitialMessage;
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <SYSTICK_Callback+0x34>)
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <SYSTICK_Callback+0x38>)
 800055e:	601a      	str	r2, [r3, #0]
  }else{
    counter++;
  }
}
 8000560:	e005      	b.n	800056e <SYSTICK_Callback+0x2a>
    counter++;
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <SYSTICK_Callback+0x30>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b02      	ldr	r3, [pc, #8]	; (8000574 <SYSTICK_Callback+0x30>)
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000062 	.word	0x20000062
 8000578:	20000088 	.word	0x20000088
 800057c:	080005a5 	.word	0x080005a5

08000580 <st_Admin_DashboardInit>:
* @return       :   none.
* Note			    :   none.
======================================================================================================================
*/
void st_Admin_DashboardInit(void)
{  
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /*Enable the required clocks*/
  Peripheral_Clock_Init();
 8000584:	f7ff fe40 	bl	8000208 <Peripheral_Clock_Init>
 
  LCD_Init();
 8000588:	f000 fc1a 	bl	8000dc0 <LCD_Init>
  Keypad_Init();
 800058c:	f000 fae4 	bl	8000b58 <Keypad_Init>

 
  /*Set the next state*/
  Admin_Dashboard_State = st_Admin_InitialMessage;
 8000590:	4b02      	ldr	r3, [pc, #8]	; (800059c <st_Admin_DashboardInit+0x1c>)
 8000592:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <st_Admin_DashboardInit+0x20>)
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000088 	.word	0x20000088
 80005a0:	080005a5 	.word	0x080005a5

080005a4 <st_Admin_InitialMessage>:
* @brief		  :   Function to display the initial welcome message to the user.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_InitialMessage(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    /*Print the initial message*/
    LCD_Clear_Screen();
 80005a8:	f000 fdb4 	bl	8001114 <LCD_Clear_Screen>
    
    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
 80005ac:	2104      	movs	r1, #4
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fd68 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Press '*'"));
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <st_Admin_InitialMessage+0x30>)
 80005b6:	f000 fd51 	bl	800105c <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 4);
 80005ba:	2104      	movs	r1, #4
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 fd61 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("to Login"));
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <st_Admin_InitialMessage+0x34>)
 80005c4:	f000 fd4a 	bl	800105c <LCD_Send_String>

    /*Set the next state*/
    Admin_Dashboard_State = st_Admin_GetUserInput;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <st_Admin_InitialMessage+0x38>)
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <st_Admin_InitialMessage+0x3c>)
 80005cc:	601a      	str	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800162c 	.word	0x0800162c
 80005d8:	08001638 	.word	0x08001638
 80005dc:	20000088 	.word	0x20000088
 80005e0:	080005e5 	.word	0x080005e5

080005e4 <st_Admin_GetUserInput>:
* @brief		  :   Function to get the user action.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetUserInput(void)
{   
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    pressedKey = Keypad_Get_Char();
 80005e8:	f000 fafe 	bl	8000be8 <Keypad_Get_Char>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <st_Admin_GetUserInput+0x2c>)
 80005f2:	701a      	strb	r2, [r3, #0]

    /*Set the next state*/
    if(pressedKey == '*')
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <st_Admin_GetUserInput+0x2c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b2a      	cmp	r3, #42	; 0x2a
 80005fa:	d103      	bne.n	8000604 <st_Admin_GetUserInput+0x20>
    {
        Admin_Dashboard_State = st_Admin_LoginMessage;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <st_Admin_GetUserInput+0x30>)
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <st_Admin_GetUserInput+0x34>)
 8000600:	601a      	str	r2, [r3, #0]
    }else{
        Admin_Dashboard_State = st_Admin_GetUserInput;
    }
}
 8000602:	e002      	b.n	800060a <st_Admin_GetUserInput+0x26>
        Admin_Dashboard_State = st_Admin_GetUserInput;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <st_Admin_GetUserInput+0x30>)
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <st_Admin_GetUserInput+0x38>)
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000034 	.word	0x20000034
 8000614:	20000088 	.word	0x20000088
 8000618:	08000621 	.word	0x08000621
 800061c:	080005e5 	.word	0x080005e5

08000620 <st_Admin_LoginMessage>:
* @brief		  :   Function to get the user action.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_LoginMessage(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    /*Print the login message*/
    LCD_Clear_Screen();
 8000624:	f000 fd76 	bl	8001114 <LCD_Clear_Screen>

    LCD_Send_String(stringfy("UserID:"));
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <st_Admin_LoginMessage+0x3c>)
 800062a:	f000 fd17 	bl	800105c <LCD_Send_String>
    LCD_Cursor_XY(LCD_SECOND_LINE, 0);
 800062e:	2100      	movs	r1, #0
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fd27 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Password:"));
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <st_Admin_LoginMessage+0x40>)
 8000638:	f000 fd10 	bl	800105c <LCD_Send_String>

    if(loginAttemptsCounter > 1)
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <st_Admin_LoginMessage+0x44>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d906      	bls.n	8000652 <st_Admin_LoginMessage+0x32>
    {
      LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000644:	2100      	movs	r1, #0
 8000646:	2003      	movs	r0, #3
 8000648:	f000 fd1c 	bl	8001084 <LCD_Cursor_XY>
      LCD_Send_String(stringfy("Wrong Login Info"));
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <st_Admin_LoginMessage+0x48>)
 800064e:	f000 fd05 	bl	800105c <LCD_Send_String>
    }
    /*Set next state*/
    Admin_Dashboard_State = st_Admin_GetUserID;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <st_Admin_LoginMessage+0x4c>)
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <st_Admin_LoginMessage+0x50>)
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08001644 	.word	0x08001644
 8000660:	0800164c 	.word	0x0800164c
 8000664:	20000014 	.word	0x20000014
 8000668:	08001658 	.word	0x08001658
 800066c:	20000088 	.word	0x20000088
 8000670:	08000675 	.word	0x08000675

08000674 <st_Admin_GetUserID>:
* @brief		  :   Function to get the user input for the userID.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetUserID(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    LCD_Cursor_XY(LCD_FIRST_LINE, 7 + userInputCount);
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <st_Admin_GetUserID+0x74>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3307      	adds	r3, #7
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fcfe 	bl	8001084 <LCD_Cursor_XY>

    pressedKey = Keypad_Get_Char();
 8000688:	f000 faae 	bl	8000be8 <Keypad_Get_Char>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <st_Admin_GetUserID+0x78>)
 8000692:	701a      	strb	r2, [r3, #0]

    /*Set the next state*/
    if(pressedKey != NULL_CHAR)
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <st_Admin_GetUserID+0x78>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b4e      	cmp	r3, #78	; 0x4e
 800069a:	d00f      	beq.n	80006bc <st_Admin_GetUserID+0x48>
    {
        LCD_Send_Char(pressedKey);
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <st_Admin_GetUserID+0x78>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fc63 	bl	8000f6c <LCD_Send_Char>
        Glob_userIDinput[userInputCount++] = pressedKey;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <st_Admin_GetUserID+0x74>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	b2d1      	uxtb	r1, r2
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <st_Admin_GetUserID+0x74>)
 80006b0:	7011      	strb	r1, [r2, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <st_Admin_GetUserID+0x78>)
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <st_Admin_GetUserID+0x7c>)
 80006ba:	5499      	strb	r1, [r3, r2]
    }else{
        
    }

    if(userInputCount >= ADMIN_USERID_SIZE)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <st_Admin_GetUserID+0x74>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d90c      	bls.n	80006de <st_Admin_GetUserID+0x6a>
    {
        Glob_userIDinput[userInputCount] = '\0';
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <st_Admin_GetUserID+0x74>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <st_Admin_GetUserID+0x7c>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <st_Admin_GetUserID+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]

        /*Set next state*/
        Admin_Dashboard_State = st_Admin_GetUserPassword;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <st_Admin_GetUserID+0x80>)
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <st_Admin_GetUserID+0x84>)
 80006da:	601a      	str	r2, [r3, #0]
    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_GetUserID;
    }
}
 80006dc:	e002      	b.n	80006e4 <st_Admin_GetUserID+0x70>
        Admin_Dashboard_State = st_Admin_GetUserID;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <st_Admin_GetUserID+0x80>)
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <st_Admin_GetUserID+0x88>)
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000035 	.word	0x20000035
 80006ec:	20000034 	.word	0x20000034
 80006f0:	20000038 	.word	0x20000038
 80006f4:	20000088 	.word	0x20000088
 80006f8:	08000701 	.word	0x08000701
 80006fc:	08000675 	.word	0x08000675

08000700 <st_Admin_GetUserPassword>:
* @brief		  :   Function to get the user input for the password.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetUserPassword(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    LCD_Cursor_XY(LCD_SECOND_LINE, 9 + userInputCount);
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <st_Admin_GetUserPassword+0x70>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	3309      	adds	r3, #9
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fcb8 	bl	8001084 <LCD_Cursor_XY>
    
    pressedKey = Keypad_Get_Char();
 8000714:	f000 fa68 	bl	8000be8 <Keypad_Get_Char>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <st_Admin_GetUserPassword+0x74>)
 800071e:	701a      	strb	r2, [r3, #0]

    /*Set the next state*/
    if(pressedKey != NULL_CHAR)
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <st_Admin_GetUserPassword+0x74>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b4e      	cmp	r3, #78	; 0x4e
 8000726:	d00d      	beq.n	8000744 <st_Admin_GetUserPassword+0x44>
    {   
        LCD_Send_Char('*');
 8000728:	202a      	movs	r0, #42	; 0x2a
 800072a:	f000 fc1f 	bl	8000f6c <LCD_Send_Char>
        Glob_passwordinput[userInputCount++] = pressedKey;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <st_Admin_GetUserPassword+0x70>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	b2d1      	uxtb	r1, r2
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <st_Admin_GetUserPassword+0x70>)
 8000738:	7011      	strb	r1, [r2, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <st_Admin_GetUserPassword+0x74>)
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <st_Admin_GetUserPassword+0x78>)
 8000742:	5499      	strb	r1, [r3, r2]
    }else{
        
    }

    if(userInputCount >= ADMIN_PASSWORD_SIZE)
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <st_Admin_GetUserPassword+0x70>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d90c      	bls.n	8000766 <st_Admin_GetUserPassword+0x66>
    {
        Glob_passwordinput[userInputCount] = '\0';
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <st_Admin_GetUserPassword+0x70>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <st_Admin_GetUserPassword+0x78>)
 8000754:	2100      	movs	r1, #0
 8000756:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <st_Admin_GetUserPassword+0x70>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]

        /*Set next state*/
        Admin_Dashboard_State = st_Admin_CheckLoginInfo;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <st_Admin_GetUserPassword+0x7c>)
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <st_Admin_GetUserPassword+0x80>)
 8000762:	601a      	str	r2, [r3, #0]
    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_GetUserPassword;
    }
}
 8000764:	e002      	b.n	800076c <st_Admin_GetUserPassword+0x6c>
        Admin_Dashboard_State = st_Admin_GetUserPassword;
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <st_Admin_GetUserPassword+0x7c>)
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <st_Admin_GetUserPassword+0x84>)
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000035 	.word	0x20000035
 8000774:	20000034 	.word	0x20000034
 8000778:	20000040 	.word	0x20000040
 800077c:	20000088 	.word	0x20000088
 8000780:	08000789 	.word	0x08000789
 8000784:	08000701 	.word	0x08000701

08000788 <st_Admin_CheckLoginInfo>:
* @brief		  :   Function to check if the given login info is valid or not.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_CheckLoginInfo(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  uint8 validInfo = INVALID_LOGIN_INFO;
 800078e:	2300      	movs	r3, #0
 8000790:	71fb      	strb	r3, [r7, #7]

  uint8 i;
  for(i = 0; i < NUMBER_OF_ADMINS; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	71bb      	strb	r3, [r7, #6]
 8000796:	e022      	b.n	80007de <st_Admin_CheckLoginInfo+0x56>
  {
     if(!strcmp((const sint8 *)Glob_adminsList[i].adminUserID, (const sint8 *)Glob_userIDinput) && 
 8000798:	79ba      	ldrb	r2, [r7, #6]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <st_Admin_CheckLoginInfo+0xa0>)
 80007a4:	4413      	add	r3, r2
 80007a6:	4921      	ldr	r1, [pc, #132]	; (800082c <st_Admin_CheckLoginInfo+0xa4>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fce1 	bl	8000170 <strcmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d111      	bne.n	80007d8 <st_Admin_CheckLoginInfo+0x50>
        !strcmp((const sint8 *)Glob_adminsList[i].adminPassword, (const sint8 *)Glob_passwordinput)) 
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	4613      	mov	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <st_Admin_CheckLoginInfo+0xa0>)
 80007c0:	4413      	add	r3, r2
 80007c2:	3305      	adds	r3, #5
 80007c4:	491a      	ldr	r1, [pc, #104]	; (8000830 <st_Admin_CheckLoginInfo+0xa8>)
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fcd2 	bl	8000170 <strcmp>
 80007cc:	4603      	mov	r3, r0
     if(!strcmp((const sint8 *)Glob_adminsList[i].adminUserID, (const sint8 *)Glob_userIDinput) && 
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d102      	bne.n	80007d8 <st_Admin_CheckLoginInfo+0x50>
     {
        validInfo = VALID_LOGIN_INFO;
 80007d2:	2301      	movs	r3, #1
 80007d4:	71fb      	strb	r3, [r7, #7]
        break;
 80007d6:	e005      	b.n	80007e4 <st_Admin_CheckLoginInfo+0x5c>
  for(i = 0; i < NUMBER_OF_ADMINS; i++)
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	3301      	adds	r3, #1
 80007dc:	71bb      	strb	r3, [r7, #6]
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d9d9      	bls.n	8000798 <st_Admin_CheckLoginInfo+0x10>
     }else{

     }
  }

  if(validInfo == VALID_LOGIN_INFO)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d106      	bne.n	80007f8 <st_Admin_CheckLoginInfo+0x70>
  {
    loginAttemptsCounter = 1;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <st_Admin_CheckLoginInfo+0xac>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]

    /*Set next state*/
    Admin_Dashboard_State = st_Admin_ShowAdminOptions;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <st_Admin_CheckLoginInfo+0xb0>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <st_Admin_CheckLoginInfo+0xb4>)
 80007f4:	601a      	str	r2, [r3, #0]

        Admin_Dashboard_State = st_Admin_LoginTimeout;
    }
  }

}
 80007f6:	e013      	b.n	8000820 <st_Admin_CheckLoginInfo+0x98>
    if(loginAttemptsCounter < ADMIN_MAX_LOGIN_ATTEMPTS)
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <st_Admin_CheckLoginInfo+0xac>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d809      	bhi.n	8000814 <st_Admin_CheckLoginInfo+0x8c>
        loginAttemptsCounter++;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <st_Admin_CheckLoginInfo+0xac>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <st_Admin_CheckLoginInfo+0xac>)
 800080a:	701a      	strb	r2, [r3, #0]
        Admin_Dashboard_State = st_Admin_LoginMessage;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <st_Admin_CheckLoginInfo+0xb0>)
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <st_Admin_CheckLoginInfo+0xb8>)
 8000810:	601a      	str	r2, [r3, #0]
}
 8000812:	e005      	b.n	8000820 <st_Admin_CheckLoginInfo+0x98>
        loginAttemptsCounter = 1;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <st_Admin_CheckLoginInfo+0xac>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
        Admin_Dashboard_State = st_Admin_LoginTimeout;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <st_Admin_CheckLoginInfo+0xb0>)
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <st_Admin_CheckLoginInfo+0xbc>)
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000038 	.word	0x20000038
 8000830:	20000040 	.word	0x20000040
 8000834:	20000014 	.word	0x20000014
 8000838:	20000088 	.word	0x20000088
 800083c:	080008a5 	.word	0x080008a5
 8000840:	08000621 	.word	0x08000621
 8000844:	08000849 	.word	0x08000849

08000848 <st_Admin_LoginTimeout>:
* @brief		  : Timeout the user from tying to login after passing the maximum number of allowed login attempts.
* @note			  : The only way to get out of this state is through the SYSTICK timer handler.
======================================================================================================================
*/
void st_Admin_LoginTimeout(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
   LCD_Clear_Screen();
 800084c:	f000 fc62 	bl	8001114 <LCD_Clear_Screen>

   LCD_Cursor_XY(LCD_SECOND_LINE, 2);
 8000850:	2102      	movs	r1, #2
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fc16 	bl	8001084 <LCD_Cursor_XY>
   LCD_Send_String(stringfy("Try again in"));
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <st_Admin_LoginTimeout+0x38>)
 800085a:	f000 fbff 	bl	800105c <LCD_Send_String>
   LCD_Cursor_XY(LCD_THIRD_LINE, 3);
 800085e:	2103      	movs	r1, #3
 8000860:	2002      	movs	r0, #2
 8000862:	f000 fc0f 	bl	8001084 <LCD_Cursor_XY>
   LCD_Send_String(stringfy("10 seconds"));
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <st_Admin_LoginTimeout+0x3c>)
 8000868:	f000 fbf8 	bl	800105c <LCD_Send_String>

   /*Start the timer*/
   MCAL_SYST_SetIntervalPeriodic(2000000UL, SYSTICK_Callback);
 800086c:	4906      	ldr	r1, [pc, #24]	; (8000888 <st_Admin_LoginTimeout+0x40>)
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <st_Admin_LoginTimeout+0x44>)
 8000870:	f000 fdf4 	bl	800145c <MCAL_SYST_SetIntervalPeriodic>

   Admin_Dashboard_State = st_Admin_Idle;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <st_Admin_LoginTimeout+0x48>)
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <st_Admin_LoginTimeout+0x4c>)
 8000878:	601a      	str	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	0800166c 	.word	0x0800166c
 8000884:	0800167c 	.word	0x0800167c
 8000888:	08000545 	.word	0x08000545
 800088c:	001e8480 	.word	0x001e8480
 8000890:	20000088 	.word	0x20000088
 8000894:	08000899 	.word	0x08000899

08000898 <st_Admin_Idle>:
* @brief	    : Function to make the ECU go into idle mode.
* @note			  :
======================================================================================================================
*/
void st_Admin_Idle(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <st_Admin_ShowAdminOptions>:
* @brief		  :   Function to get display the available admin operations on the LCD screen.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_ShowAdminOptions(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    LCD_Clear_Screen();
 80008a8:	f000 fc34 	bl	8001114 <LCD_Clear_Screen>

    LCD_Send_String(stringfy("1.Add new ID"));
 80008ac:	480e      	ldr	r0, [pc, #56]	; (80008e8 <st_Admin_ShowAdminOptions+0x44>)
 80008ae:	f000 fbd5 	bl	800105c <LCD_Send_String>
    LCD_Cursor_XY(LCD_SECOND_LINE, 0);
 80008b2:	2100      	movs	r1, #0
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fbe5 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("2.Remove an ID"));
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <st_Admin_ShowAdminOptions+0x48>)
 80008bc:	f000 fbce 	bl	800105c <LCD_Send_String>
    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
 80008c0:	2100      	movs	r1, #0
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 fbde 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("3.Show IDs List"));
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <st_Admin_ShowAdminOptions+0x4c>)
 80008ca:	f000 fbc7 	bl	800105c <LCD_Send_String>
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 fbd7 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("'*' to logout"));
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <st_Admin_ShowAdminOptions+0x50>)
 80008d8:	f000 fbc0 	bl	800105c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_GetAdminOption;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <st_Admin_ShowAdminOptions+0x54>)
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <st_Admin_ShowAdminOptions+0x58>)
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08001688 	.word	0x08001688
 80008ec:	08001698 	.word	0x08001698
 80008f0:	080016a8 	.word	0x080016a8
 80008f4:	080016b8 	.word	0x080016b8
 80008f8:	20000088 	.word	0x20000088
 80008fc:	08000901 	.word	0x08000901

08000900 <st_Admin_GetAdminOption>:
* @brief		  :   Function to get the required action to be done from the user.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetAdminOption(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  pressedKey = Keypad_Get_Char();
 8000904:	f000 f970 	bl	8000be8 <Keypad_Get_Char>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <st_Admin_GetAdminOption+0x7c>)
 800090e:	701a      	strb	r2, [r3, #0]

  switch (pressedKey)
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <st_Admin_GetAdminOption+0x7c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3b2a      	subs	r3, #42	; 0x2a
 8000916:	2b09      	cmp	r3, #9
 8000918:	d828      	bhi.n	800096c <st_Admin_GetAdminOption+0x6c>
 800091a:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <st_Admin_GetAdminOption+0x20>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	08000965 	.word	0x08000965
 8000924:	0800096d 	.word	0x0800096d
 8000928:	0800096d 	.word	0x0800096d
 800092c:	0800096d 	.word	0x0800096d
 8000930:	0800096d 	.word	0x0800096d
 8000934:	0800096d 	.word	0x0800096d
 8000938:	0800096d 	.word	0x0800096d
 800093c:	08000949 	.word	0x08000949
 8000940:	08000951 	.word	0x08000951
 8000944:	08000959 	.word	0x08000959
  {
  case ADMIN_ADD_ID:
    Admin_Dashboard_State = st_Admin_DisplayAddNewIDMessage;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <st_Admin_GetAdminOption+0x80>)
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <st_Admin_GetAdminOption+0x84>)
 800094c:	601a      	str	r2, [r3, #0]
    break;
 800094e:	e00e      	b.n	800096e <st_Admin_GetAdminOption+0x6e>
  case ADMIN_REMOVE_ID:
    Admin_Dashboard_State = st_Admin_DisplayRemoveIDMessage;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <st_Admin_GetAdminOption+0x80>)
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <st_Admin_GetAdminOption+0x88>)
 8000954:	601a      	str	r2, [r3, #0]
    break;
 8000956:	e00a      	b.n	800096e <st_Admin_GetAdminOption+0x6e>
  case ADMIN_SHOW_IDS_LIST:
    LCD_Clear_Screen();
 8000958:	f000 fbdc 	bl	8001114 <LCD_Clear_Screen>
    Admin_Dashboard_State = st_Admin_ShowIDsList;   
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <st_Admin_GetAdminOption+0x80>)
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <st_Admin_GetAdminOption+0x8c>)
 8000960:	601a      	str	r2, [r3, #0]
    break;
 8000962:	e004      	b.n	800096e <st_Admin_GetAdminOption+0x6e>
  case ADMIN_LOGOUT:
    Admin_Dashboard_State = st_Admin_InitialMessage;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <st_Admin_GetAdminOption+0x80>)
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <st_Admin_GetAdminOption+0x90>)
 8000968:	601a      	str	r2, [r3, #0]
    break;
 800096a:	e000      	b.n	800096e <st_Admin_GetAdminOption+0x6e>
  
  default:
    break;
 800096c:	bf00      	nop
  }

  currentOperation = pressedKey;
 800096e:	4b03      	ldr	r3, [pc, #12]	; (800097c <st_Admin_GetAdminOption+0x7c>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <st_Admin_GetAdminOption+0x94>)
 8000974:	701a      	strb	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000034 	.word	0x20000034
 8000980:	20000088 	.word	0x20000088
 8000984:	0800026d 	.word	0x0800026d
 8000988:	080004ed 	.word	0x080004ed
 800098c:	08000ad1 	.word	0x08000ad1
 8000990:	080005a5 	.word	0x080005a5
 8000994:	20000045 	.word	0x20000045

08000998 <st_Admin_AddNewID>:
* @brief		  :   Function to add a new authorized ID to the garage.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_AddNewID(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    LCD_Cursor_XY(LCD_FIRST_LINE, 9 + userInputCount);
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <st_Admin_AddNewID+0x88>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	3309      	adds	r3, #9
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fb6c 	bl	8001084 <LCD_Cursor_XY>
    
    pressedKey = Keypad_Get_Char();
 80009ac:	f000 f91c 	bl	8000be8 <Keypad_Get_Char>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <st_Admin_AddNewID+0x8c>)
 80009b6:	701a      	strb	r2, [r3, #0]

    if(pressedKey != NULL_CHAR)
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <st_Admin_AddNewID+0x8c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b4e      	cmp	r3, #78	; 0x4e
 80009be:	d011      	beq.n	80009e4 <st_Admin_AddNewID+0x4c>
    {   
        LCD_Send_Char(pressedKey);
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <st_Admin_AddNewID+0x8c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fad1 	bl	8000f6c <LCD_Send_Char>
        Glob_tempDriverIDinput[userInputCount] = pressedKey;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <st_Admin_AddNewID+0x88>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <st_Admin_AddNewID+0x8c>)
 80009d2:	7819      	ldrb	r1, [r3, #0]
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <st_Admin_AddNewID+0x90>)
 80009d6:	5499      	strb	r1, [r3, r2]
        userInputCount++;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <st_Admin_AddNewID+0x88>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <st_Admin_AddNewID+0x88>)
 80009e2:	701a      	strb	r2, [r3, #0]
    }else{
        
    }

    if(userInputCount >= AUTHORIZED_ID_SIZE)
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <st_Admin_AddNewID+0x88>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d914      	bls.n	8000a16 <st_Admin_AddNewID+0x7e>
    {
        Glob_tempDriverIDinput[userInputCount] = '\0';
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <st_Admin_AddNewID+0x88>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <st_Admin_AddNewID+0x90>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <st_Admin_AddNewID+0x88>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]

        /*If there is no registerd IDs in the system no need to check if the ID is repeated*/
        if(Glob_AuthIDsCount == 0)
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <st_Admin_AddNewID+0x94>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d103      	bne.n	8000a0e <st_Admin_AddNewID+0x76>
        {
          /*Set next state*/
          Admin_Dashboard_State = st_Admin_AddedIDsuccessfully;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <st_Admin_AddNewID+0x98>)
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <st_Admin_AddNewID+0x9c>)
 8000a0a:	601a      	str	r2, [r3, #0]

    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_AddNewID;
    }
}
 8000a0c:	e006      	b.n	8000a1c <st_Admin_AddNewID+0x84>
          Admin_Dashboard_State = st_Admin_CheckRepeatedID;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <st_Admin_AddNewID+0x98>)
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <st_Admin_AddNewID+0xa0>)
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	e002      	b.n	8000a1c <st_Admin_AddNewID+0x84>
        Admin_Dashboard_State = st_Admin_AddNewID;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <st_Admin_AddNewID+0x98>)
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <st_Admin_AddNewID+0xa4>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000035 	.word	0x20000035
 8000a24:	20000034 	.word	0x20000034
 8000a28:	20000048 	.word	0x20000048
 8000a2c:	20000060 	.word	0x20000060
 8000a30:	20000088 	.word	0x20000088
 8000a34:	080002c5 	.word	0x080002c5
 8000a38:	08000419 	.word	0x08000419
 8000a3c:	08000999 	.word	0x08000999

08000a40 <st_Admin_RemoveID>:
* @brief		  :   Function to remove an existing authorized ID from the garage.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_RemoveID(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
LCD_Cursor_XY(LCD_FIRST_LINE, 9 + userInputCount);
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	3309      	adds	r3, #9
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fb18 	bl	8001084 <LCD_Cursor_XY>
    
    pressedKey = Keypad_Get_Char();
 8000a54:	f000 f8c8 	bl	8000be8 <Keypad_Get_Char>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <st_Admin_RemoveID+0x7c>)
 8000a5e:	701a      	strb	r2, [r3, #0]

    if(pressedKey != NULL_CHAR)
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <st_Admin_RemoveID+0x7c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b4e      	cmp	r3, #78	; 0x4e
 8000a66:	d011      	beq.n	8000a8c <st_Admin_RemoveID+0x4c>
    {   
        LCD_Send_Char(pressedKey);
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <st_Admin_RemoveID+0x7c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fa7d 	bl	8000f6c <LCD_Send_Char>
        Glob_tempDriverIDinput[userInputCount] = pressedKey;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <st_Admin_RemoveID+0x7c>)
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <st_Admin_RemoveID+0x80>)
 8000a7e:	5499      	strb	r1, [r3, r2]
        userInputCount++;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000a8a:	701a      	strb	r2, [r3, #0]
    }else{
        
    }

    if(userInputCount >= AUTHORIZED_ID_SIZE)
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d90c      	bls.n	8000aae <st_Admin_RemoveID+0x6e>
    {
        Glob_tempDriverIDinput[userInputCount] = '\0';
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <st_Admin_RemoveID+0x80>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <st_Admin_RemoveID+0x78>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]

        Admin_Dashboard_State = st_Admin_CheckRepeatedID;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <st_Admin_RemoveID+0x84>)
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <st_Admin_RemoveID+0x88>)
 8000aaa:	601a      	str	r2, [r3, #0]
    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_AddNewID;
    }
}
 8000aac:	e002      	b.n	8000ab4 <st_Admin_RemoveID+0x74>
        Admin_Dashboard_State = st_Admin_AddNewID;
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <st_Admin_RemoveID+0x84>)
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <st_Admin_RemoveID+0x8c>)
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000035 	.word	0x20000035
 8000abc:	20000034 	.word	0x20000034
 8000ac0:	20000048 	.word	0x20000048
 8000ac4:	20000088 	.word	0x20000088
 8000ac8:	08000419 	.word	0x08000419
 8000acc:	08000999 	.word	0x08000999

08000ad0 <st_Admin_ShowIDsList>:
* @brief		  :   Function to show all the authorized IDs in the system.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_ShowIDsList(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  static uint8 printedIDcounter = 0;

  if(Glob_AuthIDsCount > 0)
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <st_Admin_ShowIDsList+0x68>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d011      	beq.n	8000b00 <st_Admin_ShowIDsList+0x30>
  {
    LCD_Send_String(Glob_DriversIDsList[printedIDcounter]);
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <st_Admin_ShowIDsList+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <st_Admin_ShowIDsList+0x70>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fab8 	bl	800105c <LCD_Send_String>
    LCD_Send_Char(',');
 8000aec:	202c      	movs	r0, #44	; 0x2c
 8000aee:	f000 fa3d 	bl	8000f6c <LCD_Send_Char>

    printedIDcounter++;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <st_Admin_ShowIDsList+0x6c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <st_Admin_ShowIDsList+0x6c>)
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e002      	b.n	8000b06 <st_Admin_ShowIDsList+0x36>
  }else{

    LCD_Send_String(stringfy("List Empty"));
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <st_Admin_ShowIDsList+0x74>)
 8000b02:	f000 faab 	bl	800105c <LCD_Send_String>
  }


  if(printedIDcounter >= Glob_AuthIDsCount)
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <st_Admin_ShowIDsList+0x6c>)
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <st_Admin_ShowIDsList+0x68>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d30d      	bcc.n	8000b2e <st_Admin_ShowIDsList+0x5e>
  {
    printedIDcounter = 0;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <st_Admin_ShowIDsList+0x6c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]

    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f000 fab2 	bl	8001084 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("main menu => '*'"));
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <st_Admin_ShowIDsList+0x78>)
 8000b22:	f000 fa9b 	bl	800105c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <st_Admin_ShowIDsList+0x7c>)
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <st_Admin_ShowIDsList+0x80>)
 8000b2a:	601a      	str	r2, [r3, #0]
  }else{

    Admin_Dashboard_State = st_Admin_ShowIDsList;
  }
}
 8000b2c:	e002      	b.n	8000b34 <st_Admin_ShowIDsList+0x64>
    Admin_Dashboard_State = st_Admin_ShowIDsList;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <st_Admin_ShowIDsList+0x7c>)
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <st_Admin_ShowIDsList+0x84>)
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000060 	.word	0x20000060
 8000b3c:	20000063 	.word	0x20000063
 8000b40:	2000004c 	.word	0x2000004c
 8000b44:	080016c8 	.word	0x080016c8
 8000b48:	080015bc 	.word	0x080015bc
 8000b4c:	20000088 	.word	0x20000088
 8000b50:	0800023d 	.word	0x0800023d
 8000b54:	08000ad1 	.word	0x08000ad1

08000b58 <Keypad_Init>:
 * @return_value:   none.
 * Note			:   none.
============================================================================================================
 */
void Keypad_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	GPIO_Pin_Config_t config;

	/*Keypad row pins as input with pull-up resistance*/
	config.pinNumber = KEYPAD_ROW0;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000b62:	2308      	movs	r3, #8
 8000b64:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <Keypad_Init+0x8c>)
 8000b6c:	f000 fae4 	bl	8001138 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_ROW1;
 8000b70:	230d      	movs	r3, #13
 8000b72:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000b74:	2308      	movs	r3, #8
 8000b76:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4819      	ldr	r0, [pc, #100]	; (8000be4 <Keypad_Init+0x8c>)
 8000b7e:	f000 fadb 	bl	8001138 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_ROW2;
 8000b82:	230e      	movs	r3, #14
 8000b84:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000b86:	2308      	movs	r3, #8
 8000b88:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4815      	ldr	r0, [pc, #84]	; (8000be4 <Keypad_Init+0x8c>)
 8000b90:	f000 fad2 	bl	8001138 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_ROW3;
 8000b94:	230f      	movs	r3, #15
 8000b96:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4810      	ldr	r0, [pc, #64]	; (8000be4 <Keypad_Init+0x8c>)
 8000ba2:	f000 fac9 	bl	8001138 <MCAL_GPIO_Init>

	/*Keypad column pins as output*/
	config.pinNumber = KEYPAD_COL0;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000baa:	2301      	movs	r3, #1
 8000bac:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <Keypad_Init+0x8c>)
 8000bb4:	f000 fac0 	bl	8001138 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_COL1;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <Keypad_Init+0x8c>)
 8000bc6:	f000 fab7 	bl	8001138 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_COL2;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <Keypad_Init+0x8c>)
 8000bd8:	f000 faae 	bl	8001138 <MCAL_GPIO_Init>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <Keypad_Get_Char>:
                :   Or NULL_CHAR if no key was pressed.
 * Note			:   none.
============================================================================================================
 */
uint8 Keypad_Get_Char(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
	uint8 keypad_chars[] = KEYPAD_KEYS;
 8000bee:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <Keypad_Get_Char+0xf0>)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

 	uint8 KeypadRowPins[] = {KEYPAD_ROW0, KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3};
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <Keypad_Get_Char+0xf4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	607b      	str	r3, [r7, #4]
 	uint8 KeypadColPins[] = {KEYPAD_COL0, KEYPAD_COL1, KEYPAD_COL2};
 8000c00:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <Keypad_Get_Char+0xf8>)
 8000c02:	463b      	mov	r3, r7
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	4611      	mov	r1, r2
 8000c08:	8019      	strh	r1, [r3, #0]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	0c12      	lsrs	r2, r2, #16
 8000c0e:	701a      	strb	r2, [r3, #0]

	uint8 col, row, pressedKey;

	pressedKey = NULL_CHAR;
 8000c10:	234e      	movs	r3, #78	; 0x4e
 8000c12:	757b      	strb	r3, [r7, #21]
	for(col = 0; col <  KEYPAD_COL_SIZE; col++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]
 8000c18:	e053      	b.n	8000cc2 <Keypad_Get_Char+0xda>
	{
		/*High on all column pins */
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KEYPAD_COL0, GPIO_PIN_HIGH);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	210b      	movs	r1, #11
 8000c1e:	4831      	ldr	r0, [pc, #196]	; (8000ce4 <Keypad_Get_Char+0xfc>)
 8000c20:	f000 fafd 	bl	800121e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KEYPAD_COL1, GPIO_PIN_HIGH);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2109      	movs	r1, #9
 8000c28:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <Keypad_Get_Char+0xfc>)
 8000c2a:	f000 faf8 	bl	800121e <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KEYPAD_COL2, GPIO_PIN_HIGH);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2108      	movs	r1, #8
 8000c32:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <Keypad_Get_Char+0xfc>)
 8000c34:	f000 faf3 	bl	800121e <MCAL_GPIO_WritePin>

		/*Low output on the column to be tested.*/
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KeypadColPins[col], GPIO_PIN_LOW);
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	f107 0218 	add.w	r2, r7, #24
 8000c3e:	4413      	add	r3, r2
 8000c40:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <Keypad_Get_Char+0xfc>)
 8000c4c:	f000 fae7 	bl	800121e <MCAL_GPIO_WritePin>

		for(row = 0; row < KEYPAD_ROW_SIZE; row++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	75bb      	strb	r3, [r7, #22]
 8000c54:	e02c      	b.n	8000cb0 <Keypad_Get_Char+0xc8>
		{
			/*Loop on all the buttons in this coloumn to
            see if any of them dropped to ground*/
			if(MCAL_GPIO_ReadPin(KEYPAD_DATA_PORT, KeypadRowPins[row]) == GPIO_PIN_LOW)
 8000c56:	7dbb      	ldrb	r3, [r7, #22]
 8000c58:	f107 0218 	add.w	r2, r7, #24
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <Keypad_Get_Char+0xfc>)
 8000c68:	f000 fabd 	bl	80011e6 <MCAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11b      	bne.n	8000caa <Keypad_Get_Char+0xc2>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_DATA_PORT, KeypadRowPins[row]) == GPIO_PIN_LOW)
 8000c72:	bf00      	nop
 8000c74:	7dbb      	ldrb	r3, [r7, #22]
 8000c76:	f107 0218 	add.w	r2, r7, #24
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <Keypad_Get_Char+0xfc>)
 8000c86:	f000 faae 	bl	80011e6 <MCAL_GPIO_ReadPin>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f1      	beq.n	8000c74 <Keypad_Get_Char+0x8c>
				{

				}

				pressedKey = keypad_chars[(row * KEYPAD_COL_SIZE) + col];
 8000c90:	7dba      	ldrb	r2, [r7, #22]
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	441a      	add	r2, r3
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	f107 0218 	add.w	r2, r7, #24
 8000ca0:	4413      	add	r3, r2
 8000ca2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ca6:	757b      	strb	r3, [r7, #21]
				break;
 8000ca8:	e005      	b.n	8000cb6 <Keypad_Get_Char+0xce>
		for(row = 0; row < KEYPAD_ROW_SIZE; row++)
 8000caa:	7dbb      	ldrb	r3, [r7, #22]
 8000cac:	3301      	adds	r3, #1
 8000cae:	75bb      	strb	r3, [r7, #22]
 8000cb0:	7dbb      	ldrb	r3, [r7, #22]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d9cf      	bls.n	8000c56 <Keypad_Get_Char+0x6e>
			}
		}

		if(pressedKey != NULL_CHAR)
 8000cb6:	7d7b      	ldrb	r3, [r7, #21]
 8000cb8:	2b4e      	cmp	r3, #78	; 0x4e
 8000cba:	d106      	bne.n	8000cca <Keypad_Get_Char+0xe2>
	for(col = 0; col <  KEYPAD_COL_SIZE; col++)
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	75fb      	strb	r3, [r7, #23]
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d9a8      	bls.n	8000c1a <Keypad_Get_Char+0x32>
 8000cc8:	e000      	b.n	8000ccc <Keypad_Get_Char+0xe4>
		{
			break;
 8000cca:	bf00      	nop
		}
	}
	return pressedKey;
 8000ccc:	7d7b      	ldrb	r3, [r7, #21]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	080016d4 	.word	0x080016d4
 8000cdc:	080016e0 	.word	0x080016e0
 8000ce0:	080016e4 	.word	0x080016e4
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <_delay_ms>:
 * @return_value :	none.
 * Note			:	This isn't an accurate function.
============================================================================================================
 */
void _delay_ms(uint8 delay_Counter)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
	volatile uint8 i, j;
	for(i = 0; i < delay_Counter; i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e010      	b.n	8000d1a <_delay_ms+0x32>
	{
		for ( j = 0; j < 100; j++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73bb      	strb	r3, [r7, #14]
 8000cfc:	e004      	b.n	8000d08 <_delay_ms+0x20>
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	73bb      	strb	r3, [r7, #14]
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b63      	cmp	r3, #99	; 0x63
 8000d0e:	d9f6      	bls.n	8000cfe <_delay_ms+0x16>
	for(i = 0; i < delay_Counter; i++)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8e9      	bhi.n	8000cf8 <_delay_ms+0x10>
		{
		}
	}
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
	...

08000d30 <LCD_Enable_Pulse>:
 * @return_value :	none.
 * Note			:	none.
============================================================================================================
 */
void LCD_Enable_Pulse()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_HIGH);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2105      	movs	r1, #5
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <LCD_Enable_Pulse+0x24>)
 8000d3a:	f000 fa70 	bl	800121e <MCAL_GPIO_WritePin>
	_delay_ms(50);
 8000d3e:	2032      	movs	r0, #50	; 0x32
 8000d40:	f7ff ffd2 	bl	8000ce8 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2105      	movs	r1, #5
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <LCD_Enable_Pulse+0x24>)
 8000d4a:	f000 fa68 	bl	800121e <MCAL_GPIO_WritePin>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <Check_End_Of_Line>:
 * @return_value :	none.
 * Note			:	none.
============================================================================================================
 */
void Check_End_Of_Line()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <Check_End_Of_Line+0x60>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d913      	bls.n	8000d8c <Check_End_Of_Line+0x34>
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <Check_End_Of_Line+0x64>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d80f      	bhi.n	8000d8c <Check_End_Of_Line+0x34>
	{
		charCounter = 0;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <Check_End_Of_Line+0x60>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
		lineCounter++;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <Check_End_Of_Line+0x64>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <Check_End_Of_Line+0x64>)
 8000d7c:	701a      	strb	r2, [r3, #0]
		LCD_Cursor_XY(lineCounter, 0);
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <Check_End_Of_Line+0x64>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f97d 	bl	8001084 <LCD_Cursor_XY>
		LCD_Clear_Screen();
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
		charCounter = 0;
		lineCounter = 0;
	}
}
 8000d8a:	e012      	b.n	8000db2 <Check_End_Of_Line+0x5a>
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <Check_End_Of_Line+0x60>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d90e      	bls.n	8000db2 <Check_End_Of_Line+0x5a>
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <Check_End_Of_Line+0x64>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d10a      	bne.n	8000db2 <Check_End_Of_Line+0x5a>
		LCD_Clear_Screen();
 8000d9c:	f000 f9ba 	bl	8001114 <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	f000 f875 	bl	8000e90 <LCD_Send_Command>
		charCounter = 0;
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <Check_End_Of_Line+0x60>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
		lineCounter = 0;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <Check_End_Of_Line+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000064 	.word	0x20000064
 8000dbc:	20000065 	.word	0x20000065

08000dc0 <LCD_Init>:
 * @return_value :   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	/*Wait for the VCC to rise to the required value*/
	_delay_ms(20);
 8000dc4:	2014      	movs	r0, #20
 8000dc6:	f7ff ff8f 	bl	8000ce8 <_delay_ms>

	/*Set all CTRL bits as output*/
	config.pinNumber = LCD_RS_PIN;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <LCD_Init+0xc4>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <LCD_Init+0xc4>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
 8000dd6:	492b      	ldr	r1, [pc, #172]	; (8000e84 <LCD_Init+0xc4>)
 8000dd8:	482b      	ldr	r0, [pc, #172]	; (8000e88 <LCD_Init+0xc8>)
 8000dda:	f000 f9ad 	bl	8001138 <MCAL_GPIO_Init>

	config.pinNumber = LCD_EN_PIN;
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <LCD_Init+0xc4>)
 8000de0:	2205      	movs	r2, #5
 8000de2:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <LCD_Init+0xc4>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
 8000dea:	4926      	ldr	r1, [pc, #152]	; (8000e84 <LCD_Init+0xc4>)
 8000dec:	4826      	ldr	r0, [pc, #152]	; (8000e88 <LCD_Init+0xc8>)
 8000dee:	f000 f9a3 	bl	8001138 <MCAL_GPIO_Init>


	/*Select ins register, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2105      	movs	r1, #5
 8000df6:	4824      	ldr	r0, [pc, #144]	; (8000e88 <LCD_Init+0xc8>)
 8000df8:	f000 fa11 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_INS_REG);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <LCD_Init+0xc8>)
 8000e02:	f000 fa0c 	bl	800121e <MCAL_GPIO_WritePin>
	_delay_ms(15);
 8000e06:	200f      	movs	r0, #15
 8000e08:	f7ff ff6e 	bl	8000ce8 <_delay_ms>
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);

	LCD_Send_Command(LCD_FUNC_8BIT_2LINES);
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*In case of 4 bits mode the upper 4 pins of the port are output*/
	config.pinNumber = LCD_D4;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <LCD_Init+0xc4>)
 8000e0e:	220a      	movs	r2, #10
 8000e10:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <LCD_Init+0xc4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8000e18:	491a      	ldr	r1, [pc, #104]	; (8000e84 <LCD_Init+0xc4>)
 8000e1a:	481c      	ldr	r0, [pc, #112]	; (8000e8c <LCD_Init+0xcc>)
 8000e1c:	f000 f98c 	bl	8001138 <MCAL_GPIO_Init>
	
	config.pinNumber = LCD_D5;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <LCD_Init+0xc4>)
 8000e22:	220b      	movs	r2, #11
 8000e24:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <LCD_Init+0xc4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8000e2c:	4915      	ldr	r1, [pc, #84]	; (8000e84 <LCD_Init+0xc4>)
 8000e2e:	4817      	ldr	r0, [pc, #92]	; (8000e8c <LCD_Init+0xcc>)
 8000e30:	f000 f982 	bl	8001138 <MCAL_GPIO_Init>
	
	config.pinNumber = LCD_D6;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <LCD_Init+0xc4>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <LCD_Init+0xc4>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8000e40:	4910      	ldr	r1, [pc, #64]	; (8000e84 <LCD_Init+0xc4>)
 8000e42:	4812      	ldr	r0, [pc, #72]	; (8000e8c <LCD_Init+0xcc>)
 8000e44:	f000 f978 	bl	8001138 <MCAL_GPIO_Init>
	
	config.pinNumber = LCD_D7;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <LCD_Init+0xc4>)
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <LCD_Init+0xc4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8000e54:	490b      	ldr	r1, [pc, #44]	; (8000e84 <LCD_Init+0xc4>)
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LCD_Init+0xcc>)
 8000e58:	f000 f96e 	bl	8001138 <MCAL_GPIO_Init>

	_delay_ms(5);
 8000e5c:	2005      	movs	r0, #5
 8000e5e:	f7ff ff43 	bl	8000ce8 <_delay_ms>

	LCD_Send_Command(LCD_RETURN_HOME);
 8000e62:	2002      	movs	r0, #2
 8000e64:	f000 f814 	bl	8000e90 <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNC_4BIT_2LINES);
 8000e68:	2028      	movs	r0, #40	; 0x28
 8000e6a:	f000 f811 	bl	8000e90 <LCD_Send_Command>
#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
 8000e6e:	2006      	movs	r0, #6
 8000e70:	f000 f80e 	bl	8000e90 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000e74:	2080      	movs	r0, #128	; 0x80
 8000e76:	f000 f80b 	bl	8000e90 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISPLAY_ON_CURSOR_BLINK);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 f808 	bl	8000e90 <LCD_Send_Command>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000008c 	.word	0x2000008c
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	40010800 	.word	0x40010800

08000e90 <LCD_Send_Command>:
 * @return_value :   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Send_Command(uint8 command)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/

	/*Select ins register, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_INS_REG);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4831      	ldr	r0, [pc, #196]	; (8000f64 <LCD_Send_Command+0xd4>)
 8000ea0:	f000 f9bd 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	482e      	ldr	r0, [pc, #184]	; (8000f64 <LCD_Send_Command+0xd4>)
 8000eaa:	f000 f9b8 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(command, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the command upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(command, 4));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	111b      	asrs	r3, r3, #4
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	482a      	ldr	r0, [pc, #168]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000ec0:	f000 f9ad 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(command, 5));
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	115b      	asrs	r3, r3, #5
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	210b      	movs	r1, #11
 8000ed4:	4824      	ldr	r0, [pc, #144]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000ed6:	f000 f9a2 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(command, 6));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	119b      	asrs	r3, r3, #6
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	210c      	movs	r1, #12
 8000eea:	481f      	ldr	r0, [pc, #124]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000eec:	f000 f997 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(command, 7));
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	09db      	lsrs	r3, r3, #7
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	210f      	movs	r1, #15
 8000efa:	481b      	ldr	r0, [pc, #108]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000efc:	f000 f98f 	bl	800121e <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8000f00:	f7ff ff16 	bl	8000d30 <LCD_Enable_Pulse>

	/*Send the command lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(command, 0));
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	210a      	movs	r1, #10
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000f12:	f000 f984 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(command, 1));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	105b      	asrs	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	210b      	movs	r1, #11
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000f28:	f000 f979 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(command, 2));
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	109b      	asrs	r3, r3, #2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	210c      	movs	r1, #12
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000f3e:	f000 f96e 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(command, 3));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	210f      	movs	r1, #15
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <LCD_Send_Command+0xd8>)
 8000f54:	f000 f963 	bl	800121e <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8000f58:	f7ff feea 	bl	8000d30 <LCD_Enable_Pulse>
#endif
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40010800 	.word	0x40010800

08000f6c <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8 data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
 8000f76:	f7ff feef 	bl	8000d58 <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4834      	ldr	r0, [pc, #208]	; (8001050 <LCD_Send_Char+0xe4>)
 8000f80:	f000 f94d 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2105      	movs	r1, #5
 8000f88:	4831      	ldr	r0, [pc, #196]	; (8001050 <LCD_Send_Char+0xe4>)
 8000f8a:	f000 f948 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	111b      	asrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	210a      	movs	r1, #10
 8000f9e:	482d      	ldr	r0, [pc, #180]	; (8001054 <LCD_Send_Char+0xe8>)
 8000fa0:	f000 f93d 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	115b      	asrs	r3, r3, #5
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	210b      	movs	r1, #11
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <LCD_Send_Char+0xe8>)
 8000fb6:	f000 f932 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	119b      	asrs	r3, r3, #6
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	210c      	movs	r1, #12
 8000fca:	4822      	ldr	r0, [pc, #136]	; (8001054 <LCD_Send_Char+0xe8>)
 8000fcc:	f000 f927 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	09db      	lsrs	r3, r3, #7
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	210f      	movs	r1, #15
 8000fda:	481e      	ldr	r0, [pc, #120]	; (8001054 <LCD_Send_Char+0xe8>)
 8000fdc:	f000 f91f 	bl	800121e <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8000fe0:	f7ff fea6 	bl	8000d30 <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	210a      	movs	r1, #10
 8000ff0:	4818      	ldr	r0, [pc, #96]	; (8001054 <LCD_Send_Char+0xe8>)
 8000ff2:	f000 f914 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	105b      	asrs	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	210b      	movs	r1, #11
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <LCD_Send_Char+0xe8>)
 8001008:	f000 f909 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	109b      	asrs	r3, r3, #2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	210c      	movs	r1, #12
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LCD_Send_Char+0xe8>)
 800101e:	f000 f8fe 	bl	800121e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	10db      	asrs	r3, r3, #3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	210f      	movs	r1, #15
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <LCD_Send_Char+0xe8>)
 8001034:	f000 f8f3 	bl	800121e <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8001038:	f7ff fe7a 	bl	8000d30 <LCD_Enable_Pulse>
#endif
	charCounter++;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <LCD_Send_Char+0xec>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <LCD_Send_Char+0xec>)
 8001046:	701a      	strb	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010c00 	.word	0x40010c00
 8001054:	40010800 	.word	0x40010800
 8001058:	20000064 	.word	0x20000064

0800105c <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8* string)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	while(*string)
 8001064:	e006      	b.n	8001074 <LCD_Send_String+0x18>
	{
		LCD_Send_Char(*string++);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff7c 	bl	8000f6c <LCD_Send_Char>
	while(*string)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f4      	bne.n	8001066 <LCD_Send_String+0xa>
	}
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <LCD_Cursor_XY>:
 * @return_value:   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Cursor_XY(uint8 line, uint8 col)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	/*Check if the arguments are in the allowed range*/
	if(((col >= 0) && (col < LCD_WIDTH)) && ((line >= 0) && (line < LCD_HEIGHT)))
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	d833      	bhi.n	8001102 <LCD_Cursor_XY+0x7e>
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d830      	bhi.n	8001102 <LCD_Cursor_XY+0x7e>
	{
		switch (line)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d826      	bhi.n	80010f4 <LCD_Cursor_XY+0x70>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <LCD_Cursor_XY+0x28>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010cb 	.word	0x080010cb
 80010b4:	080010d9 	.word	0x080010d9
 80010b8:	080010e7 	.word	0x080010e7
		{
		case LCD_FIRST_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW + col);
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	3b80      	subs	r3, #128	; 0x80
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fee4 	bl	8000e90 <LCD_Send_Command>
			break;
 80010c8:	e015      	b.n	80010f6 <LCD_Cursor_XY+0x72>
		case LCD_SECOND_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW + col);
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	3b40      	subs	r3, #64	; 0x40
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fedd 	bl	8000e90 <LCD_Send_Command>
			break;
 80010d6:	e00e      	b.n	80010f6 <LCD_Cursor_XY+0x72>
		case LCD_THIRD_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW + col);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	3b70      	subs	r3, #112	; 0x70
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fed6 	bl	8000e90 <LCD_Send_Command>
			break;
 80010e4:	e007      	b.n	80010f6 <LCD_Cursor_XY+0x72>
		case LCD_FOURTH_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW + col);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	3b30      	subs	r3, #48	; 0x30
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fecf 	bl	8000e90 <LCD_Send_Command>
			break;
 80010f2:	e000      	b.n	80010f6 <LCD_Cursor_XY+0x72>

		default:
			break;
 80010f4:	bf00      	nop
		}

		lineCounter = line;
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <LCD_Cursor_XY+0x88>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	7013      	strb	r3, [r2, #0]
		charCounter = col;
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <LCD_Cursor_XY+0x8c>)
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	7013      	strb	r3, [r2, #0]
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000065 	.word	0x20000065
 8001110:	20000064 	.word	0x20000064

08001114 <LCD_Clear_Screen>:
 * @return_value :   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff feb9 	bl	8000e90 <LCD_Send_Command>
	charCounter = 0;
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <LCD_Clear_Screen+0x1c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
	lineCounter = 0;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <LCD_Clear_Screen+0x20>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000064 	.word	0x20000064
 8001134:	20000065 	.word	0x20000065

08001138 <MCAL_GPIO_Init>:
* Note			:   Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,
* 				:	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
*===============================================
*/
void MCAL_GPIO_Init(volatile GPIO_t* GPIOx ,GPIO_Pin_Config_t* pinConfig)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    /*
    Choose the correct control register based on the pin number
    CRL for pin(0 >> 7)
    CRH for pin(8 >> 15)
     */
    CTRL = (pinConfig->pinNumber < 8)? &(GPIOx->CRL) : &(GPIOx->CRH);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d801      	bhi.n	800114e <MCAL_GPIO_Init+0x16>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	e001      	b.n	8001152 <MCAL_GPIO_Init+0x1a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3304      	adds	r3, #4
 8001152:	60fb      	str	r3, [r7, #12]

    /*Get the needed shift for each pin as each pin takes 4 bits in the register*/
    shift = ((pinConfig->pinNumber % 8) * 4);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	72fb      	strb	r3, [r7, #11]


    *(CTRL) &= ~(0xF << shift);                /*Clear the bits assigned for the required pin number*/
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	7afa      	ldrb	r2, [r7, #11]
 800116a:	210f      	movs	r1, #15
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	601a      	str	r2, [r3, #0]

    /*Input pull-up and pull-down have the same configuration code*/
    if(pinConfig->pinMode == GPIO_MODE_INPUT_PD)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	885b      	ldrh	r3, [r3, #2]
 800117c:	2b10      	cmp	r3, #16
 800117e:	d114      	bne.n	80011aa <MCAL_GPIO_Init+0x72>
    {
        *(CTRL) |= (GPIO_MODE_INPUT_PU << shift);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7afa      	ldrb	r2, [r7, #11]
 8001186:	2108      	movs	r1, #8
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	431a      	orrs	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(GPIOx->ODR, pinConfig->pinNumber);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
 800119c:	2201      	movs	r2, #1
 800119e:	408a      	lsls	r2, r1
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	60da      	str	r2, [r3, #12]
        if(pinConfig->pinMode == GPIO_MODE_INPUT_PU)
        {
            SET_BIT(GPIOx->ODR, pinConfig->pinNumber);
        }
    }
}
 80011a8:	e018      	b.n	80011dc <MCAL_GPIO_Init+0xa4>
        *(CTRL) |= (pinConfig->pinMode << shift);  /*Set the mode*/
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	8852      	ldrh	r2, [r2, #2]
 80011b2:	4611      	mov	r1, r2
 80011b4:	7afa      	ldrb	r2, [r7, #11]
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	601a      	str	r2, [r3, #0]
        if(pinConfig->pinMode == GPIO_MODE_INPUT_PU)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	885b      	ldrh	r3, [r3, #2]
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d109      	bne.n	80011dc <MCAL_GPIO_Init+0xa4>
            SET_BIT(GPIOx->ODR, pinConfig->pinNumber);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	2201      	movs	r2, #1
 80011d4:	408a      	lsls	r2, r1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	60da      	str	r2, [r3, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <MCAL_GPIO_ReadPin>:
* @return_value :   Current pin status which can be a value of @ref GPIO_PIN_STATUS.
* Note			:   none.
*===============================================
*/
uint8 MCAL_GPIO_ReadPin(volatile GPIO_t* GPIOx, uint16 pinNumber)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]
    uint8 status;
    status = (READ_BIT(GPIOx->IDR, pinNumber))? (uint8)(GPIO_PIN_HIGH): (uint8)(GPIO_PIN_LOW);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	401a      	ands	r2, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	73fb      	strb	r3, [r7, #15]

    return status;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <MCAL_GPIO_WritePin>:
* @return_value :   none.
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePin(volatile GPIO_t* GPIOx, uint16 pinNumber, uint8 value)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]
 800122a:	4613      	mov	r3, r2
 800122c:	707b      	strb	r3, [r7, #1]
    if(value == GPIO_PIN_HIGH)
 800122e:	787b      	ldrb	r3, [r7, #1]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d109      	bne.n	8001248 <MCAL_GPIO_WritePin+0x2a>
    {
        SET_BIT(GPIOx->ODR, pinNumber);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	887a      	ldrh	r2, [r7, #2]
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60da      	str	r2, [r3, #12]
    }else{
        CLEAR_BIT(GPIOx->ODR, pinNumber);
    }
}
 8001246:	e009      	b.n	800125c <MCAL_GPIO_WritePin+0x3e>
        CLEAR_BIT(GPIOx->ODR, pinNumber);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	887a      	ldrh	r2, [r7, #2]
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	43d2      	mvns	r2, r2
 8001256:	401a      	ands	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	60da      	str	r2, [r3, #12]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
	...

08001268 <MCAL_RCC_GET_SYSCLK>:
* @return_value :   The system clock frequency.
* Note			:   none.
======================================================================================================================
*/
uint32 MCAL_RCC_GET_SYSCLK(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
	uint32 LOC_CLKFreq = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable
    */
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MCAL_RCC_GET_SYSCLK+0x40>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d007      	beq.n	8001290 <MCAL_RCC_GET_SYSCLK+0x28>
 8001280:	2b01      	cmp	r3, #1
 8001282:	d302      	bcc.n	800128a <MCAL_RCC_GET_SYSCLK+0x22>
 8001284:	2b02      	cmp	r3, #2
 8001286:	d006      	beq.n	8001296 <MCAL_RCC_GET_SYSCLK+0x2e>
 8001288:	e008      	b.n	800129c <MCAL_RCC_GET_SYSCLK+0x34>
	{
	case 0:

		LOC_CLKFreq = HSI_RC_Clk ;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MCAL_RCC_GET_SYSCLK+0x44>)
 800128c:	607b      	str	r3, [r7, #4]
		break ;
 800128e:	e005      	b.n	800129c <MCAL_RCC_GET_SYSCLK+0x34>

	case 1:

		/*todo need to calculate  it "HSE User Should Specify it"*/
		LOC_CLKFreq = HSE_Clock ;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MCAL_RCC_GET_SYSCLK+0x48>)
 8001292:	607b      	str	r3, [r7, #4]
		break ;
 8001294:	e002      	b.n	800129c <MCAL_RCC_GET_SYSCLK+0x34>

	case 2:

		/*todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX*/
		LOC_CLKFreq = 16000000 ;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MCAL_RCC_GET_SYSCLK+0x48>)
 8001298:	607b      	str	r3, [r7, #4]
		break ;
 800129a:	bf00      	nop

	}

	return LOC_CLKFreq;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	40021000 	.word	0x40021000
 80012ac:	007a1200 	.word	0x007a1200
 80012b0:	00f42400 	.word	0x00f42400

080012b4 <SPI1_IRQHandler>:
*               SPI ISR functions
*===============================================
*/

void SPI1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    if((SPI1->CR2 & SPI_IRQ_ERRIE) && ((SPI1->SR & SPI_SR_OVR) || (SPI1->SR & SPI_SR_MODF)))
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <SPI1_IRQHandler+0x70>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <SPI1_IRQHandler+0x2e>
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <SPI1_IRQHandler+0x70>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <SPI1_IRQHandler+0x28>
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <SPI1_IRQHandler+0x70>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <SPI1_IRQHandler+0x2e>
    {
        p_IRQ_callback_SPI1[SPI_IRQ_ERRIE >> 6]();
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <SPI1_IRQHandler+0x74>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4798      	blx	r3
    }

    if((SPI1->CR2 & SPI_IRQ_RXNEIE) && (SPI1->SR & SPI_SR_RXNE))
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <SPI1_IRQHandler+0x70>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d008      	beq.n	8001300 <SPI1_IRQHandler+0x4c>
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <SPI1_IRQHandler+0x70>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <SPI1_IRQHandler+0x4c>
    {
        p_IRQ_callback_SPI1[SPI_IRQ_RXNEIE >> 6]();
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <SPI1_IRQHandler+0x74>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4798      	blx	r3
    }
    
    if((SPI1->CR2 & SPI_IRQ_TXEIE) && (SPI1->SR & SPI_SR_TXE))
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <SPI1_IRQHandler+0x70>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <SPI1_IRQHandler+0x6a>
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SPI1_IRQHandler+0x70>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <SPI1_IRQHandler+0x6a>
    {
        p_IRQ_callback_SPI1[SPI_IRQ_TXEIE >> 6]();
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <SPI1_IRQHandler+0x74>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4798      	blx	r3
    }
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40013000 	.word	0x40013000
 8001328:	20000068 	.word	0x20000068

0800132c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    if((SPI2->CR2 & SPI_IRQ_ERRIE) && ((SPI2->SR & SPI_SR_OVR) || (SPI2->SR & SPI_SR_MODF)))
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <SPI2_IRQHandler+0x70>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00e      	beq.n	800135a <SPI2_IRQHandler+0x2e>
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <SPI2_IRQHandler+0x70>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <SPI2_IRQHandler+0x28>
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <SPI2_IRQHandler+0x70>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <SPI2_IRQHandler+0x2e>
    {
        p_IRQ_callback_SPI2[SPI_IRQ_ERRIE >> 6]();
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <SPI2_IRQHandler+0x74>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4798      	blx	r3
    }

    if((SPI2->CR2 & SPI_IRQ_RXNEIE) && (SPI2->SR & SPI_SR_RXNE))
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <SPI2_IRQHandler+0x70>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <SPI2_IRQHandler+0x4c>
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <SPI2_IRQHandler+0x70>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <SPI2_IRQHandler+0x4c>
    {
        p_IRQ_callback_SPI2[SPI_IRQ_RXNEIE >> 6]();
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <SPI2_IRQHandler+0x74>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4798      	blx	r3
    }
    
    if((SPI2->CR2 & SPI_IRQ_TXEIE) && (SPI2->SR & SPI_SR_TXE))
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <SPI2_IRQHandler+0x70>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <SPI2_IRQHandler+0x6a>
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SPI2_IRQHandler+0x70>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <SPI2_IRQHandler+0x6a>
    {
        p_IRQ_callback_SPI2[SPI_IRQ_TXEIE >> 6]();
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <SPI2_IRQHandler+0x74>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4798      	blx	r3
    }
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40003800 	.word	0x40003800
 80013a0:	20000074 	.word	0x20000074

080013a4 <MCAL_SYST_CalculateCLKFreq>:
===============================================
*       Local Functions
*===============================================
*/
static uint32 MCAL_SYST_CalculateCLKFreq(uint32 copy_TimeUnit)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    uint32 LOC_SYST_Clk = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    
    /*Calculates the clock of the systick timer*/
    #if SYST_CLKSRC == SYST_INTERNAL_CLK_DIV_1
        LOC_SYST_Clk = MCAL_RCC_GET_SYSCLK();
 80013b0:	f7ff ff5a 	bl	8001268 <MCAL_RCC_GET_SYSCLK>
 80013b4:	60f8      	str	r0, [r7, #12]
    #else
        #error "Please choose an acceptable clock source"
    #endif

    /*Divide by the time unit to avoid doing floating point operations*/
    LOC_SYST_Clk /= copy_TimeUnit;  
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]

    return LOC_SYST_Clk;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <MCAL_SYST_Init>:
* @return       :    E_OK on success, E_NOK on failure..
* @note			:   Actual timer duration is based on the clock frequency.
======================================================================================================================
*/
eStatus_t MCAL_SYST_Init(uint32 copy_ReloadVal)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    eStatus_t LOC_estatus = E_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
    
    if((SYST_ASSERT_RELOAD_VALUE(copy_ReloadVal)) &&
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013de:	d217      	bcs.n	8001410 <MCAL_SYST_Init+0x44>
       (SYST_ASSERT_CLK(SYST_CLKSRC)) && (SYST_ASSERT_TICKINT(SYST_TICKINT)))
    {
        /*Disable the systick timer*/
        MCAL_SYST_Stop();
 80013e0:	f000 f82e 	bl	8001440 <MCAL_SYST_Stop>
        
        /*1. Program reload value.*/
        SYST->RVR = copy_ReloadVal;
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <MCAL_SYST_Init+0x54>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6053      	str	r3, [r2, #4]
        
        /*2. Clear current value.
            A write of any value clears the field to 0,
            and also clears the SYST_CSR COUNTFLAG bit to 0.
        */
        SYST->CVR = 0;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MCAL_SYST_Init+0x54>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]

        /*3. Program Control and Status register.*/
        SYST->CSR |= (SYST->CSR & ~(SYST_CSR_CLKSRC_MASK | SYST_CSR_TICKINT_MASK)); /*Clear the CLKSRC and TICKINT bits*/
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MCAL_SYST_Init+0x54>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 0206 	bic.w	r2, r3, #6
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MCAL_SYST_Init+0x54>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4908      	ldr	r1, [pc, #32]	; (8001420 <MCAL_SYST_Init+0x54>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
        SYST->CSR |= (SYST_CLKSRC | SYST_TICKINT);
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MCAL_SYST_Init+0x54>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a06      	ldr	r2, [pc, #24]	; (8001420 <MCAL_SYST_Init+0x54>)
 8001408:	f043 0306 	orr.w	r3, r3, #6
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e001      	b.n	8001414 <MCAL_SYST_Init+0x48>
    }else{
        LOC_estatus = E_NOK;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
    }

    return LOC_estatus;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <MCAL_SYST_Start>:
* @return       :   none.
* @note			:   none.
======================================================================================================================
*/
void MCAL_SYST_Start(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
    SYST->CSR |= SYST_CSR_EN_MASK;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <MCAL_SYST_Start+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <MCAL_SYST_Start+0x18>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	e000e010 	.word	0xe000e010

08001440 <MCAL_SYST_Stop>:
* @return       :   none.
* @note			:   none.
======================================================================================================================
*/
void MCAL_SYST_Stop(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
    SYST->CSR &= ~SYST_CSR_EN_MASK;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <MCAL_SYST_Stop+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <MCAL_SYST_Stop+0x18>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	e000e010 	.word	0xe000e010

0800145c <MCAL_SYST_SetIntervalPeriodic>:
* @return       :   E_OK on success, E_NOK on failure.
* @note			:   none.
======================================================================================================================
*/
eStatus_t MCAL_SYST_SetIntervalPeriodic(uint32 copy_Microseconds, fptr_Callback callback)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    eStatus_t LOC_eStatus = E_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	77fb      	strb	r3, [r7, #31]
    uint64 LOC_u32TicksCount = 0;
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	f04f 0400 	mov.w	r4, #0
 8001472:	e9c7 3404 	strd	r3, r4, [r7, #16]
    uint32 LOC_SYST_Clk = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
    
    LOC_SYST_Clk = MCAL_SYST_CalculateCLKFreq(SYST_DELAY_US);
 800147a:	4819      	ldr	r0, [pc, #100]	; (80014e0 <MCAL_SYST_SetIntervalPeriodic+0x84>)
 800147c:	f7ff ff92 	bl	80013a4 <MCAL_SYST_CalculateCLKFreq>
 8001480:	60f8      	str	r0, [r7, #12]
    
    /*Calculate the required number of ticks*/
    LOC_u32TicksCount = copy_Microseconds * LOC_SYST_Clk;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	f04f 0400 	mov.w	r4, #0
 800148e:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if(SYST_ASSERT_RELOAD_VALUE(LOC_u32TicksCount) && callback)
 8001492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001496:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	42a2      	cmp	r2, r4
 80014a0:	bf08      	it	eq
 80014a2:	4299      	cmpeq	r1, r3
 80014a4:	d315      	bcc.n	80014d2 <MCAL_SYST_SetIntervalPeriodic+0x76>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d012      	beq.n	80014d2 <MCAL_SYST_SetIntervalPeriodic+0x76>
    {
        MCAL_SYST_Init(LOC_u32TicksCount);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff8c 	bl	80013cc <MCAL_SYST_Init>

        /*Set the callback function to be called when the interrupt is raised*/
        Glob_SYSTCallback = callback;
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <MCAL_SYST_SetIntervalPeriodic+0x88>)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6013      	str	r3, [r2, #0]

        /*Set the timer mode*/
        Glob_SYSTMode = SYST_PERIODIC_MODE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MCAL_SYST_SetIntervalPeriodic+0x8c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
    
        /*Enable the interrupt*/
        SYST->CSR |= SYST_CSR_TICKINT_MASK;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MCAL_SYST_SetIntervalPeriodic+0x90>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <MCAL_SYST_SetIntervalPeriodic+0x90>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	6013      	str	r3, [r2, #0]

        /*Start the counter*/
        MCAL_SYST_Start();
 80014cc:	f7ff ffaa 	bl	8001424 <MCAL_SYST_Start>
 80014d0:	e001      	b.n	80014d6 <MCAL_SYST_SetIntervalPeriodic+0x7a>

    }else{
        LOC_eStatus = E_NOK;
 80014d2:	2301      	movs	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
    }

    return LOC_eStatus;
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3724      	adds	r7, #36	; 0x24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}
 80014e0:	000f4240 	.word	0x000f4240
 80014e4:	20000080 	.word	0x20000080
 80014e8:	20000084 	.word	0x20000084
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <SysTick_Handler>:
*       SYSTICK_ISR_DEFINITION
*===============================================
*/

void SysTick_Handler(void)
{   
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    /*Stop the counter if we are in the single use mode*/
    if(Glob_SYSTMode == SYST_SINGLE_MODE)
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <SysTick_Handler+0x30>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <SysTick_Handler+0x10>
    {
        MCAL_SYST_Stop();
 80014fc:	f7ff ffa0 	bl	8001440 <MCAL_SYST_Stop>
    }

    if(Glob_SYSTCallback)
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <SysTick_Handler+0x34>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <SysTick_Handler+0x1e>
    {
        Glob_SYSTCallback();
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SysTick_Handler+0x34>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4798      	blx	r3
    }

    SYST->CSR &= ~SYST_CSR_COUNT_FLAG_MASK;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SysTick_Handler+0x38>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SysTick_Handler+0x38>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000084 	.word	0x20000084
 8001524:	20000080 	.word	0x20000080
 8001528:	e000e010 	.word	0xe000e010

0800152c <__libc_init_array>:
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	2500      	movs	r5, #0
 8001530:	4e0c      	ldr	r6, [pc, #48]	; (8001564 <__libc_init_array+0x38>)
 8001532:	4c0d      	ldr	r4, [pc, #52]	; (8001568 <__libc_init_array+0x3c>)
 8001534:	1ba4      	subs	r4, r4, r6
 8001536:	10a4      	asrs	r4, r4, #2
 8001538:	42a5      	cmp	r5, r4
 800153a:	d109      	bne.n	8001550 <__libc_init_array+0x24>
 800153c:	f000 f822 	bl	8001584 <_init>
 8001540:	2500      	movs	r5, #0
 8001542:	4e0a      	ldr	r6, [pc, #40]	; (800156c <__libc_init_array+0x40>)
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <__libc_init_array+0x44>)
 8001546:	1ba4      	subs	r4, r4, r6
 8001548:	10a4      	asrs	r4, r4, #2
 800154a:	42a5      	cmp	r5, r4
 800154c:	d105      	bne.n	800155a <__libc_init_array+0x2e>
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001554:	4798      	blx	r3
 8001556:	3501      	adds	r5, #1
 8001558:	e7ee      	b.n	8001538 <__libc_init_array+0xc>
 800155a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800155e:	4798      	blx	r3
 8001560:	3501      	adds	r5, #1
 8001562:	e7f2      	b.n	800154a <__libc_init_array+0x1e>
 8001564:	080016e8 	.word	0x080016e8
 8001568:	080016e8 	.word	0x080016e8
 800156c:	080016e8 	.word	0x080016e8
 8001570:	080016ec 	.word	0x080016ec

08001574 <strcpy>:
 8001574:	4603      	mov	r3, r0
 8001576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800157a:	f803 2b01 	strb.w	r2, [r3], #1
 800157e:	2a00      	cmp	r2, #0
 8001580:	d1f9      	bne.n	8001576 <strcpy+0x2>
 8001582:	4770      	bx	lr

08001584 <_init>:
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	bf00      	nop
 8001588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158a:	bc08      	pop	{r3}
 800158c:	469e      	mov	lr, r3
 800158e:	4770      	bx	lr

08001590 <_fini>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	bf00      	nop
 8001594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001596:	bc08      	pop	{r3}
 8001598:	469e      	mov	lr, r3
 800159a:	4770      	bx	lr
