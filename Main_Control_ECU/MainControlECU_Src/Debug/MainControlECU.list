
MainControlECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002098  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002320  08002320  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002320  08002320  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002320  08002320  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000018  08002340  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002340  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006417  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000132f  00000000  00000000  00026458  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d3c  00000000  00000000  00027787  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004e0  00000000  00000000  000294c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003f8  00000000  00000000  000299a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003482  00000000  00000000  00029da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000558f  00000000  00000000  0002d222  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000de30  00000000  00000000  000327b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000405e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fcc  00000000  00000000  0004065c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	080021b0 	.word	0x080021b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	080021b0 	.word	0x080021b0

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <main>:
 ******************************************************************************
 */
#include "APP.h"

int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0

	Dashboard_ECU_APP_SETUP();
 8000188:	f000 f82d 	bl	80001e6 <Dashboard_ECU_APP_SETUP>
  
  	while (1) 
	{
		Dashboard_ECU_APP_Loop();
 800018c:	f000 f834 	bl	80001f8 <Dashboard_ECU_APP_Loop>
 8000190:	e7fc      	b.n	800018c <main+0x8>
	...

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480d      	ldr	r0, [pc, #52]	; (80001cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000198:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480c      	ldr	r0, [pc, #48]	; (80001d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800019e:	490d      	ldr	r1, [pc, #52]	; (80001d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a0:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <LoopForever+0xe>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b4:	4c0a      	ldr	r4, [pc, #40]	; (80001e0 <LoopForever+0x16>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001c2:	f001 ffc9 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c6:	f7ff ffdd 	bl	8000184 <main>

080001ca <LoopForever>:

LoopForever:
    b LoopForever
 80001ca:	e7fe      	b.n	80001ca <LoopForever>
  ldr   r0, =_estack
 80001cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80001d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80001d8:	08002328 	.word	0x08002328
  ldr r2, =_sbss
 80001dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80001e0:	20000118 	.word	0x20000118

080001e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e4:	e7fe      	b.n	80001e4 <ADC1_2_IRQHandler>

080001e6 <Dashboard_ECU_APP_SETUP>:
* @brief		:   Function to initialize all the components of the main control ECU.
* Note			:   none.
======================================================================================================================
*/
void Dashboard_ECU_APP_SETUP(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	af00      	add	r7, sp, #0
    st_Admin_DashboardInit();
 80001ea:	f000 f9cf 	bl	800058c <st_Admin_DashboardInit>

    st_GatesComm_Init();
 80001ee:	f000 fd6f 	bl	8000cd0 <st_GatesComm_Init>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <Dashboard_ECU_APP_Loop>:
* @brief		:   Main functionality of the main dashboard ECU.
* Note			:   none.
======================================================================================================================
*/
void Dashboard_ECU_APP_Loop(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    Admin_Dashboard_State();
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <Dashboard_ECU_APP_Loop+0x14>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4798      	blx	r3

    fptr_GateCommState();
 8000202:	4b03      	ldr	r3, [pc, #12]	; (8000210 <Dashboard_ECU_APP_Loop+0x18>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4798      	blx	r3
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200000d0 	.word	0x200000d0
 8000210:	200000cc 	.word	0x200000cc

08000214 <Peripheral_Clock_Init>:
* @brief		  : Enable all the required peripherals clocks.
* Note			  : none.
======================================================================================================================
*/
static void Peripheral_Clock_Init()
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	/*Enable GPIO_A*/
	APB2_PERI_CLOCK_EN(APB2_IOPA);
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <Peripheral_Clock_Init+0x30>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <Peripheral_Clock_Init+0x30>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]

	/*Enable GPIO_B*/
	APB2_PERI_CLOCK_EN(APB2_IOPB);
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <Peripheral_Clock_Init+0x30>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <Peripheral_Clock_Init+0x30>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]

  /*Enable AFIO*/
	APB2_PERI_CLOCK_EN(APB2_AFIO);
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <Peripheral_Clock_Init+0x30>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <Peripheral_Clock_Init+0x30>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6193      	str	r3, [r2, #24]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40021000 	.word	0x40021000

08000248 <st_Admin_BacktoMainMenu>:
* @brief		  : Function to route the user back to the admin interface main menu.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_BacktoMainMenu(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
   pressedKey = Keypad_Get_Char();
 800024c:	f000 fdcc 	bl	8000de8 <Keypad_Get_Char>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <st_Admin_BacktoMainMenu+0x24>)
 8000256:	701a      	strb	r2, [r3, #0]

   if(pressedKey == '*')
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <st_Admin_BacktoMainMenu+0x24>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b2a      	cmp	r3, #42	; 0x2a
 800025e:	d102      	bne.n	8000266 <st_Admin_BacktoMainMenu+0x1e>
   {
      Admin_Dashboard_State = st_Admin_ShowAdminOptions;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <st_Admin_BacktoMainMenu+0x28>)
 8000262:	4a04      	ldr	r2, [pc, #16]	; (8000274 <st_Admin_BacktoMainMenu+0x2c>)
 8000264:	601a      	str	r2, [r3, #0]
   }else{

   }
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000034 	.word	0x20000034
 8000270:	200000d0 	.word	0x200000d0
 8000274:	080008b1 	.word	0x080008b1

08000278 <st_Admin_DisplayAddNewIDMessage>:
* @brief		  : A function to prompt the user to enter a new ID to be registered.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_DisplayAddNewIDMessage(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 800027c:	f001 f84a 	bl	8001314 <LCD_Clear_Screen>

  if(Glob_AuthIDsCount < AUTHORIZED_IDS_MAX_COUNT)
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <st_Admin_DisplayAddNewIDMessage+0x3c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b04      	cmp	r3, #4
 8000286:	d806      	bhi.n	8000296 <st_Admin_DisplayAddNewIDMessage+0x1e>
  {
    LCD_Send_String(stringfy("Enter ID:"));
 8000288:	480b      	ldr	r0, [pc, #44]	; (80002b8 <st_Admin_DisplayAddNewIDMessage+0x40>)
 800028a:	f000 ffe7 	bl	800125c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_AddNewID;
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <st_Admin_DisplayAddNewIDMessage+0x44>)
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <st_Admin_DisplayAddNewIDMessage+0x48>)
 8000292:	601a      	str	r2, [r3, #0]
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
    LCD_Send_String(stringfy("main menu => '*'"));

    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
  }
}
 8000294:	e00c      	b.n	80002b0 <st_Admin_DisplayAddNewIDMessage+0x38>
    LCD_Send_String(stringfy("IDs count exceeded"));
 8000296:	480b      	ldr	r0, [pc, #44]	; (80002c4 <st_Admin_DisplayAddNewIDMessage+0x4c>)
 8000298:	f000 ffe0 	bl	800125c <LCD_Send_String>
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 800029c:	2100      	movs	r1, #0
 800029e:	2003      	movs	r0, #3
 80002a0:	f000 fff0 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("main menu => '*'"));
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <st_Admin_DisplayAddNewIDMessage+0x50>)
 80002a6:	f000 ffd9 	bl	800125c <LCD_Send_String>
    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 80002aa:	4b04      	ldr	r3, [pc, #16]	; (80002bc <st_Admin_DisplayAddNewIDMessage+0x44>)
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <st_Admin_DisplayAddNewIDMessage+0x54>)
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000060 	.word	0x20000060
 80002b8:	080021c8 	.word	0x080021c8
 80002bc:	200000d0 	.word	0x200000d0
 80002c0:	080009a5 	.word	0x080009a5
 80002c4:	080021d4 	.word	0x080021d4
 80002c8:	080021e8 	.word	0x080021e8
 80002cc:	08000249 	.word	0x08000249

080002d0 <st_Admin_AddedIDsuccessfully>:
* @brief		  : Function to tell the user that the process of adding a new ID had been successfull.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_AddedIDsuccessfully(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
   /*Copy the ID into the main list*/
   strcpy((sint8 *)Glob_DriversIDsList[Glob_AuthIDsCount], (const sint8 *)Glob_tempDriverIDinput);
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <st_Admin_AddedIDsuccessfully+0x44>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <st_Admin_AddedIDsuccessfully+0x48>)
 80002dc:	4413      	add	r3, r2
 80002de:	490f      	ldr	r1, [pc, #60]	; (800031c <st_Admin_AddedIDsuccessfully+0x4c>)
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 ff5d 	bl	80021a0 <strcpy>

   /*Increase the IDs count in the system*/
   Glob_AuthIDsCount++;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <st_Admin_AddedIDsuccessfully+0x44>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	3301      	adds	r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <st_Admin_AddedIDsuccessfully+0x44>)
 80002f0:	701a      	strb	r2, [r3, #0]
   
   LCD_Clear_Screen();
 80002f2:	f001 f80f 	bl	8001314 <LCD_Clear_Screen>

   LCD_Send_String(stringfy("ID Added successfully"));
 80002f6:	480a      	ldr	r0, [pc, #40]	; (8000320 <st_Admin_AddedIDsuccessfully+0x50>)
 80002f8:	f000 ffb0 	bl	800125c <LCD_Send_String>
   LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 80002fc:	2100      	movs	r1, #0
 80002fe:	2003      	movs	r0, #3
 8000300:	f000 ffc0 	bl	8001284 <LCD_Cursor_XY>
   LCD_Send_String(stringfy("main menu => '*'"));
 8000304:	4807      	ldr	r0, [pc, #28]	; (8000324 <st_Admin_AddedIDsuccessfully+0x54>)
 8000306:	f000 ffa9 	bl	800125c <LCD_Send_String>

  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <st_Admin_AddedIDsuccessfully+0x58>)
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <st_Admin_AddedIDsuccessfully+0x5c>)
 800030e:	601a      	str	r2, [r3, #0]
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000060 	.word	0x20000060
 8000318:	2000004c 	.word	0x2000004c
 800031c:	20000048 	.word	0x20000048
 8000320:	080021fc 	.word	0x080021fc
 8000324:	080021e8 	.word	0x080021e8
 8000328:	200000d0 	.word	0x200000d0
 800032c:	08000249 	.word	0x08000249

08000330 <st_Admin_IDalreadyExists>:
* @brief		  : A function to warn the admin if he tries to register an already registered ID.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_IDalreadyExists(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 8000334:	f000 ffee 	bl	8001314 <LCD_Clear_Screen>
  LCD_Send_String(stringfy("ID already exist"));
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <st_Admin_IDalreadyExists+0x28>)
 800033a:	f000 ff8f 	bl	800125c <LCD_Send_String>
  LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 800033e:	2100      	movs	r1, #0
 8000340:	2003      	movs	r0, #3
 8000342:	f000 ff9f 	bl	8001284 <LCD_Cursor_XY>
  LCD_Send_String(stringfy("main menu => '*'"));
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <st_Admin_IDalreadyExists+0x2c>)
 8000348:	f000 ff88 	bl	800125c <LCD_Send_String>
  
  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <st_Admin_IDalreadyExists+0x30>)
 800034e:	4a05      	ldr	r2, [pc, #20]	; (8000364 <st_Admin_IDalreadyExists+0x34>)
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	08002214 	.word	0x08002214
 800035c:	080021e8 	.word	0x080021e8
 8000360:	200000d0 	.word	0x200000d0
 8000364:	08000249 	.word	0x08000249

08000368 <st_Admin_RemovedIDsuccessfully>:
* @brief		  : A function to warn the admin if he tries to register an already registered ID.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_RemovedIDsuccessfully(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 800036c:	f000 ffd2 	bl	8001314 <LCD_Clear_Screen>
  LCD_Send_String(stringfy("ID Deleted!"));
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <st_Admin_RemovedIDsuccessfully+0x28>)
 8000372:	f000 ff73 	bl	800125c <LCD_Send_String>
  LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000376:	2100      	movs	r1, #0
 8000378:	2003      	movs	r0, #3
 800037a:	f000 ff83 	bl	8001284 <LCD_Cursor_XY>
  LCD_Send_String(stringfy("main menu => '*'"));
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <st_Admin_RemovedIDsuccessfully+0x2c>)
 8000380:	f000 ff6c 	bl	800125c <LCD_Send_String>
  
  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <st_Admin_RemovedIDsuccessfully+0x30>)
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <st_Admin_RemovedIDsuccessfully+0x34>)
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	08002228 	.word	0x08002228
 8000394:	080021e8 	.word	0x080021e8
 8000398:	200000d0 	.word	0x200000d0
 800039c:	08000249 	.word	0x08000249

080003a0 <st_Admin_IDnotFound>:
* @brief		  : Function to inform the user that the required ID doesn't exist.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_IDnotFound(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 80003a4:	f000 ffb6 	bl	8001314 <LCD_Clear_Screen>
  LCD_Send_String(stringfy("ID Doesn't Exist"));
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <st_Admin_IDnotFound+0x28>)
 80003aa:	f000 ff57 	bl	800125c <LCD_Send_String>
  LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 80003ae:	2100      	movs	r1, #0
 80003b0:	2003      	movs	r0, #3
 80003b2:	f000 ff67 	bl	8001284 <LCD_Cursor_XY>
  LCD_Send_String(stringfy("main menu => '*'"));
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <st_Admin_IDnotFound+0x2c>)
 80003b8:	f000 ff50 	bl	800125c <LCD_Send_String>
  
  Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <st_Admin_IDnotFound+0x30>)
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <st_Admin_IDnotFound+0x34>)
 80003c0:	601a      	str	r2, [r3, #0]

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	08002234 	.word	0x08002234
 80003cc:	080021e8 	.word	0x080021e8
 80003d0:	200000d0 	.word	0x200000d0
 80003d4:	08000249 	.word	0x08000249

080003d8 <deleteID>:
* @param [in]	: IDindex: index of the element to be removed.
* Note			  : The order of the elements in the list does not matter.
======================================================================================================================
*/
static void deleteID(uint8 IDindex)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
  /*If the ID to be deleted is in the end of the list just decrease the IDs count*/
  if(IDindex < Glob_AuthIDsCount - 1)
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <deleteID+0x44>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	429a      	cmp	r2, r3
 80003ec:	da0c      	bge.n	8000408 <deleteID+0x30>
  {
    /*Delete the required ID from the list*/
    strcpy((sint8  *)Glob_DriversIDsList[IDindex], (const sint8 *)Glob_DriversIDsList[Glob_AuthIDsCount - 1]);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <deleteID+0x48>)
 80003f4:	1898      	adds	r0, r3, r2
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <deleteID+0x44>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4a08      	ldr	r2, [pc, #32]	; (8000420 <deleteID+0x48>)
 8000400:	4413      	add	r3, r2
 8000402:	4619      	mov	r1, r3
 8000404:	f001 fecc 	bl	80021a0 <strcpy>
  }else{

  }

  Glob_AuthIDsCount--;
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <deleteID+0x44>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <deleteID+0x44>)
 8000412:	701a      	strb	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000060 	.word	0x20000060
 8000420:	2000004c 	.word	0x2000004c

08000424 <st_Admin_CheckRepeatedID>:
* @brief		  : FUnction to check if the ID to be registered already exists in the system.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_CheckRepeatedID(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
  static uint8 counter = 0;
  boolean repeated = FALSE;
 800042a:	2300      	movs	r3, #0
 800042c:	71fb      	strb	r3, [r7, #7]

  if(!strcmp((const sint8 *)Glob_tempDriverIDinput, (const sint8 *)Glob_DriversIDsList[counter]))
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	4a26      	ldr	r2, [pc, #152]	; (80004d0 <st_Admin_CheckRepeatedID+0xac>)
 8000436:	4413      	add	r3, r2
 8000438:	4619      	mov	r1, r3
 800043a:	4826      	ldr	r0, [pc, #152]	; (80004d4 <st_Admin_CheckRepeatedID+0xb0>)
 800043c:	f7ff fe98 	bl	8000170 <strcmp>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <st_Admin_CheckRepeatedID+0x26>
  {
      repeated = TRUE;
 8000446:	2301      	movs	r3, #1
 8000448:	71fb      	strb	r3, [r7, #7]
  }else{

  }

  if(repeated)
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d017      	beq.n	8000480 <st_Admin_CheckRepeatedID+0x5c>
  {
    if(currentOperation == ADMIN_ADD_ID)
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <st_Admin_CheckRepeatedID+0xb4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b31      	cmp	r3, #49	; 0x31
 8000456:	d103      	bne.n	8000460 <st_Admin_CheckRepeatedID+0x3c>
    {
      Admin_Dashboard_State = st_Admin_IDalreadyExists;
 8000458:	4b20      	ldr	r3, [pc, #128]	; (80004dc <st_Admin_CheckRepeatedID+0xb8>)
 800045a:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <st_Admin_CheckRepeatedID+0xbc>)
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	e00b      	b.n	8000478 <st_Admin_CheckRepeatedID+0x54>
    }else if(currentOperation == ADMIN_REMOVE_ID)
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <st_Admin_CheckRepeatedID+0xb4>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b32      	cmp	r3, #50	; 0x32
 8000466:	d107      	bne.n	8000478 <st_Admin_CheckRepeatedID+0x54>
    {
      deleteID(counter);
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ffb3 	bl	80003d8 <deleteID>
      Admin_Dashboard_State = st_Admin_RemovedIDsuccessfully;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <st_Admin_CheckRepeatedID+0xb8>)
 8000474:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <st_Admin_CheckRepeatedID+0xc0>)
 8000476:	601a      	str	r2, [r3, #0]
    }else{

    }

    counter = 0;    
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
      }else{

      }
    }
  }
}
 800047e:	e021      	b.n	80004c4 <st_Admin_CheckRepeatedID+0xa0>
    counter++;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 800048a:	701a      	strb	r2, [r3, #0]
    if(counter < Glob_AuthIDsCount)
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <st_Admin_CheckRepeatedID+0xc4>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	429a      	cmp	r2, r3
 8000496:	d203      	bcs.n	80004a0 <st_Admin_CheckRepeatedID+0x7c>
      Admin_Dashboard_State = st_Admin_CheckRepeatedID;
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <st_Admin_CheckRepeatedID+0xb8>)
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <st_Admin_CheckRepeatedID+0xc8>)
 800049c:	601a      	str	r2, [r3, #0]
}
 800049e:	e011      	b.n	80004c4 <st_Admin_CheckRepeatedID+0xa0>
      counter = 0;
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <st_Admin_CheckRepeatedID+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
      if(currentOperation == ADMIN_ADD_ID)
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <st_Admin_CheckRepeatedID+0xb4>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b31      	cmp	r3, #49	; 0x31
 80004ac:	d103      	bne.n	80004b6 <st_Admin_CheckRepeatedID+0x92>
        Admin_Dashboard_State = st_Admin_AddedIDsuccessfully;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <st_Admin_CheckRepeatedID+0xb8>)
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <st_Admin_CheckRepeatedID+0xcc>)
 80004b2:	601a      	str	r2, [r3, #0]
}
 80004b4:	e006      	b.n	80004c4 <st_Admin_CheckRepeatedID+0xa0>
      }else if(currentOperation == ADMIN_REMOVE_ID)
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <st_Admin_CheckRepeatedID+0xb4>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b32      	cmp	r3, #50	; 0x32
 80004bc:	d102      	bne.n	80004c4 <st_Admin_CheckRepeatedID+0xa0>
        Admin_Dashboard_State = st_Admin_IDnotFound;
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <st_Admin_CheckRepeatedID+0xb8>)
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <st_Admin_CheckRepeatedID+0xd0>)
 80004c2:	601a      	str	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000061 	.word	0x20000061
 80004d0:	2000004c 	.word	0x2000004c
 80004d4:	20000048 	.word	0x20000048
 80004d8:	20000045 	.word	0x20000045
 80004dc:	200000d0 	.word	0x200000d0
 80004e0:	08000331 	.word	0x08000331
 80004e4:	08000369 	.word	0x08000369
 80004e8:	20000060 	.word	0x20000060
 80004ec:	08000425 	.word	0x08000425
 80004f0:	080002d1 	.word	0x080002d1
 80004f4:	080003a1 	.word	0x080003a1

080004f8 <st_Admin_DisplayRemoveIDMessage>:
* @brief		  : A function to prompt the user to enter a an ID to be deleted from the system.
* Note			  : none.
======================================================================================================================
*/
static void st_Admin_DisplayRemoveIDMessage(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  LCD_Clear_Screen();
 80004fc:	f000 ff0a 	bl	8001314 <LCD_Clear_Screen>

  if(Glob_AuthIDsCount > 0)
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <st_Admin_DisplayRemoveIDMessage+0x3c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d006      	beq.n	8000516 <st_Admin_DisplayRemoveIDMessage+0x1e>
  {
    LCD_Send_String(stringfy("Enter ID:"));
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <st_Admin_DisplayRemoveIDMessage+0x40>)
 800050a:	f000 fea7 	bl	800125c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_RemoveID;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <st_Admin_DisplayRemoveIDMessage+0x44>)
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <st_Admin_DisplayRemoveIDMessage+0x48>)
 8000512:	601a      	str	r2, [r3, #0]
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
    LCD_Send_String(stringfy("main menu => '*'"));

    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
  }
}
 8000514:	e00c      	b.n	8000530 <st_Admin_DisplayRemoveIDMessage+0x38>
    LCD_Send_String(stringfy("IDs List Empty"));
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <st_Admin_DisplayRemoveIDMessage+0x4c>)
 8000518:	f000 fea0 	bl	800125c <LCD_Send_String>
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2003      	movs	r0, #3
 8000520:	f000 feb0 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("main menu => '*'"));
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <st_Admin_DisplayRemoveIDMessage+0x50>)
 8000526:	f000 fe99 	bl	800125c <LCD_Send_String>
    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <st_Admin_DisplayRemoveIDMessage+0x44>)
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <st_Admin_DisplayRemoveIDMessage+0x54>)
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000060 	.word	0x20000060
 8000538:	080021c8 	.word	0x080021c8
 800053c:	200000d0 	.word	0x200000d0
 8000540:	08000a4d 	.word	0x08000a4d
 8000544:	08002248 	.word	0x08002248
 8000548:	080021e8 	.word	0x080021e8
 800054c:	08000249 	.word	0x08000249

08000550 <SYSTICK_Callback>:

/** @defgroup ISR_CALLBACK_FUNCTION
  * @{
  */
void SYSTICK_Callback(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  static uint8 counter = 0;

  if(counter == TIMEOUT_10_SECONDS)
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <SYSTICK_Callback+0x30>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b04      	cmp	r3, #4
 800055a:	d108      	bne.n	800056e <SYSTICK_Callback+0x1e>
  {
      counter = 0;
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <SYSTICK_Callback+0x30>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
      MCAL_SYST_Stop();
 8000562:	f001 fd83 	bl	800206c <MCAL_SYST_Stop>
      Admin_Dashboard_State = st_Admin_InitialMessage;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <SYSTICK_Callback+0x34>)
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <SYSTICK_Callback+0x38>)
 800056a:	601a      	str	r2, [r3, #0]
  }else{
    counter++;
  }
}
 800056c:	e005      	b.n	800057a <SYSTICK_Callback+0x2a>
    counter++;
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <SYSTICK_Callback+0x30>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b02      	ldr	r3, [pc, #8]	; (8000580 <SYSTICK_Callback+0x30>)
 8000578:	701a      	strb	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000062 	.word	0x20000062
 8000584:	200000d0 	.word	0x200000d0
 8000588:	080005b1 	.word	0x080005b1

0800058c <st_Admin_DashboardInit>:
* @return       :   none.
* Note			    :   none.
======================================================================================================================
*/
void st_Admin_DashboardInit(void)
{  
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /*Enable the required clocks*/
  Peripheral_Clock_Init();
 8000590:	f7ff fe40 	bl	8000214 <Peripheral_Clock_Init>
 
  LCD_Init();
 8000594:	f000 fd14 	bl	8000fc0 <LCD_Init>
  Keypad_Init();
 8000598:	f000 fbde 	bl	8000d58 <Keypad_Init>

 
  /*Set the next state*/
  Admin_Dashboard_State = st_Admin_InitialMessage;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <st_Admin_DashboardInit+0x1c>)
 800059e:	4a03      	ldr	r2, [pc, #12]	; (80005ac <st_Admin_DashboardInit+0x20>)
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000d0 	.word	0x200000d0
 80005ac:	080005b1 	.word	0x080005b1

080005b0 <st_Admin_InitialMessage>:
* @brief		  :   Function to display the initial welcome message to the user.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_InitialMessage(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    /*Print the initial message*/
    LCD_Clear_Screen();
 80005b4:	f000 feae 	bl	8001314 <LCD_Clear_Screen>
    
    LCD_Cursor_XY(LCD_SECOND_LINE, 4);
 80005b8:	2104      	movs	r1, #4
 80005ba:	2001      	movs	r0, #1
 80005bc:	f000 fe62 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Press '*'"));
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <st_Admin_InitialMessage+0x30>)
 80005c2:	f000 fe4b 	bl	800125c <LCD_Send_String>

    LCD_Cursor_XY(LCD_THIRD_LINE, 4);
 80005c6:	2104      	movs	r1, #4
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 fe5b 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("to Login"));
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <st_Admin_InitialMessage+0x34>)
 80005d0:	f000 fe44 	bl	800125c <LCD_Send_String>

    /*Set the next state*/
    Admin_Dashboard_State = st_Admin_GetUserInput;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <st_Admin_InitialMessage+0x38>)
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <st_Admin_InitialMessage+0x3c>)
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	08002258 	.word	0x08002258
 80005e4:	08002264 	.word	0x08002264
 80005e8:	200000d0 	.word	0x200000d0
 80005ec:	080005f1 	.word	0x080005f1

080005f0 <st_Admin_GetUserInput>:
* @brief		  :   Function to get the user action.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetUserInput(void)
{   
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    pressedKey = Keypad_Get_Char();
 80005f4:	f000 fbf8 	bl	8000de8 <Keypad_Get_Char>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <st_Admin_GetUserInput+0x2c>)
 80005fe:	701a      	strb	r2, [r3, #0]

    /*Set the next state*/
    if(pressedKey == '*')
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <st_Admin_GetUserInput+0x2c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b2a      	cmp	r3, #42	; 0x2a
 8000606:	d103      	bne.n	8000610 <st_Admin_GetUserInput+0x20>
    {
        Admin_Dashboard_State = st_Admin_LoginMessage;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <st_Admin_GetUserInput+0x30>)
 800060a:	4a06      	ldr	r2, [pc, #24]	; (8000624 <st_Admin_GetUserInput+0x34>)
 800060c:	601a      	str	r2, [r3, #0]
    }else{
        Admin_Dashboard_State = st_Admin_GetUserInput;
    }
}
 800060e:	e002      	b.n	8000616 <st_Admin_GetUserInput+0x26>
        Admin_Dashboard_State = st_Admin_GetUserInput;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <st_Admin_GetUserInput+0x30>)
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <st_Admin_GetUserInput+0x38>)
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000034 	.word	0x20000034
 8000620:	200000d0 	.word	0x200000d0
 8000624:	0800062d 	.word	0x0800062d
 8000628:	080005f1 	.word	0x080005f1

0800062c <st_Admin_LoginMessage>:
* @brief		  :   Function to get the user action.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_LoginMessage(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    /*Print the login message*/
    LCD_Clear_Screen();
 8000630:	f000 fe70 	bl	8001314 <LCD_Clear_Screen>

    LCD_Send_String(stringfy("UserID:"));
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <st_Admin_LoginMessage+0x3c>)
 8000636:	f000 fe11 	bl	800125c <LCD_Send_String>
    LCD_Cursor_XY(LCD_SECOND_LINE, 0);
 800063a:	2100      	movs	r1, #0
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fe21 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("Password:"));
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <st_Admin_LoginMessage+0x40>)
 8000644:	f000 fe0a 	bl	800125c <LCD_Send_String>

    if(loginAttemptsCounter > 1)
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <st_Admin_LoginMessage+0x44>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d906      	bls.n	800065e <st_Admin_LoginMessage+0x32>
    {
      LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000650:	2100      	movs	r1, #0
 8000652:	2003      	movs	r0, #3
 8000654:	f000 fe16 	bl	8001284 <LCD_Cursor_XY>
      LCD_Send_String(stringfy("Wrong Login Info"));
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <st_Admin_LoginMessage+0x48>)
 800065a:	f000 fdff 	bl	800125c <LCD_Send_String>
    }
    /*Set next state*/
    Admin_Dashboard_State = st_Admin_GetUserID;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <st_Admin_LoginMessage+0x4c>)
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <st_Admin_LoginMessage+0x50>)
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	08002270 	.word	0x08002270
 800066c:	08002278 	.word	0x08002278
 8000670:	20000014 	.word	0x20000014
 8000674:	08002284 	.word	0x08002284
 8000678:	200000d0 	.word	0x200000d0
 800067c:	08000681 	.word	0x08000681

08000680 <st_Admin_GetUserID>:
* @brief		  :   Function to get the user input for the userID.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetUserID(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    LCD_Cursor_XY(LCD_FIRST_LINE, 7 + userInputCount);
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <st_Admin_GetUserID+0x74>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3307      	adds	r3, #7
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fdf8 	bl	8001284 <LCD_Cursor_XY>

    pressedKey = Keypad_Get_Char();
 8000694:	f000 fba8 	bl	8000de8 <Keypad_Get_Char>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <st_Admin_GetUserID+0x78>)
 800069e:	701a      	strb	r2, [r3, #0]

    /*Set the next state*/
    if(pressedKey != NULL_CHAR)
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <st_Admin_GetUserID+0x78>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b4e      	cmp	r3, #78	; 0x4e
 80006a6:	d00f      	beq.n	80006c8 <st_Admin_GetUserID+0x48>
    {
        LCD_Send_Char(pressedKey);
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <st_Admin_GetUserID+0x78>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd5d 	bl	800116c <LCD_Send_Char>
        Glob_userIDinput[userInputCount++] = pressedKey;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <st_Admin_GetUserID+0x74>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	b2d1      	uxtb	r1, r2
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <st_Admin_GetUserID+0x74>)
 80006bc:	7011      	strb	r1, [r2, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <st_Admin_GetUserID+0x78>)
 80006c2:	7819      	ldrb	r1, [r3, #0]
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <st_Admin_GetUserID+0x7c>)
 80006c6:	5499      	strb	r1, [r3, r2]
    }else{
        
    }

    if(userInputCount >= ADMIN_USERID_SIZE)
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <st_Admin_GetUserID+0x74>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d90c      	bls.n	80006ea <st_Admin_GetUserID+0x6a>
    {
        Glob_userIDinput[userInputCount] = '\0';
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <st_Admin_GetUserID+0x74>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <st_Admin_GetUserID+0x7c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <st_Admin_GetUserID+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]

        /*Set next state*/
        Admin_Dashboard_State = st_Admin_GetUserPassword;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <st_Admin_GetUserID+0x80>)
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <st_Admin_GetUserID+0x84>)
 80006e6:	601a      	str	r2, [r3, #0]
    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_GetUserID;
    }
}
 80006e8:	e002      	b.n	80006f0 <st_Admin_GetUserID+0x70>
        Admin_Dashboard_State = st_Admin_GetUserID;
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <st_Admin_GetUserID+0x80>)
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <st_Admin_GetUserID+0x88>)
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000035 	.word	0x20000035
 80006f8:	20000034 	.word	0x20000034
 80006fc:	20000038 	.word	0x20000038
 8000700:	200000d0 	.word	0x200000d0
 8000704:	0800070d 	.word	0x0800070d
 8000708:	08000681 	.word	0x08000681

0800070c <st_Admin_GetUserPassword>:
* @brief		  :   Function to get the user input for the password.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetUserPassword(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    LCD_Cursor_XY(LCD_SECOND_LINE, 9 + userInputCount);
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <st_Admin_GetUserPassword+0x70>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3309      	adds	r3, #9
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fdb2 	bl	8001284 <LCD_Cursor_XY>
    
    pressedKey = Keypad_Get_Char();
 8000720:	f000 fb62 	bl	8000de8 <Keypad_Get_Char>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <st_Admin_GetUserPassword+0x74>)
 800072a:	701a      	strb	r2, [r3, #0]

    /*Set the next state*/
    if(pressedKey != NULL_CHAR)
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <st_Admin_GetUserPassword+0x74>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b4e      	cmp	r3, #78	; 0x4e
 8000732:	d00d      	beq.n	8000750 <st_Admin_GetUserPassword+0x44>
    {   
        LCD_Send_Char('*');
 8000734:	202a      	movs	r0, #42	; 0x2a
 8000736:	f000 fd19 	bl	800116c <LCD_Send_Char>
        Glob_passwordinput[userInputCount++] = pressedKey;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <st_Admin_GetUserPassword+0x70>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	b2d1      	uxtb	r1, r2
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <st_Admin_GetUserPassword+0x70>)
 8000744:	7011      	strb	r1, [r2, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <st_Admin_GetUserPassword+0x74>)
 800074a:	7819      	ldrb	r1, [r3, #0]
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <st_Admin_GetUserPassword+0x78>)
 800074e:	5499      	strb	r1, [r3, r2]
    }else{
        
    }

    if(userInputCount >= ADMIN_PASSWORD_SIZE)
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <st_Admin_GetUserPassword+0x70>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d90c      	bls.n	8000772 <st_Admin_GetUserPassword+0x66>
    {
        Glob_passwordinput[userInputCount] = '\0';
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <st_Admin_GetUserPassword+0x70>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <st_Admin_GetUserPassword+0x78>)
 8000760:	2100      	movs	r1, #0
 8000762:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <st_Admin_GetUserPassword+0x70>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]

        /*Set next state*/
        Admin_Dashboard_State = st_Admin_CheckLoginInfo;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <st_Admin_GetUserPassword+0x7c>)
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <st_Admin_GetUserPassword+0x80>)
 800076e:	601a      	str	r2, [r3, #0]
    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_GetUserPassword;
    }
}
 8000770:	e002      	b.n	8000778 <st_Admin_GetUserPassword+0x6c>
        Admin_Dashboard_State = st_Admin_GetUserPassword;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <st_Admin_GetUserPassword+0x7c>)
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <st_Admin_GetUserPassword+0x84>)
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000035 	.word	0x20000035
 8000780:	20000034 	.word	0x20000034
 8000784:	20000040 	.word	0x20000040
 8000788:	200000d0 	.word	0x200000d0
 800078c:	08000795 	.word	0x08000795
 8000790:	0800070d 	.word	0x0800070d

08000794 <st_Admin_CheckLoginInfo>:
* @brief		  :   Function to check if the given login info is valid or not.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_CheckLoginInfo(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  uint8 validInfo = INVALID_LOGIN_INFO;
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]

  uint8 i;
  for(i = 0; i < NUMBER_OF_ADMINS; i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	71bb      	strb	r3, [r7, #6]
 80007a2:	e022      	b.n	80007ea <st_Admin_CheckLoginInfo+0x56>
  {
     if(!strcmp((const sint8 *)Glob_adminsList[i].adminUserID, (const sint8 *)Glob_userIDinput) && 
 80007a4:	79ba      	ldrb	r2, [r7, #6]
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <st_Admin_CheckLoginInfo+0xa0>)
 80007b0:	4413      	add	r3, r2
 80007b2:	4921      	ldr	r1, [pc, #132]	; (8000838 <st_Admin_CheckLoginInfo+0xa4>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fcdb 	bl	8000170 <strcmp>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d111      	bne.n	80007e4 <st_Admin_CheckLoginInfo+0x50>
        !strcmp((const sint8 *)Glob_adminsList[i].adminPassword, (const sint8 *)Glob_passwordinput)) 
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4a1a      	ldr	r2, [pc, #104]	; (8000834 <st_Admin_CheckLoginInfo+0xa0>)
 80007cc:	4413      	add	r3, r2
 80007ce:	3305      	adds	r3, #5
 80007d0:	491a      	ldr	r1, [pc, #104]	; (800083c <st_Admin_CheckLoginInfo+0xa8>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fccc 	bl	8000170 <strcmp>
 80007d8:	4603      	mov	r3, r0
     if(!strcmp((const sint8 *)Glob_adminsList[i].adminUserID, (const sint8 *)Glob_userIDinput) && 
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <st_Admin_CheckLoginInfo+0x50>
     {
        validInfo = VALID_LOGIN_INFO;
 80007de:	2301      	movs	r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
        break;
 80007e2:	e005      	b.n	80007f0 <st_Admin_CheckLoginInfo+0x5c>
  for(i = 0; i < NUMBER_OF_ADMINS; i++)
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	3301      	adds	r3, #1
 80007e8:	71bb      	strb	r3, [r7, #6]
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d9d9      	bls.n	80007a4 <st_Admin_CheckLoginInfo+0x10>
     }else{

     }
  }

  if(validInfo == VALID_LOGIN_INFO)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d106      	bne.n	8000804 <st_Admin_CheckLoginInfo+0x70>
  {
    loginAttemptsCounter = 1;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <st_Admin_CheckLoginInfo+0xac>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]

    /*Set next state*/
    Admin_Dashboard_State = st_Admin_ShowAdminOptions;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <st_Admin_CheckLoginInfo+0xb0>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <st_Admin_CheckLoginInfo+0xb4>)
 8000800:	601a      	str	r2, [r3, #0]

        Admin_Dashboard_State = st_Admin_LoginTimeout;
    }
  }

}
 8000802:	e013      	b.n	800082c <st_Admin_CheckLoginInfo+0x98>
    if(loginAttemptsCounter < ADMIN_MAX_LOGIN_ATTEMPTS)
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <st_Admin_CheckLoginInfo+0xac>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d809      	bhi.n	8000820 <st_Admin_CheckLoginInfo+0x8c>
        loginAttemptsCounter++;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <st_Admin_CheckLoginInfo+0xac>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <st_Admin_CheckLoginInfo+0xac>)
 8000816:	701a      	strb	r2, [r3, #0]
        Admin_Dashboard_State = st_Admin_LoginMessage;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <st_Admin_CheckLoginInfo+0xb0>)
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <st_Admin_CheckLoginInfo+0xb8>)
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	e005      	b.n	800082c <st_Admin_CheckLoginInfo+0x98>
        loginAttemptsCounter = 1;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <st_Admin_CheckLoginInfo+0xac>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
        Admin_Dashboard_State = st_Admin_LoginTimeout;
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <st_Admin_CheckLoginInfo+0xb0>)
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <st_Admin_CheckLoginInfo+0xbc>)
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000038 	.word	0x20000038
 800083c:	20000040 	.word	0x20000040
 8000840:	20000014 	.word	0x20000014
 8000844:	200000d0 	.word	0x200000d0
 8000848:	080008b1 	.word	0x080008b1
 800084c:	0800062d 	.word	0x0800062d
 8000850:	08000855 	.word	0x08000855

08000854 <st_Admin_LoginTimeout>:
* @brief		  : Timeout the user from tying to login after passing the maximum number of allowed login attempts.
* @note			  : The only way to get out of this state is through the SYSTICK timer handler.
======================================================================================================================
*/
void st_Admin_LoginTimeout(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
   LCD_Clear_Screen();
 8000858:	f000 fd5c 	bl	8001314 <LCD_Clear_Screen>

   LCD_Cursor_XY(LCD_SECOND_LINE, 2);
 800085c:	2102      	movs	r1, #2
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fd10 	bl	8001284 <LCD_Cursor_XY>
   LCD_Send_String(stringfy("Try again in"));
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <st_Admin_LoginTimeout+0x38>)
 8000866:	f000 fcf9 	bl	800125c <LCD_Send_String>
   LCD_Cursor_XY(LCD_THIRD_LINE, 3);
 800086a:	2103      	movs	r1, #3
 800086c:	2002      	movs	r0, #2
 800086e:	f000 fd09 	bl	8001284 <LCD_Cursor_XY>
   LCD_Send_String(stringfy("10 seconds"));
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <st_Admin_LoginTimeout+0x3c>)
 8000874:	f000 fcf2 	bl	800125c <LCD_Send_String>

   /*Start the timer*/
   MCAL_SYST_SetIntervalPeriodic(2000000UL, SYSTICK_Callback);
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <st_Admin_LoginTimeout+0x40>)
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <st_Admin_LoginTimeout+0x44>)
 800087c:	f001 fc04 	bl	8002088 <MCAL_SYST_SetIntervalPeriodic>

   Admin_Dashboard_State = st_Admin_Idle;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <st_Admin_LoginTimeout+0x48>)
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <st_Admin_LoginTimeout+0x4c>)
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08002298 	.word	0x08002298
 8000890:	080022a8 	.word	0x080022a8
 8000894:	08000551 	.word	0x08000551
 8000898:	001e8480 	.word	0x001e8480
 800089c:	200000d0 	.word	0x200000d0
 80008a0:	080008a5 	.word	0x080008a5

080008a4 <st_Admin_Idle>:
* @brief	    : Function to make the ECU go into idle mode.
* @note			  :
======================================================================================================================
*/
void st_Admin_Idle(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <st_Admin_ShowAdminOptions>:
* @brief		  :   Function to get display the available admin operations on the LCD screen.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_ShowAdminOptions(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    LCD_Clear_Screen();
 80008b4:	f000 fd2e 	bl	8001314 <LCD_Clear_Screen>

    LCD_Send_String(stringfy("1.Add new ID"));
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <st_Admin_ShowAdminOptions+0x44>)
 80008ba:	f000 fccf 	bl	800125c <LCD_Send_String>
    LCD_Cursor_XY(LCD_SECOND_LINE, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fcdf 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("2.Remove an ID"));
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <st_Admin_ShowAdminOptions+0x48>)
 80008c8:	f000 fcc8 	bl	800125c <LCD_Send_String>
    LCD_Cursor_XY(LCD_THIRD_LINE, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2002      	movs	r0, #2
 80008d0:	f000 fcd8 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("3.Show IDs List"));
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <st_Admin_ShowAdminOptions+0x4c>)
 80008d6:	f000 fcc1 	bl	800125c <LCD_Send_String>
    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 80008da:	2100      	movs	r1, #0
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 fcd1 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("'*' to logout"));
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <st_Admin_ShowAdminOptions+0x50>)
 80008e4:	f000 fcba 	bl	800125c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_GetAdminOption;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <st_Admin_ShowAdminOptions+0x54>)
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <st_Admin_ShowAdminOptions+0x58>)
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	080022b4 	.word	0x080022b4
 80008f8:	080022c4 	.word	0x080022c4
 80008fc:	080022d4 	.word	0x080022d4
 8000900:	080022e4 	.word	0x080022e4
 8000904:	200000d0 	.word	0x200000d0
 8000908:	0800090d 	.word	0x0800090d

0800090c <st_Admin_GetAdminOption>:
* @brief		  :   Function to get the required action to be done from the user.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_GetAdminOption(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  pressedKey = Keypad_Get_Char();
 8000910:	f000 fa6a 	bl	8000de8 <Keypad_Get_Char>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <st_Admin_GetAdminOption+0x7c>)
 800091a:	701a      	strb	r2, [r3, #0]

  switch (pressedKey)
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <st_Admin_GetAdminOption+0x7c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3b2a      	subs	r3, #42	; 0x2a
 8000922:	2b09      	cmp	r3, #9
 8000924:	d828      	bhi.n	8000978 <st_Admin_GetAdminOption+0x6c>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <st_Admin_GetAdminOption+0x20>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	08000971 	.word	0x08000971
 8000930:	08000979 	.word	0x08000979
 8000934:	08000979 	.word	0x08000979
 8000938:	08000979 	.word	0x08000979
 800093c:	08000979 	.word	0x08000979
 8000940:	08000979 	.word	0x08000979
 8000944:	08000979 	.word	0x08000979
 8000948:	08000955 	.word	0x08000955
 800094c:	0800095d 	.word	0x0800095d
 8000950:	08000965 	.word	0x08000965
  {
  case ADMIN_ADD_ID:
    Admin_Dashboard_State = st_Admin_DisplayAddNewIDMessage;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <st_Admin_GetAdminOption+0x80>)
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <st_Admin_GetAdminOption+0x84>)
 8000958:	601a      	str	r2, [r3, #0]
    break;
 800095a:	e00e      	b.n	800097a <st_Admin_GetAdminOption+0x6e>
  case ADMIN_REMOVE_ID:
    Admin_Dashboard_State = st_Admin_DisplayRemoveIDMessage;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <st_Admin_GetAdminOption+0x80>)
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <st_Admin_GetAdminOption+0x88>)
 8000960:	601a      	str	r2, [r3, #0]
    break;
 8000962:	e00a      	b.n	800097a <st_Admin_GetAdminOption+0x6e>
  case ADMIN_SHOW_IDS_LIST:
    LCD_Clear_Screen();
 8000964:	f000 fcd6 	bl	8001314 <LCD_Clear_Screen>
    Admin_Dashboard_State = st_Admin_ShowIDsList;   
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <st_Admin_GetAdminOption+0x80>)
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <st_Admin_GetAdminOption+0x8c>)
 800096c:	601a      	str	r2, [r3, #0]
    break;
 800096e:	e004      	b.n	800097a <st_Admin_GetAdminOption+0x6e>
  case ADMIN_LOGOUT:
    Admin_Dashboard_State = st_Admin_InitialMessage;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <st_Admin_GetAdminOption+0x80>)
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <st_Admin_GetAdminOption+0x90>)
 8000974:	601a      	str	r2, [r3, #0]
    break;
 8000976:	e000      	b.n	800097a <st_Admin_GetAdminOption+0x6e>
  
  default:
    break;
 8000978:	bf00      	nop
  }

  currentOperation = pressedKey;
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <st_Admin_GetAdminOption+0x7c>)
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <st_Admin_GetAdminOption+0x94>)
 8000980:	701a      	strb	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000034 	.word	0x20000034
 800098c:	200000d0 	.word	0x200000d0
 8000990:	08000279 	.word	0x08000279
 8000994:	080004f9 	.word	0x080004f9
 8000998:	08000add 	.word	0x08000add
 800099c:	080005b1 	.word	0x080005b1
 80009a0:	20000045 	.word	0x20000045

080009a4 <st_Admin_AddNewID>:
* @brief		  :   Function to add a new authorized ID to the garage.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_AddNewID(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    LCD_Cursor_XY(LCD_FIRST_LINE, 9 + userInputCount);
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <st_Admin_AddNewID+0x88>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3309      	adds	r3, #9
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 fc66 	bl	8001284 <LCD_Cursor_XY>
    
    pressedKey = Keypad_Get_Char();
 80009b8:	f000 fa16 	bl	8000de8 <Keypad_Get_Char>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <st_Admin_AddNewID+0x8c>)
 80009c2:	701a      	strb	r2, [r3, #0]

    if(pressedKey != NULL_CHAR)
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <st_Admin_AddNewID+0x8c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b4e      	cmp	r3, #78	; 0x4e
 80009ca:	d011      	beq.n	80009f0 <st_Admin_AddNewID+0x4c>
    {   
        LCD_Send_Char(pressedKey);
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <st_Admin_AddNewID+0x8c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fbcb 	bl	800116c <LCD_Send_Char>
        Glob_tempDriverIDinput[userInputCount] = pressedKey;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <st_Admin_AddNewID+0x88>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <st_Admin_AddNewID+0x8c>)
 80009de:	7819      	ldrb	r1, [r3, #0]
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <st_Admin_AddNewID+0x90>)
 80009e2:	5499      	strb	r1, [r3, r2]
        userInputCount++;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <st_Admin_AddNewID+0x88>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <st_Admin_AddNewID+0x88>)
 80009ee:	701a      	strb	r2, [r3, #0]
    }else{
        
    }

    if(userInputCount >= AUTHORIZED_ID_SIZE)
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <st_Admin_AddNewID+0x88>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d914      	bls.n	8000a22 <st_Admin_AddNewID+0x7e>
    {
        Glob_tempDriverIDinput[userInputCount] = '\0';
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <st_Admin_AddNewID+0x88>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <st_Admin_AddNewID+0x90>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <st_Admin_AddNewID+0x88>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]

        /*If there is no registerd IDs in the system no need to check if the ID is repeated*/
        if(Glob_AuthIDsCount == 0)
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <st_Admin_AddNewID+0x94>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <st_Admin_AddNewID+0x76>
        {
          /*Set next state*/
          Admin_Dashboard_State = st_Admin_AddedIDsuccessfully;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <st_Admin_AddNewID+0x98>)
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <st_Admin_AddNewID+0x9c>)
 8000a16:	601a      	str	r2, [r3, #0]

    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_AddNewID;
    }
}
 8000a18:	e006      	b.n	8000a28 <st_Admin_AddNewID+0x84>
          Admin_Dashboard_State = st_Admin_CheckRepeatedID;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <st_Admin_AddNewID+0x98>)
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <st_Admin_AddNewID+0xa0>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	e002      	b.n	8000a28 <st_Admin_AddNewID+0x84>
        Admin_Dashboard_State = st_Admin_AddNewID;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <st_Admin_AddNewID+0x98>)
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <st_Admin_AddNewID+0xa4>)
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000035 	.word	0x20000035
 8000a30:	20000034 	.word	0x20000034
 8000a34:	20000048 	.word	0x20000048
 8000a38:	20000060 	.word	0x20000060
 8000a3c:	200000d0 	.word	0x200000d0
 8000a40:	080002d1 	.word	0x080002d1
 8000a44:	08000425 	.word	0x08000425
 8000a48:	080009a5 	.word	0x080009a5

08000a4c <st_Admin_RemoveID>:
* @brief		  :   Function to remove an existing authorized ID from the garage.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_RemoveID(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
LCD_Cursor_XY(LCD_FIRST_LINE, 9 + userInputCount);
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3309      	adds	r3, #9
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 fc12 	bl	8001284 <LCD_Cursor_XY>
    
    pressedKey = Keypad_Get_Char();
 8000a60:	f000 f9c2 	bl	8000de8 <Keypad_Get_Char>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <st_Admin_RemoveID+0x7c>)
 8000a6a:	701a      	strb	r2, [r3, #0]

    if(pressedKey != NULL_CHAR)
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <st_Admin_RemoveID+0x7c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b4e      	cmp	r3, #78	; 0x4e
 8000a72:	d011      	beq.n	8000a98 <st_Admin_RemoveID+0x4c>
    {   
        LCD_Send_Char(pressedKey);
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <st_Admin_RemoveID+0x7c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fb77 	bl	800116c <LCD_Send_Char>
        Glob_tempDriverIDinput[userInputCount] = pressedKey;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <st_Admin_RemoveID+0x7c>)
 8000a86:	7819      	ldrb	r1, [r3, #0]
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <st_Admin_RemoveID+0x80>)
 8000a8a:	5499      	strb	r1, [r3, r2]
        userInputCount++;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000a96:	701a      	strb	r2, [r3, #0]
    }else{
        
    }

    if(userInputCount >= AUTHORIZED_ID_SIZE)
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d90c      	bls.n	8000aba <st_Admin_RemoveID+0x6e>
    {
        Glob_tempDriverIDinput[userInputCount] = '\0';
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <st_Admin_RemoveID+0x80>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5499      	strb	r1, [r3, r2]
        userInputCount = 0;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <st_Admin_RemoveID+0x78>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]

        Admin_Dashboard_State = st_Admin_CheckRepeatedID;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <st_Admin_RemoveID+0x84>)
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <st_Admin_RemoveID+0x88>)
 8000ab6:	601a      	str	r2, [r3, #0]
    }else{
        /*Stay in the same state*/
        Admin_Dashboard_State = st_Admin_AddNewID;
    }
}
 8000ab8:	e002      	b.n	8000ac0 <st_Admin_RemoveID+0x74>
        Admin_Dashboard_State = st_Admin_AddNewID;
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <st_Admin_RemoveID+0x84>)
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <st_Admin_RemoveID+0x8c>)
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000035 	.word	0x20000035
 8000ac8:	20000034 	.word	0x20000034
 8000acc:	20000048 	.word	0x20000048
 8000ad0:	200000d0 	.word	0x200000d0
 8000ad4:	08000425 	.word	0x08000425
 8000ad8:	080009a5 	.word	0x080009a5

08000adc <st_Admin_ShowIDsList>:
* @brief		  :   Function to show all the authorized IDs in the system.
* Note			  :   none.
======================================================================================================================
*/
void st_Admin_ShowIDsList(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  static uint8 printedIDcounter = 0;

  if(Glob_AuthIDsCount > 0)
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <st_Admin_ShowIDsList+0x68>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d011      	beq.n	8000b0c <st_Admin_ShowIDsList+0x30>
  {
    LCD_Send_String(Glob_DriversIDsList[printedIDcounter]);
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <st_Admin_ShowIDsList+0x6c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <st_Admin_ShowIDsList+0x70>)
 8000af0:	4413      	add	r3, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fbb2 	bl	800125c <LCD_Send_String>
    LCD_Send_Char(',');
 8000af8:	202c      	movs	r0, #44	; 0x2c
 8000afa:	f000 fb37 	bl	800116c <LCD_Send_Char>

    printedIDcounter++;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <st_Admin_ShowIDsList+0x6c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <st_Admin_ShowIDsList+0x6c>)
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e002      	b.n	8000b12 <st_Admin_ShowIDsList+0x36>
  }else{

    LCD_Send_String(stringfy("List Empty"));
 8000b0c:	4810      	ldr	r0, [pc, #64]	; (8000b50 <st_Admin_ShowIDsList+0x74>)
 8000b0e:	f000 fba5 	bl	800125c <LCD_Send_String>
  }


  if(printedIDcounter >= Glob_AuthIDsCount)
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <st_Admin_ShowIDsList+0x6c>)
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <st_Admin_ShowIDsList+0x68>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d30d      	bcc.n	8000b3a <st_Admin_ShowIDsList+0x5e>
  {
    printedIDcounter = 0;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <st_Admin_ShowIDsList+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]

    LCD_Cursor_XY(LCD_FOURTH_LINE, 0);
 8000b24:	2100      	movs	r1, #0
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 fbac 	bl	8001284 <LCD_Cursor_XY>
    LCD_Send_String(stringfy("main menu => '*'"));
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <st_Admin_ShowIDsList+0x78>)
 8000b2e:	f000 fb95 	bl	800125c <LCD_Send_String>

    Admin_Dashboard_State = st_Admin_BacktoMainMenu;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <st_Admin_ShowIDsList+0x7c>)
 8000b34:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <st_Admin_ShowIDsList+0x80>)
 8000b36:	601a      	str	r2, [r3, #0]
  }else{

    Admin_Dashboard_State = st_Admin_ShowIDsList;
  }
}
 8000b38:	e002      	b.n	8000b40 <st_Admin_ShowIDsList+0x64>
    Admin_Dashboard_State = st_Admin_ShowIDsList;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <st_Admin_ShowIDsList+0x7c>)
 8000b3c:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <st_Admin_ShowIDsList+0x84>)
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000060 	.word	0x20000060
 8000b48:	20000063 	.word	0x20000063
 8000b4c:	2000004c 	.word	0x2000004c
 8000b50:	080022f4 	.word	0x080022f4
 8000b54:	080021e8 	.word	0x080021e8
 8000b58:	200000d0 	.word	0x200000d0
 8000b5c:	08000249 	.word	0x08000249
 8000b60:	08000add 	.word	0x08000add

08000b64 <SPI_TXEmpty_ISR_Callback>:

/** @defgroup ISR_CALLBACK_DEFINITIONS
  * @{
  */
void SPI_TXEmpty_ISR_Callback(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
    static uint8 LOC_u8TransmitCounter = 0;
    
    
    if(LOC_u8TransmitCounter == 0)
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d105      	bne.n	8000b7e <SPI_TXEmpty_ISR_Callback+0x1a>
    {
        MCAL_SPI_ReceiveData(SPI1, (uint16 *)&LOC_sTempRequest.GateAddress, PollingDisable);
 8000b72:	2201      	movs	r2, #1
 8000b74:	491c      	ldr	r1, [pc, #112]	; (8000be8 <SPI_TXEmpty_ISR_Callback+0x84>)
 8000b76:	481d      	ldr	r0, [pc, #116]	; (8000bec <SPI_TXEmpty_ISR_Callback+0x88>)
 8000b78:	f001 f93e 	bl	8001df8 <MCAL_SPI_ReceiveData>
 8000b7c:	e00a      	b.n	8000b94 <SPI_TXEmpty_ISR_Callback+0x30>
    }else{
        MCAL_SPI_ReceiveData(SPI1, (uint16 *)&LOC_sTempRequest.szDriverID[LOC_u8TransmitCounter - 1], PollingDisable);
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <SPI_TXEmpty_ISR_Callback+0x84>)
 8000b86:	4413      	add	r3, r2
 8000b88:	3301      	adds	r3, #1
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4817      	ldr	r0, [pc, #92]	; (8000bec <SPI_TXEmpty_ISR_Callback+0x88>)
 8000b90:	f001 f932 	bl	8001df8 <MCAL_SPI_ReceiveData>
    }

    LOC_u8TransmitCounter++;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000b9e:	701a      	strb	r2, [r3, #0]

    /*If we received all the required information add it to the queue*/
    if(LOC_u8TransmitCounter == 4)
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d110      	bne.n	8000bca <SPI_TXEmpty_ISR_Callback+0x66>
    {
        LOC_sTempRequest.szDriverID[LOC_u8TransmitCounter - 1] = '\0';
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <SPI_TXEmpty_ISR_Callback+0x84>)
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	705a      	strb	r2, [r3, #1]
        
        LOC_u8TransmitCounter = 0;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <SPI_TXEmpty_ISR_Callback+0x80>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

        FIFO_enqueue(&LOC_sQueueBuffer, LOC_sTempRequest);
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <SPI_TXEmpty_ISR_Callback+0x84>)
 8000bbe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <SPI_TXEmpty_ISR_Callback+0x8c>)
 8000bc4:	f000 fbd8 	bl	8001378 <FIFO_enqueue>
        uint16 *LOC_pu16TxBuffer;
        *LOC_pu16TxBuffer = 0x0000u;

        MCAL_SPI_SendData(SPI1, LOC_pu16TxBuffer, PollingDisable);    
    }
}
 8000bc8:	e007      	b.n	8000bda <SPI_TXEmpty_ISR_Callback+0x76>
        *LOC_pu16TxBuffer = 0x0000u;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	801a      	strh	r2, [r3, #0]
        MCAL_SPI_SendData(SPI1, LOC_pu16TxBuffer, PollingDisable);    
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <SPI_TXEmpty_ISR_Callback+0x88>)
 8000bd6:	f001 f8d7 	bl	8001d88 <MCAL_SPI_SendData>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000089 	.word	0x20000089
 8000be8:	20000084 	.word	0x20000084
 8000bec:	40013000 	.word	0x40013000
 8000bf0:	20000070 	.word	0x20000070

08000bf4 <EXTI_Line4_ISR_Callback>:

void EXTI_Line4_ISR_Callback(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
    uint16 *LOC_pu16TxBuffer;
    *LOC_pu16TxBuffer = 0xFFFFu;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c00:	801a      	strh	r2, [r3, #0]


    MCAL_SPI_SendData(SPI1, LOC_pu16TxBuffer, PollingDisable);
 8000c02:	2201      	movs	r2, #1
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <EXTI_Line4_ISR_Callback+0x20>)
 8000c08:	f001 f8be 	bl	8001d88 <MCAL_SPI_SendData>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40013000 	.word	0x40013000

08000c18 <SPI_Init>:

/** @defgroup Private Functions
  * @{
  */
void SPI_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
    uint16 *dummy;
    SPI_Config_t config;
	config.SPI_Mode = SPI_MODE_MASTER;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	80bb      	strh	r3, [r7, #4]
	config.SPI_Direction = SPI_DIRECTION_2LINES_FULL_DUPLEX;
 8000c22:	2300      	movs	r3, #0
 8000c24:	80fb      	strh	r3, [r7, #6]
	config.SPI_DataSize = SPI_DATA_SIZE_8BIT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	813b      	strh	r3, [r7, #8]
	config.SPI_BitOrder = SPI_FIRST_BIT_LSB;
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	817b      	strh	r3, [r7, #10]
	config.SPI_ClockPolarity = SPI_IDLE_HIGH;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	81bb      	strh	r3, [r7, #12]
	config.SPI_ClockPhase = SPI_SAMPLE_SECOND_EDGE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	81fb      	strh	r3, [r7, #14]
	config.SPI_NSS_Managment = SPI_NSS_SW_SET;
 8000c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3a:	823b      	strh	r3, [r7, #16]
	config.SPI_BR_Prescaler = SPI_BAUD_RATE_PRESCALER_8;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	827b      	strh	r3, [r7, #18]

	MCAL_SPI_Init(SPI1, &config);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <SPI_Init+0x5c>)
 8000c46:	f001 f829 	bl	8001c9c <MCAL_SPI_Init>
    *dummy = 0x0000;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
    MCAL_SPI_SendData(SPI1, dummy, PollingEnable);
 8000c50:	2200      	movs	r2, #0
 8000c52:	6979      	ldr	r1, [r7, #20]
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <SPI_Init+0x5c>)
 8000c56:	f001 f897 	bl	8001d88 <MCAL_SPI_SendData>
    
    MCAL_SPI_Interrupt_EN(SPI1, SPI_IRQ_TXEIE, SPI_TXEmpty_ISR_Callback);
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <SPI_Init+0x60>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <SPI_Init+0x5c>)
 8000c60:	f001 f90c 	bl	8001e7c <MCAL_SPI_Interrupt_EN>

    /*Give the SPI interrupt higher priority as it's more important*/
    MCAL_NVIC_SetPriority(NVIC_SPI1_IVT_INDEX, NVIC_PRIORITY_5);
 8000c64:	2105      	movs	r1, #5
 8000c66:	2023      	movs	r0, #35	; 0x23
 8000c68:	f000 feca 	bl	8001a00 <MCAL_NVIC_SetPriority>
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40013000 	.word	0x40013000
 8000c78:	08000b65 	.word	0x08000b65

08000c7c <EXTI_Init>:

void EXTI_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
    EXTI_config_t config;

    config.PinConfig = EXTI_GPIOA_PIN4;
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <EXTI_Init+0x30>)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    config.EXTI_Trigger_Mode = EXTI_TRIGGER_BOTH_EDGES;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	743b      	strb	r3, [r7, #16]
    config.EXTI_En = EXTI_ENABLE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	747b      	strb	r3, [r7, #17]
    config.EXTI_Priority = NVIC_PRIORITY_10;
 8000c94:	230a      	movs	r3, #10
 8000c96:	74bb      	strb	r3, [r7, #18]
    config.P_callback_func = EXTI_Line4_ISR_Callback;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <EXTI_Init+0x34>)
 8000c9a:	617b      	str	r3, [r7, #20]

    MCAL_EXTI_Enable(&config);
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fc28 	bl	80014f4 <MCAL_EXTI_Enable>
}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08002300 	.word	0x08002300
 8000cb0:	08000bf5 	.word	0x08000bf5

08000cb4 <FIFOBuff_Init>:


void FIFOBuff_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    FIFO_init(&LOC_sQueueBuffer, LOC_szGatesRequests, MAX_NUMBER_OF_REQUESTS);
 8000cb8:	2202      	movs	r2, #2
 8000cba:	4903      	ldr	r1, [pc, #12]	; (8000cc8 <FIFOBuff_Init+0x14>)
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <FIFOBuff_Init+0x18>)
 8000cbe:	f000 fb3b 	bl	8001338 <FIFO_init>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000064 	.word	0x20000064
 8000ccc:	20000070 	.word	0x20000070

08000cd0 <st_GatesComm_Init>:
/**
 * @brief This state initializes the main components needed for the communication module.
 * 
 */
void st_GatesComm_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    /*Initialize the SPI module to communicate with the gates ECUs*/
    SPI_Init();
 8000cd4:	f7ff ffa0 	bl	8000c18 <SPI_Init>

    /*Initialize the EXTI module to communicate with the gates ECUs*/
    EXTI_Init();
 8000cd8:	f7ff ffd0 	bl	8000c7c <EXTI_Init>

    /*Initialize the queue to store the gates requests*/
    FIFOBuff_Init();
 8000cdc:	f7ff ffea 	bl	8000cb4 <FIFOBuff_Init>

    /*Set the initial state*/
    fptr_GateCommState = st_GatesComm_CheckPendingRequests;
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <st_GatesComm_Init+0x1c>)
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <st_GatesComm_Init+0x20>)
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000cc 	.word	0x200000cc
 8000cf0:	08000cf5 	.word	0x08000cf5

08000cf4 <st_GatesComm_CheckPendingRequests>:
/**
 * @brief This state checks if there are any pending requests that needs processing.
 * 
 */
void st_GatesComm_CheckPendingRequests(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    sGateRequestInfo_t request;
    if(LOC_sQueueBuffer.size == 2)
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <st_GatesComm_CheckPendingRequests+0x60>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d123      	bne.n	8000d4a <st_GatesComm_CheckPendingRequests+0x56>
    {
        LCD_Cursor_XY(LCD_FIRST_LINE, 0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 fabd 	bl	8001284 <LCD_Cursor_XY>

        FIFO_dequeue(&LOC_sQueueBuffer, &request);
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4811      	ldr	r0, [pc, #68]	; (8000d54 <st_GatesComm_CheckPendingRequests+0x60>)
 8000d10:	f000 fb7c 	bl	800140c <FIFO_dequeue>
        LCD_Send_Char(request.GateAddress);
 8000d14:	783b      	ldrb	r3, [r7, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fa28 	bl	800116c <LCD_Send_Char>
        LCD_Send_String(request.szDriverID);
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fa9b 	bl	800125c <LCD_Send_String>

        LCD_Cursor_XY(LCD_SECOND_LINE, 0);
 8000d26:	2100      	movs	r1, #0
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 faab 	bl	8001284 <LCD_Cursor_XY>
        FIFO_dequeue(&LOC_sQueueBuffer, &request);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <st_GatesComm_CheckPendingRequests+0x60>)
 8000d34:	f000 fb6a 	bl	800140c <FIFO_dequeue>
        LCD_Send_String(request.szDriverID);
 8000d38:	463b      	mov	r3, r7
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fa8d 	bl	800125c <LCD_Send_String>
        LCD_Send_Char(request.GateAddress);
 8000d42:	783b      	ldrb	r3, [r7, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fa11 	bl	800116c <LCD_Send_Char>
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000070 	.word	0x20000070

08000d58 <Keypad_Init>:
 * @return_value:   none.
 * Note			:   none.
============================================================================================================
 */
void Keypad_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	GPIO_Pin_Config_t config;

	/*Keypad row pins as input with pull-up resistance*/
	config.pinNumber = KEYPAD_ROW0;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000d62:	2308      	movs	r3, #8
 8000d64:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481e      	ldr	r0, [pc, #120]	; (8000de4 <Keypad_Init+0x8c>)
 8000d6c:	f000 fd72 	bl	8001854 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_ROW1;
 8000d70:	230d      	movs	r3, #13
 8000d72:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000d74:	2308      	movs	r3, #8
 8000d76:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <Keypad_Init+0x8c>)
 8000d7e:	f000 fd69 	bl	8001854 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_ROW2;
 8000d82:	230e      	movs	r3, #14
 8000d84:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000d86:	2308      	movs	r3, #8
 8000d88:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <Keypad_Init+0x8c>)
 8000d90:	f000 fd60 	bl	8001854 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_ROW3;
 8000d94:	230f      	movs	r3, #15
 8000d96:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_INPUT_PU;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <Keypad_Init+0x8c>)
 8000da2:	f000 fd57 	bl	8001854 <MCAL_GPIO_Init>

	/*Keypad column pins as output*/
	config.pinNumber = KEYPAD_COL0;
 8000da6:	230b      	movs	r3, #11
 8000da8:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000daa:	2301      	movs	r3, #1
 8000dac:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <Keypad_Init+0x8c>)
 8000db4:	f000 fd4e 	bl	8001854 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_COL1;
 8000db8:	2309      	movs	r3, #9
 8000dba:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <Keypad_Init+0x8c>)
 8000dc6:	f000 fd45 	bl	8001854 <MCAL_GPIO_Init>

	config.pinNumber = KEYPAD_COL2;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	80bb      	strh	r3, [r7, #4]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(KEYPAD_DATA_PORT, &config);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <Keypad_Init+0x8c>)
 8000dd8:	f000 fd3c 	bl	8001854 <MCAL_GPIO_Init>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <Keypad_Get_Char>:
                :   Or NULL_CHAR if no key was pressed.
 * Note			:   none.
============================================================================================================
 */
uint8 Keypad_Get_Char(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
	uint8 keypad_chars[] = KEYPAD_KEYS;
 8000dee:	4a3a      	ldr	r2, [pc, #232]	; (8000ed8 <Keypad_Get_Char+0xf0>)
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

 	uint8 KeypadRowPins[] = {KEYPAD_ROW0, KEYPAD_ROW1, KEYPAD_ROW2, KEYPAD_ROW3};
 8000dfa:	4b38      	ldr	r3, [pc, #224]	; (8000edc <Keypad_Get_Char+0xf4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	607b      	str	r3, [r7, #4]
 	uint8 KeypadColPins[] = {KEYPAD_COL0, KEYPAD_COL1, KEYPAD_COL2};
 8000e00:	4a37      	ldr	r2, [pc, #220]	; (8000ee0 <Keypad_Get_Char+0xf8>)
 8000e02:	463b      	mov	r3, r7
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	4611      	mov	r1, r2
 8000e08:	8019      	strh	r1, [r3, #0]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	0c12      	lsrs	r2, r2, #16
 8000e0e:	701a      	strb	r2, [r3, #0]

	uint8 col, row, pressedKey;

	pressedKey = NULL_CHAR;
 8000e10:	234e      	movs	r3, #78	; 0x4e
 8000e12:	757b      	strb	r3, [r7, #21]
	for(col = 0; col <  KEYPAD_COL_SIZE; col++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	75fb      	strb	r3, [r7, #23]
 8000e18:	e053      	b.n	8000ec2 <Keypad_Get_Char+0xda>
	{
		/*High on all column pins */
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KEYPAD_COL0, GPIO_PIN_HIGH);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	210b      	movs	r1, #11
 8000e1e:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <Keypad_Get_Char+0xfc>)
 8000e20:	f000 fd8b 	bl	800193a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KEYPAD_COL1, GPIO_PIN_HIGH);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2109      	movs	r1, #9
 8000e28:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <Keypad_Get_Char+0xfc>)
 8000e2a:	f000 fd86 	bl	800193a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KEYPAD_COL2, GPIO_PIN_HIGH);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2108      	movs	r1, #8
 8000e32:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <Keypad_Get_Char+0xfc>)
 8000e34:	f000 fd81 	bl	800193a <MCAL_GPIO_WritePin>

		/*Low output on the column to be tested.*/
		MCAL_GPIO_WritePin(KEYPAD_DATA_PORT, KeypadColPins[col], GPIO_PIN_LOW);
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	f107 0218 	add.w	r2, r7, #24
 8000e3e:	4413      	add	r3, r2
 8000e40:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <Keypad_Get_Char+0xfc>)
 8000e4c:	f000 fd75 	bl	800193a <MCAL_GPIO_WritePin>

		for(row = 0; row < KEYPAD_ROW_SIZE; row++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	75bb      	strb	r3, [r7, #22]
 8000e54:	e02c      	b.n	8000eb0 <Keypad_Get_Char+0xc8>
		{
			/*Loop on all the buttons in this coloumn to
            see if any of them dropped to ground*/
			if(MCAL_GPIO_ReadPin(KEYPAD_DATA_PORT, KeypadRowPins[row]) == GPIO_PIN_LOW)
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	f107 0218 	add.w	r2, r7, #24
 8000e5c:	4413      	add	r3, r2
 8000e5e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <Keypad_Get_Char+0xfc>)
 8000e68:	f000 fd4b 	bl	8001902 <MCAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d11b      	bne.n	8000eaa <Keypad_Get_Char+0xc2>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_DATA_PORT, KeypadRowPins[row]) == GPIO_PIN_LOW)
 8000e72:	bf00      	nop
 8000e74:	7dbb      	ldrb	r3, [r7, #22]
 8000e76:	f107 0218 	add.w	r2, r7, #24
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <Keypad_Get_Char+0xfc>)
 8000e86:	f000 fd3c 	bl	8001902 <MCAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f1      	beq.n	8000e74 <Keypad_Get_Char+0x8c>
				{

				}

				pressedKey = keypad_chars[(row * KEYPAD_COL_SIZE) + col];
 8000e90:	7dba      	ldrb	r2, [r7, #22]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	441a      	add	r2, r3
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f107 0218 	add.w	r2, r7, #24
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ea6:	757b      	strb	r3, [r7, #21]
				break;
 8000ea8:	e005      	b.n	8000eb6 <Keypad_Get_Char+0xce>
		for(row = 0; row < KEYPAD_ROW_SIZE; row++)
 8000eaa:	7dbb      	ldrb	r3, [r7, #22]
 8000eac:	3301      	adds	r3, #1
 8000eae:	75bb      	strb	r3, [r7, #22]
 8000eb0:	7dbb      	ldrb	r3, [r7, #22]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d9cf      	bls.n	8000e56 <Keypad_Get_Char+0x6e>
			}
		}

		if(pressedKey != NULL_CHAR)
 8000eb6:	7d7b      	ldrb	r3, [r7, #21]
 8000eb8:	2b4e      	cmp	r3, #78	; 0x4e
 8000eba:	d106      	bne.n	8000eca <Keypad_Get_Char+0xe2>
	for(col = 0; col <  KEYPAD_COL_SIZE; col++)
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	75fb      	strb	r3, [r7, #23]
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d9a8      	bls.n	8000e1a <Keypad_Get_Char+0x32>
 8000ec8:	e000      	b.n	8000ecc <Keypad_Get_Char+0xe4>
		{
			break;
 8000eca:	bf00      	nop
		}
	}
	return pressedKey;
 8000ecc:	7d7b      	ldrb	r3, [r7, #21]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800230c 	.word	0x0800230c
 8000edc:	08002318 	.word	0x08002318
 8000ee0:	0800231c 	.word	0x0800231c
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <_delay_ms>:
 * @return_value :	none.
 * Note			:	This isn't an accurate function.
============================================================================================================
 */
void _delay_ms(uint8 delay_Counter)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	volatile uint8 i, j;
	for(i = 0; i < delay_Counter; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e010      	b.n	8000f1a <_delay_ms+0x32>
	{
		for ( j = 0; j < 100; j++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73bb      	strb	r3, [r7, #14]
 8000efc:	e004      	b.n	8000f08 <_delay_ms+0x20>
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	73bb      	strb	r3, [r7, #14]
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b63      	cmp	r3, #99	; 0x63
 8000f0e:	d9f6      	bls.n	8000efe <_delay_ms+0x16>
	for(i = 0; i < delay_Counter; i++)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8e9      	bhi.n	8000ef8 <_delay_ms+0x10>
		{
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <LCD_Enable_Pulse>:
 * @return_value :	none.
 * Note			:	none.
============================================================================================================
 */
void LCD_Enable_Pulse()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_HIGH);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2105      	movs	r1, #5
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <LCD_Enable_Pulse+0x24>)
 8000f3a:	f000 fcfe 	bl	800193a <MCAL_GPIO_WritePin>
	_delay_ms(50);
 8000f3e:	2032      	movs	r0, #50	; 0x32
 8000f40:	f7ff ffd2 	bl	8000ee8 <_delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2105      	movs	r1, #5
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <LCD_Enable_Pulse+0x24>)
 8000f4a:	f000 fcf6 	bl	800193a <MCAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <Check_End_Of_Line>:
 * @return_value :	none.
 * Note			:	none.
============================================================================================================
 */
void Check_End_Of_Line()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <Check_End_Of_Line+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d913      	bls.n	8000f8c <Check_End_Of_Line+0x34>
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <Check_End_Of_Line+0x64>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d80f      	bhi.n	8000f8c <Check_End_Of_Line+0x34>
	{
		charCounter = 0;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <Check_End_Of_Line+0x60>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		lineCounter++;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <Check_End_Of_Line+0x64>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <Check_End_Of_Line+0x64>)
 8000f7c:	701a      	strb	r2, [r3, #0]
		LCD_Cursor_XY(lineCounter, 0);
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <Check_End_Of_Line+0x64>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f97d 	bl	8001284 <LCD_Cursor_XY>
		LCD_Clear_Screen();
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
		charCounter = 0;
		lineCounter = 0;
	}
}
 8000f8a:	e012      	b.n	8000fb2 <Check_End_Of_Line+0x5a>
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <Check_End_Of_Line+0x60>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d90e      	bls.n	8000fb2 <Check_End_Of_Line+0x5a>
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <Check_End_Of_Line+0x64>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d10a      	bne.n	8000fb2 <Check_End_Of_Line+0x5a>
		LCD_Clear_Screen();
 8000f9c:	f000 f9ba 	bl	8001314 <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	f000 f875 	bl	8001090 <LCD_Send_Command>
		charCounter = 0;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <Check_End_Of_Line+0x60>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
		lineCounter = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <Check_End_Of_Line+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000008a 	.word	0x2000008a
 8000fbc:	2000008b 	.word	0x2000008b

08000fc0 <LCD_Init>:
 * @return_value :   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	/*Wait for the VCC to rise to the required value*/
	_delay_ms(20);
 8000fc4:	2014      	movs	r0, #20
 8000fc6:	f7ff ff8f 	bl	8000ee8 <_delay_ms>

	/*Set all CTRL bits as output*/
	config.pinNumber = LCD_RS_PIN;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <LCD_Init+0xc4>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <LCD_Init+0xc4>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
 8000fd6:	492b      	ldr	r1, [pc, #172]	; (8001084 <LCD_Init+0xc4>)
 8000fd8:	482b      	ldr	r0, [pc, #172]	; (8001088 <LCD_Init+0xc8>)
 8000fda:	f000 fc3b 	bl	8001854 <MCAL_GPIO_Init>

	config.pinNumber = LCD_EN_PIN;
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <LCD_Init+0xc4>)
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <LCD_Init+0xc4>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
 8000fea:	4926      	ldr	r1, [pc, #152]	; (8001084 <LCD_Init+0xc4>)
 8000fec:	4826      	ldr	r0, [pc, #152]	; (8001088 <LCD_Init+0xc8>)
 8000fee:	f000 fc31 	bl	8001854 <MCAL_GPIO_Init>


	/*Select ins register, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	4824      	ldr	r0, [pc, #144]	; (8001088 <LCD_Init+0xc8>)
 8000ff8:	f000 fc9f 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_INS_REG);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2104      	movs	r1, #4
 8001000:	4821      	ldr	r0, [pc, #132]	; (8001088 <LCD_Init+0xc8>)
 8001002:	f000 fc9a 	bl	800193a <MCAL_GPIO_WritePin>
	_delay_ms(15);
 8001006:	200f      	movs	r0, #15
 8001008:	f7ff ff6e 	bl	8000ee8 <_delay_ms>
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);

	LCD_Send_Command(LCD_FUNC_8BIT_2LINES);
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*In case of 4 bits mode the upper 4 pins of the port are output*/
	config.pinNumber = LCD_D4;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <LCD_Init+0xc4>)
 800100e:	220a      	movs	r2, #10
 8001010:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <LCD_Init+0xc4>)
 8001014:	2201      	movs	r2, #1
 8001016:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8001018:	491a      	ldr	r1, [pc, #104]	; (8001084 <LCD_Init+0xc4>)
 800101a:	481c      	ldr	r0, [pc, #112]	; (800108c <LCD_Init+0xcc>)
 800101c:	f000 fc1a 	bl	8001854 <MCAL_GPIO_Init>
	
	config.pinNumber = LCD_D5;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <LCD_Init+0xc4>)
 8001022:	220b      	movs	r2, #11
 8001024:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <LCD_Init+0xc4>)
 8001028:	2201      	movs	r2, #1
 800102a:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 800102c:	4915      	ldr	r1, [pc, #84]	; (8001084 <LCD_Init+0xc4>)
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <LCD_Init+0xcc>)
 8001030:	f000 fc10 	bl	8001854 <MCAL_GPIO_Init>
	
	config.pinNumber = LCD_D6;
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <LCD_Init+0xc4>)
 8001036:	220c      	movs	r2, #12
 8001038:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <LCD_Init+0xc4>)
 800103c:	2201      	movs	r2, #1
 800103e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8001040:	4910      	ldr	r1, [pc, #64]	; (8001084 <LCD_Init+0xc4>)
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <LCD_Init+0xcc>)
 8001044:	f000 fc06 	bl	8001854 <MCAL_GPIO_Init>
	
	config.pinNumber = LCD_D7;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <LCD_Init+0xc4>)
 800104a:	220f      	movs	r2, #15
 800104c:	801a      	strh	r2, [r3, #0]
	config.pinMode = GPIO_MODE_GP_OUTPUT_PP_10MHZ;
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <LCD_Init+0xc4>)
 8001050:	2201      	movs	r2, #1
 8001052:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_DATA_PORT, &config);
 8001054:	490b      	ldr	r1, [pc, #44]	; (8001084 <LCD_Init+0xc4>)
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <LCD_Init+0xcc>)
 8001058:	f000 fbfc 	bl	8001854 <MCAL_GPIO_Init>

	_delay_ms(5);
 800105c:	2005      	movs	r0, #5
 800105e:	f7ff ff43 	bl	8000ee8 <_delay_ms>

	LCD_Send_Command(LCD_RETURN_HOME);
 8001062:	2002      	movs	r0, #2
 8001064:	f000 f814 	bl	8001090 <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNC_4BIT_2LINES);
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f000 f811 	bl	8001090 <LCD_Send_Command>
#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
 800106e:	2006      	movs	r0, #6
 8001070:	f000 f80e 	bl	8001090 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 8001074:	2080      	movs	r0, #128	; 0x80
 8001076:	f000 f80b 	bl	8001090 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISPLAY_ON_CURSOR_BLINK);
 800107a:	200f      	movs	r0, #15
 800107c:	f000 f808 	bl	8001090 <LCD_Send_Command>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200000d4 	.word	0x200000d4
 8001088:	40010c00 	.word	0x40010c00
 800108c:	40010800 	.word	0x40010800

08001090 <LCD_Send_Command>:
 * @return_value :   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Send_Command(uint8 command)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/

	/*Select ins register, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_INS_REG);
 800109a:	2200      	movs	r2, #0
 800109c:	2104      	movs	r1, #4
 800109e:	4831      	ldr	r0, [pc, #196]	; (8001164 <LCD_Send_Command+0xd4>)
 80010a0:	f000 fc4b 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2105      	movs	r1, #5
 80010a8:	482e      	ldr	r0, [pc, #184]	; (8001164 <LCD_Send_Command+0xd4>)
 80010aa:	f000 fc46 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(command, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the command upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(command, 4));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	111b      	asrs	r3, r3, #4
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	210a      	movs	r1, #10
 80010be:	482a      	ldr	r0, [pc, #168]	; (8001168 <LCD_Send_Command+0xd8>)
 80010c0:	f000 fc3b 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(command, 5));
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	115b      	asrs	r3, r3, #5
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	210b      	movs	r1, #11
 80010d4:	4824      	ldr	r0, [pc, #144]	; (8001168 <LCD_Send_Command+0xd8>)
 80010d6:	f000 fc30 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(command, 6));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	119b      	asrs	r3, r3, #6
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	210c      	movs	r1, #12
 80010ea:	481f      	ldr	r0, [pc, #124]	; (8001168 <LCD_Send_Command+0xd8>)
 80010ec:	f000 fc25 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(command, 7));
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	210f      	movs	r1, #15
 80010fa:	481b      	ldr	r0, [pc, #108]	; (8001168 <LCD_Send_Command+0xd8>)
 80010fc:	f000 fc1d 	bl	800193a <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8001100:	f7ff ff16 	bl	8000f30 <LCD_Enable_Pulse>

	/*Send the command lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(command, 0));
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	210a      	movs	r1, #10
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <LCD_Send_Command+0xd8>)
 8001112:	f000 fc12 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(command, 1));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	105b      	asrs	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	210b      	movs	r1, #11
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <LCD_Send_Command+0xd8>)
 8001128:	f000 fc07 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(command, 2));
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	109b      	asrs	r3, r3, #2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	210c      	movs	r1, #12
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <LCD_Send_Command+0xd8>)
 800113e:	f000 fbfc 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(command, 3));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	10db      	asrs	r3, r3, #3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	210f      	movs	r1, #15
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <LCD_Send_Command+0xd8>)
 8001154:	f000 fbf1 	bl	800193a <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8001158:	f7ff feea 	bl	8000f30 <LCD_Enable_Pulse>
#endif
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010c00 	.word	0x40010c00
 8001168:	40010800 	.word	0x40010800

0800116c <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8 data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
 8001176:	f7ff feef 	bl	8000f58 <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
 800117a:	2201      	movs	r2, #1
 800117c:	2104      	movs	r1, #4
 800117e:	4834      	ldr	r0, [pc, #208]	; (8001250 <LCD_Send_Char+0xe4>)
 8001180:	f000 fbdb 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 8001184:	2200      	movs	r2, #0
 8001186:	2105      	movs	r1, #5
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <LCD_Send_Char+0xe4>)
 800118a:	f000 fbd6 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	111b      	asrs	r3, r3, #4
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	210a      	movs	r1, #10
 800119e:	482d      	ldr	r0, [pc, #180]	; (8001254 <LCD_Send_Char+0xe8>)
 80011a0:	f000 fbcb 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	115b      	asrs	r3, r3, #5
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	210b      	movs	r1, #11
 80011b4:	4827      	ldr	r0, [pc, #156]	; (8001254 <LCD_Send_Char+0xe8>)
 80011b6:	f000 fbc0 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	119b      	asrs	r3, r3, #6
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	210c      	movs	r1, #12
 80011ca:	4822      	ldr	r0, [pc, #136]	; (8001254 <LCD_Send_Char+0xe8>)
 80011cc:	f000 fbb5 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	09db      	lsrs	r3, r3, #7
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	210f      	movs	r1, #15
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <LCD_Send_Char+0xe8>)
 80011dc:	f000 fbad 	bl	800193a <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 80011e0:	f7ff fea6 	bl	8000f30 <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	210a      	movs	r1, #10
 80011f0:	4818      	ldr	r0, [pc, #96]	; (8001254 <LCD_Send_Char+0xe8>)
 80011f2:	f000 fba2 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	105b      	asrs	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	210b      	movs	r1, #11
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <LCD_Send_Char+0xe8>)
 8001208:	f000 fb97 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	109b      	asrs	r3, r3, #2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	210c      	movs	r1, #12
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LCD_Send_Char+0xe8>)
 800121e:	f000 fb8c 	bl	800193a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	10db      	asrs	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	210f      	movs	r1, #15
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <LCD_Send_Char+0xe8>)
 8001234:	f000 fb81 	bl	800193a <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 8001238:	f7ff fe7a 	bl	8000f30 <LCD_Enable_Pulse>
#endif
	charCounter++;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <LCD_Send_Char+0xec>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LCD_Send_Char+0xec>)
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40010800 	.word	0x40010800
 8001258:	2000008a 	.word	0x2000008a

0800125c <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8* string)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	while(*string)
 8001264:	e006      	b.n	8001274 <LCD_Send_String+0x18>
	{
		LCD_Send_Char(*string++);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff7c 	bl	800116c <LCD_Send_Char>
	while(*string)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f4      	bne.n	8001266 <LCD_Send_String+0xa>
	}
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <LCD_Cursor_XY>:
 * @return_value:   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Cursor_XY(uint8 line, uint8 col)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
	/*Check if the arguments are in the allowed range*/
	if(((col >= 0) && (col < LCD_WIDTH)) && ((line >= 0) && (line < LCD_HEIGHT)))
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d833      	bhi.n	8001302 <LCD_Cursor_XY+0x7e>
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d830      	bhi.n	8001302 <LCD_Cursor_XY+0x7e>
	{
		switch (line)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d826      	bhi.n	80012f4 <LCD_Cursor_XY+0x70>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <LCD_Cursor_XY+0x28>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012cb 	.word	0x080012cb
 80012b4:	080012d9 	.word	0x080012d9
 80012b8:	080012e7 	.word	0x080012e7
		{
		case LCD_FIRST_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW + col);
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	3b80      	subs	r3, #128	; 0x80
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fee4 	bl	8001090 <LCD_Send_Command>
			break;
 80012c8:	e015      	b.n	80012f6 <LCD_Cursor_XY+0x72>
		case LCD_SECOND_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW + col);
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	3b40      	subs	r3, #64	; 0x40
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fedd 	bl	8001090 <LCD_Send_Command>
			break;
 80012d6:	e00e      	b.n	80012f6 <LCD_Cursor_XY+0x72>
		case LCD_THIRD_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_THIRD_ROW + col);
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	3b70      	subs	r3, #112	; 0x70
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fed6 	bl	8001090 <LCD_Send_Command>
			break;
 80012e4:	e007      	b.n	80012f6 <LCD_Cursor_XY+0x72>
		case LCD_FOURTH_LINE:
			LCD_Send_Command(LCD_BEGIN_AT_FOURTH_ROW + col);
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	3b30      	subs	r3, #48	; 0x30
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fecf 	bl	8001090 <LCD_Send_Command>
			break;
 80012f2:	e000      	b.n	80012f6 <LCD_Cursor_XY+0x72>

		default:
			break;
 80012f4:	bf00      	nop
		}

		lineCounter = line;
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <LCD_Cursor_XY+0x88>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	7013      	strb	r3, [r2, #0]
		charCounter = col;
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <LCD_Cursor_XY+0x8c>)
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	7013      	strb	r3, [r2, #0]
	}
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000008b 	.word	0x2000008b
 8001310:	2000008a 	.word	0x2000008a

08001314 <LCD_Clear_Screen>:
 * @return_value :   none.
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff feb9 	bl	8001090 <LCD_Send_Command>
	charCounter = 0;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <LCD_Clear_Screen+0x1c>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	lineCounter = 0;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <LCD_Clear_Screen+0x20>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000008a 	.word	0x2000008a
 8001334:	2000008b 	.word	0x2000008b

08001338 <FIFO_init>:
 */

#include "FIFO_Buff.h"

eFIFO_status_t FIFO_init(sFIFO_Buf_t* fifo_buf, element_width* buf, uint32 capacity)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
    /*Check if the buffer is valid*/
    if (!buf)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <FIFO_init+0x16>
        return FIFO_NULL;
 800134a:	2303      	movs	r3, #3
 800134c:	e00f      	b.n	800136e <FIFO_init+0x36>
    
    /*Initialize the FIFO buffer*/
    fifo_buf->base = buf;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	601a      	str	r2, [r3, #0]
    fifo_buf->head = buf;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	605a      	str	r2, [r3, #4]
    fifo_buf->tail = buf;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	609a      	str	r2, [r3, #8]
    fifo_buf->capacity = capacity;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	60da      	str	r2, [r3, #12]
    fifo_buf->size = 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]

    return FIFO_no_error;
 800136c:	2302      	movs	r3, #2
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <FIFO_enqueue>:

eFIFO_status_t FIFO_enqueue(sFIFO_Buf_t* fifo_buf, element_width item)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	e883 0006 	stmia.w	r3, {r1, r2}
    /*Check if the FIFO buffer is valid*/
    if (!fifo_buf || !fifo_buf->head || !fifo_buf->base || !fifo_buf->tail)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00b      	beq.n	80013a4 <FIFO_enqueue+0x2c>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <FIFO_enqueue+0x2c>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <FIFO_enqueue+0x2c>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <FIFO_enqueue+0x30>
        return FIFO_NULL;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e02c      	b.n	8001402 <FIFO_enqueue+0x8a>
    
    /*Check if there is space left in the buffer*/
    if (fifo_buf->size >= fifo_buf->capacity)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d301      	bcc.n	80013b8 <FIFO_enqueue+0x40>
        return FIFO_full;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e024      	b.n	8001402 <FIFO_enqueue+0x8a>
    
    *(fifo_buf->head) = item;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	461a      	mov	r2, r3
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	6010      	str	r0, [r2, #0]
 80013c4:	791b      	ldrb	r3, [r3, #4]
 80013c6:	7113      	strb	r3, [r2, #4]

    /*Check if the head is at the end of the buffer*/
    if (fifo_buf->head == (fifo_buf->base + (fifo_buf->capacity - 1) ))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b05      	subs	r3, #5
 80013dc:	4403      	add	r3, r0
 80013de:	4299      	cmp	r1, r3
 80013e0:	d104      	bne.n	80013ec <FIFO_enqueue+0x74>
        fifo_buf->head = fifo_buf->base;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	e004      	b.n	80013f6 <FIFO_enqueue+0x7e>
    else
        fifo_buf->head++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	1d5a      	adds	r2, r3, #5
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]
    
    fifo_buf->size++;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	611a      	str	r2, [r3, #16]

    return FIFO_no_error;
 8001400:	2302      	movs	r3, #2
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <FIFO_dequeue>:

eFIFO_status_t FIFO_dequeue(sFIFO_Buf_t* fifo_buf, element_width* item)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
    /*Check if the FIFO buffer is valid*/
    if (!fifo_buf || !fifo_buf->head || !fifo_buf->base || !fifo_buf->tail)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <FIFO_dequeue+0x28>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <FIFO_dequeue+0x28>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <FIFO_dequeue+0x28>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <FIFO_dequeue+0x2c>
        return FIFO_NULL;
 8001434:	2303      	movs	r3, #3
 8001436:	e029      	b.n	800148c <FIFO_dequeue+0x80>
    
    /*Check if the buffer is empty*/
    if (fifo_buf->size == 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <FIFO_dequeue+0x38>
        return FIFO_empty;
 8001440:	2301      	movs	r3, #1
 8001442:	e023      	b.n	800148c <FIFO_dequeue+0x80>
    
    *item = *(fifo_buf->tail);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6811      	ldr	r1, [r2, #0]
 800144c:	6019      	str	r1, [r3, #0]
 800144e:	7912      	ldrb	r2, [r2, #4]
 8001450:	711a      	strb	r2, [r3, #4]

    /*Check if the tail is at the end of the buffer*/
    if (fifo_buf->tail == (fifo_buf->base + (fifo_buf->capacity - 1)))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b05      	subs	r3, #5
 8001466:	4403      	add	r3, r0
 8001468:	4299      	cmp	r1, r3
 800146a:	d104      	bne.n	8001476 <FIFO_dequeue+0x6a>
        fifo_buf->tail = fifo_buf->base;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e004      	b.n	8001480 <FIFO_dequeue+0x74>
    else
        fifo_buf->tail++;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	1d5a      	adds	r2, r3, #5
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]

    fifo_buf->size--;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]

    return FIFO_no_error;
 800148a:	2302      	movs	r3, #2
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
	...

08001498 <MCAL_AFIO_EXTI_Init>:
* Note			:   Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,
* 				:	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU.
====================================================================================================================
*/
void MCAL_AFIO_EXTI_Init(uint8 EXTI_Number, uint8 EXTI_Port)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]
    uint8 CR_Index = EXTI_Number / 4;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	73fb      	strb	r3, [r7, #15]
    uint8 CR_Shift = (EXTI_Number % 4) * 4;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	73bb      	strb	r3, [r7, #14]

    AFIO->EXTICR[CR_Index] = (AFIO->EXTICR[CR_Index] & ~(0xF << CR_Shift)) | (EXTI_Port << CR_Shift); 
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <MCAL_AFIO_EXTI_Init+0x58>)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	7bba      	ldrb	r2, [r7, #14]
 80014c6:	210f      	movs	r1, #15
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	43d2      	mvns	r2, r2
 80014ce:	401a      	ands	r2, r3
 80014d0:	79b9      	ldrb	r1, [r7, #6]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	4905      	ldr	r1, [pc, #20]	; (80014f0 <MCAL_AFIO_EXTI_Init+0x58>)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4302      	orrs	r2, r0
 80014e0:	3302      	adds	r3, #2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40010000 	.word	0x40010000

080014f4 <MCAL_EXTI_Enable>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
void MCAL_EXTI_Enable(EXTI_config_t* EXTI_Config)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    /*Configure the GPIO Pin to be alternative function input (Floating input)*/
	GPIO_Pin_Config_t config;
    config.pinNumber = EXTI_Config->PinConfig.GPIO_pinNumber;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7a1b      	ldrb	r3, [r3, #8]
 8001500:	b29b      	uxth	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
    config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8001504:	2304      	movs	r3, #4
 8001506:	81fb      	strh	r3, [r7, #14]
    MCAL_GPIO_Init(EXTI_Config->PinConfig.GPIO_PORT, &config);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f107 020c 	add.w	r2, r7, #12
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f99e 	bl	8001854 <MCAL_GPIO_Init>

    /*Map the pin to the EXTI line through AFIO module*/
    MCAL_AFIO_EXTI_Init(EXTI_Config->PinConfig.EXTI_lineNumber, EXTI_Config->PinConfig.AFIO_Port_config);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7a5b      	ldrb	r3, [r3, #9]
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f7ff ffb8 	bl	8001498 <MCAL_AFIO_EXTI_Init>

    /*Clear the rising and falling edge triggers*/
    CLEAR_BIT(EXTI->RTSR, EXTI_Config->PinConfig.EXTI_lineNumber);
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	7812      	ldrb	r2, [r2, #0]
 8001530:	4611      	mov	r1, r2
 8001532:	2201      	movs	r2, #1
 8001534:	408a      	lsls	r2, r1
 8001536:	43d2      	mvns	r2, r2
 8001538:	4611      	mov	r1, r2
 800153a:	4a37      	ldr	r2, [pc, #220]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 800153c:	400b      	ands	r3, r1
 800153e:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(EXTI->FTSR, EXTI_Config->PinConfig.EXTI_lineNumber);
 8001540:	4b35      	ldr	r3, [pc, #212]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	4611      	mov	r1, r2
 800154a:	2201      	movs	r2, #1
 800154c:	408a      	lsls	r2, r1
 800154e:	43d2      	mvns	r2, r2
 8001550:	4611      	mov	r1, r2
 8001552:	4a31      	ldr	r2, [pc, #196]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 8001554:	400b      	ands	r3, r1
 8001556:	60d3      	str	r3, [r2, #12]

    /*Configure the triggering edge of the interrupt*/
    if(EXTI_Config->EXTI_Trigger_Mode == EXTI_TRIGGER_RISING_EDGE ||
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7b1b      	ldrb	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <MCAL_EXTI_Enable+0x74>
       EXTI_Config->EXTI_Trigger_Mode == EXTI_TRIGGER_BOTH_EDGES)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b1b      	ldrb	r3, [r3, #12]
    if(EXTI_Config->EXTI_Trigger_Mode == EXTI_TRIGGER_RISING_EDGE ||
 8001564:	2b02      	cmp	r3, #2
 8001566:	d10a      	bne.n	800157e <MCAL_EXTI_Enable+0x8a>
    {
        SET_BIT(EXTI->RTSR, EXTI_Config->PinConfig.EXTI_lineNumber);
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	4611      	mov	r1, r2
 8001572:	2201      	movs	r2, #1
 8001574:	408a      	lsls	r2, r1
 8001576:	4611      	mov	r1, r2
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 800157a:	430b      	orrs	r3, r1
 800157c:	6093      	str	r3, [r2, #8]
    }

    if(EXTI_Config->EXTI_Trigger_Mode == EXTI_TRIGGER_FALLING_EDGE ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d003      	beq.n	800158e <MCAL_EXTI_Enable+0x9a>
       EXTI_Config->EXTI_Trigger_Mode == EXTI_TRIGGER_BOTH_EDGES)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7b1b      	ldrb	r3, [r3, #12]
    if(EXTI_Config->EXTI_Trigger_Mode == EXTI_TRIGGER_FALLING_EDGE ||
 800158a:	2b02      	cmp	r3, #2
 800158c:	d10a      	bne.n	80015a4 <MCAL_EXTI_Enable+0xb0>
    {
        SET_BIT( EXTI->FTSR, EXTI_Config->PinConfig.EXTI_lineNumber);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	4611      	mov	r1, r2
 8001598:	2201      	movs	r2, #1
 800159a:	408a      	lsls	r2, r1
 800159c:	4611      	mov	r1, r2
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 80015a0:	430b      	orrs	r3, r1
 80015a2:	60d3      	str	r3, [r2, #12]
    }

    /*Set the priority of the interrupt in NVIC*/
    MCAL_NVIC_SetPriority(EXTI_Config->PinConfig.EXTI_IVT_index, EXTI_Config->EXTI_Priority);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a9a      	ldrb	r2, [r3, #10]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7b9b      	ldrb	r3, [r3, #14]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 fa26 	bl	8001a00 <MCAL_NVIC_SetPriority>

    /*Set the callback function*/
    GP_callback_func[EXTI_Config->PinConfig.EXTI_lineNumber] = EXTI_Config->P_callback_func;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <MCAL_EXTI_Enable+0x128>)
 80015c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    if(EXTI_Config->EXTI_En == EXTI_ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d110      	bne.n	80015ee <MCAL_EXTI_Enable+0xfa>
    {
        /*Enable the interrupt mask in the EXTI peripheral*/
        SET_BIT(EXTI->IMR, EXTI_Config->PinConfig.EXTI_lineNumber);
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4611      	mov	r1, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	408a      	lsls	r2, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 80015de:	430b      	orrs	r3, r1
 80015e0:	6013      	str	r3, [r2, #0]

        /*Enable the interrupt mask in the NVIC peripheral*/
        MCAL_NVIC_EnableIRQ(EXTI_Config->PinConfig.EXTI_IVT_index);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7a9b      	ldrb	r3, [r3, #10]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f9cb 	bl	8001982 <MCAL_NVIC_EnableIRQ>
        CLEAR_BIT(EXTI->IMR, EXTI_Config->PinConfig.EXTI_lineNumber);

        /*Disable the interrupt mask in the NVIC peripheral*/
        MCAL_NVIC_DisableIRQ(EXTI_Config->PinConfig.EXTI_IVT_index);
    }
}
 80015ec:	e010      	b.n	8001610 <MCAL_EXTI_Enable+0x11c>
        CLEAR_BIT(EXTI->IMR, EXTI_Config->PinConfig.EXTI_lineNumber);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	4611      	mov	r1, r2
 80015f8:	2201      	movs	r2, #1
 80015fa:	408a      	lsls	r2, r1
 80015fc:	43d2      	mvns	r2, r2
 80015fe:	4611      	mov	r1, r2
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <MCAL_EXTI_Enable+0x124>)
 8001602:	400b      	ands	r3, r1
 8001604:	6013      	str	r3, [r2, #0]
        MCAL_NVIC_DisableIRQ(EXTI_Config->PinConfig.EXTI_IVT_index);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7a9b      	ldrb	r3, [r3, #10]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f9dc 	bl	80019c8 <MCAL_NVIC_DisableIRQ>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010400 	.word	0x40010400
 800161c:	200000d8 	.word	0x200000d8

08001620 <EXTI0_IRQHandler>:
*===============================================
*/

/*-----------@defgroup EXTI ISR------------------------ */
void EXTI0_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    /*Clear the pending bit in EXTI_PR */
    SET_BIT(EXTI->PR, 0);
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <EXTI0_IRQHandler+0x1c>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <EXTI0_IRQHandler+0x1c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6153      	str	r3, [r2, #20]
    
    /*Jump to the ISR*/
    GP_callback_func[0]();
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <EXTI0_IRQHandler+0x20>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4798      	blx	r3
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010400 	.word	0x40010400
 8001640:	200000d8 	.word	0x200000d8

08001644 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    /*Clear the pending bit in EXTI_PR */
    SET_BIT(EXTI->PR, 1);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <EXTI1_IRQHandler+0x1c>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <EXTI1_IRQHandler+0x1c>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6153      	str	r3, [r2, #20]
    
    /*Jump to the ISR*/
    GP_callback_func[1]();
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <EXTI1_IRQHandler+0x20>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4798      	blx	r3
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010400 	.word	0x40010400
 8001664:	200000d8 	.word	0x200000d8

08001668 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
    /*Clear the pending bit in EXTI_PR */
    SET_BIT(EXTI->PR, 2);
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <EXTI2_IRQHandler+0x1c>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <EXTI2_IRQHandler+0x1c>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6153      	str	r3, [r2, #20]
    
    /*Jump to the ISR*/
    GP_callback_func[2]();
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <EXTI2_IRQHandler+0x20>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4798      	blx	r3
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40010400 	.word	0x40010400
 8001688:	200000d8 	.word	0x200000d8

0800168c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    /*Clear the pending bit in EXTI_PR */
    SET_BIT(EXTI->PR, 3);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <EXTI3_IRQHandler+0x1c>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <EXTI3_IRQHandler+0x1c>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6153      	str	r3, [r2, #20]
    
    /*Jump to the ISR*/
    GP_callback_func[3]();
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <EXTI3_IRQHandler+0x20>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4798      	blx	r3
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40010400 	.word	0x40010400
 80016ac:	200000d8 	.word	0x200000d8

080016b0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    /*Clear the pending bit in EXTI_PR */
    SET_BIT(EXTI->PR, 4);
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <EXTI4_IRQHandler+0x1c>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <EXTI4_IRQHandler+0x1c>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6153      	str	r3, [r2, #20]
    
    /*Jump to the ISR*/
    GP_callback_func[4]();
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <EXTI4_IRQHandler+0x20>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	4798      	blx	r3
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40010400 	.word	0x40010400
 80016d0:	200000d8 	.word	0x200000d8

080016d4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
    if(READ_BIT(EXTI->PR, 5) == 1){SET_BIT(EXTI->PR, 5); GP_callback_func[5]();}
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <EXTI9_5_IRQHandler+0x24>
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a24      	ldr	r2, [pc, #144]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	6153      	str	r3, [r2, #20]
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <EXTI9_5_IRQHandler+0xac>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 6) == 1){SET_BIT(EXTI->PR, 6); GP_callback_func[6]();}
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <EXTI9_5_IRQHandler+0x44>
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <EXTI9_5_IRQHandler+0xac>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 7) == 1){SET_BIT(EXTI->PR, 7); GP_callback_func[7]();}
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <EXTI9_5_IRQHandler+0x64>
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <EXTI9_5_IRQHandler+0xac>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 8) == 1){SET_BIT(EXTI->PR, 8); GP_callback_func[8]();}
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <EXTI9_5_IRQHandler+0x84>
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <EXTI9_5_IRQHandler+0xac>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 9) == 1){SET_BIT(EXTI->PR, 9); GP_callback_func[9]();}
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	0a5b      	lsrs	r3, r3, #9
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <EXTI9_5_IRQHandler+0xa4>
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800176c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001770:	6153      	str	r3, [r2, #20]
 8001772:	4b03      	ldr	r3, [pc, #12]	; (8001780 <EXTI9_5_IRQHandler+0xac>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	4798      	blx	r3
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40010400 	.word	0x40010400
 8001780:	200000d8 	.word	0x200000d8

08001784 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    if(READ_BIT(EXTI->PR, 10) == 1){SET_BIT(EXTI->PR, 10); GP_callback_func[10]();}
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	0a9b      	lsrs	r3, r3, #10
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <EXTI15_10_IRQHandler+0x24>
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a2c      	ldr	r2, [pc, #176]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 800179c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <EXTI15_10_IRQHandler+0xcc>)
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 11) == 1){SET_BIT(EXTI->PR, 11); GP_callback_func[11]();}
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	0adb      	lsrs	r3, r3, #11
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <EXTI15_10_IRQHandler+0x44>
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a24      	ldr	r2, [pc, #144]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017c0:	6153      	str	r3, [r2, #20]
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <EXTI15_10_IRQHandler+0xcc>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 12) == 1){SET_BIT(EXTI->PR, 12); GP_callback_func[12]();}
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	0b1b      	lsrs	r3, r3, #12
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <EXTI15_10_IRQHandler+0x64>
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <EXTI15_10_IRQHandler+0xcc>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 13) == 1){SET_BIT(EXTI->PR, 13); GP_callback_func[13]();}
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	0b5b      	lsrs	r3, r3, #13
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <EXTI15_10_IRQHandler+0x84>
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 80017fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <EXTI15_10_IRQHandler+0xcc>)
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 14) == 1){SET_BIT(EXTI->PR, 14); GP_callback_func[14]();}
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	0b9b      	lsrs	r3, r3, #14
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <EXTI15_10_IRQHandler+0xa4>
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6153      	str	r3, [r2, #20]
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <EXTI15_10_IRQHandler+0xcc>)
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	4798      	blx	r3
    if(READ_BIT(EXTI->PR, 15) == 1){SET_BIT(EXTI->PR, 15); GP_callback_func[15]();}
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	0bdb      	lsrs	r3, r3, #15
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <EXTI15_10_IRQHandler+0xc4>
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <EXTI15_10_IRQHandler+0xc8>)
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6153      	str	r3, [r2, #20]
 8001842:	4b03      	ldr	r3, [pc, #12]	; (8001850 <EXTI15_10_IRQHandler+0xcc>)
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	4798      	blx	r3
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40010400 	.word	0x40010400
 8001850:	200000d8 	.word	0x200000d8

08001854 <MCAL_GPIO_Init>:
* Note			:   Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,
* 				:	But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
*===============================================
*/
void MCAL_GPIO_Init(volatile GPIO_t* GPIOx ,GPIO_Pin_Config_t* pinConfig)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    /*
    Choose the correct control register based on the pin number
    CRL for pin(0 >> 7)
    CRH for pin(8 >> 15)
     */
    CTRL = (pinConfig->pinNumber < 8)? &(GPIOx->CRL) : &(GPIOx->CRH);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2b07      	cmp	r3, #7
 8001864:	d801      	bhi.n	800186a <MCAL_GPIO_Init+0x16>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e001      	b.n	800186e <MCAL_GPIO_Init+0x1a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]

    /*Get the needed shift for each pin as each pin takes 4 bits in the register*/
    shift = ((pinConfig->pinNumber % 8) * 4);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	b2db      	uxtb	r3, r3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	72fb      	strb	r3, [r7, #11]


    *(CTRL) &= ~(0xF << shift);                /*Clear the bits assigned for the required pin number*/
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	7afa      	ldrb	r2, [r7, #11]
 8001886:	210f      	movs	r1, #15
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	43d2      	mvns	r2, r2
 800188e:	401a      	ands	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	601a      	str	r2, [r3, #0]

    /*Input pull-up and pull-down have the same configuration code*/
    if(pinConfig->pinMode == GPIO_MODE_INPUT_PD)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	885b      	ldrh	r3, [r3, #2]
 8001898:	2b10      	cmp	r3, #16
 800189a:	d114      	bne.n	80018c6 <MCAL_GPIO_Init+0x72>
    {
        *(CTRL) |= (GPIO_MODE_INPUT_PU << shift);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	7afa      	ldrb	r2, [r7, #11]
 80018a2:	2108      	movs	r1, #8
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	431a      	orrs	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(GPIOx->ODR, pinConfig->pinNumber);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	8812      	ldrh	r2, [r2, #0]
 80018b6:	4611      	mov	r1, r2
 80018b8:	2201      	movs	r2, #1
 80018ba:	408a      	lsls	r2, r1
 80018bc:	43d2      	mvns	r2, r2
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
        if(pinConfig->pinMode == GPIO_MODE_INPUT_PU)
        {
            SET_BIT(GPIOx->ODR, pinConfig->pinNumber);
        }
    }
}
 80018c4:	e018      	b.n	80018f8 <MCAL_GPIO_Init+0xa4>
        *(CTRL) |= (pinConfig->pinMode << shift);  /*Set the mode*/
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	8852      	ldrh	r2, [r2, #2]
 80018ce:	4611      	mov	r1, r2
 80018d0:	7afa      	ldrb	r2, [r7, #11]
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]
        if(pinConfig->pinMode == GPIO_MODE_INPUT_PU)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	885b      	ldrh	r3, [r3, #2]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d109      	bne.n	80018f8 <MCAL_GPIO_Init+0xa4>
            SET_BIT(GPIOx->ODR, pinConfig->pinNumber);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	8812      	ldrh	r2, [r2, #0]
 80018ec:	4611      	mov	r1, r2
 80018ee:	2201      	movs	r2, #1
 80018f0:	408a      	lsls	r2, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <MCAL_GPIO_ReadPin>:
* @return_value :   Current pin status which can be a value of @ref GPIO_PIN_STATUS.
* Note			:   none.
*===============================================
*/
uint8 MCAL_GPIO_ReadPin(volatile GPIO_t* GPIOx, uint16 pinNumber)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
    uint8 status;
    status = (READ_BIT(GPIOx->IDR, pinNumber))? (uint8)(GPIO_PIN_HIGH): (uint8)(GPIO_PIN_LOW);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	401a      	ands	r2, r3
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf14      	ite	ne
 8001926:	2301      	movne	r3, #1
 8001928:	2300      	moveq	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	73fb      	strb	r3, [r7, #15]

    return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <MCAL_GPIO_WritePin>:
* @return_value :   none.
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePin(volatile GPIO_t* GPIOx, uint16 pinNumber, uint8 value)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	807b      	strh	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	707b      	strb	r3, [r7, #1]
    if(value == GPIO_PIN_HIGH)
 800194a:	787b      	ldrb	r3, [r7, #1]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d109      	bne.n	8001964 <MCAL_GPIO_WritePin+0x2a>
    {
        SET_BIT(GPIOx->ODR, pinNumber);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	887a      	ldrh	r2, [r7, #2]
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60da      	str	r2, [r3, #12]
    }else{
        CLEAR_BIT(GPIOx->ODR, pinNumber);
    }
}
 8001962:	e009      	b.n	8001978 <MCAL_GPIO_WritePin+0x3e>
        CLEAR_BIT(GPIOx->ODR, pinNumber);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	43d2      	mvns	r2, r2
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <MCAL_NVIC_EnableIRQ>:
* @return_value :   none.   
* Note			:   none.
======================================================================================================================
*/
void MCAL_NVIC_EnableIRQ(uint8 IRQn)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
    uint8 register_index = IRQn / 32;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	73fb      	strb	r3, [r7, #15]

    SET_BIT(NVIC_ISER_BASE[register_index], (IRQn % 32));
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800199a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80019b6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <MCAL_NVIC_DisableIRQ>:
*               :   When you write on this register using the traditional |= method you will disable all the interrupts
*               :   in this register as writing one on the required IRQ bit will disable it. 
======================================================================================================================
*/
void MCAL_NVIC_DisableIRQ(uint8 IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
    uint8 register_index = IRQn / 32;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	73fb      	strb	r3, [r7, #15]

    NVIC_ICER_BASE[register_index]= 1 << (IRQn % 32);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2201      	movs	r2, #1
 80019e0:	fa02 f103 	lsl.w	r1, r2, r3
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	009a      	lsls	r2, r3, #2
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <MCAL_NVIC_DisableIRQ+0x34>)
 80019ea:	4413      	add	r3, r2
 80019ec:	460a      	mov	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e180 	.word	0xe000e180

08001a00 <MCAL_NVIC_SetPriority>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
void MCAL_NVIC_SetPriority (uint8 IRQn, uint8 priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
    uint8 register_index = IRQn / 4, shift;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	73fb      	strb	r3, [r7, #15]
    shift = (((IRQn % 4) * 8) + 4);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3304      	adds	r3, #4
 8001a24:	73bb      	strb	r3, [r7, #14]
    
    /*Clear the bits*/
    NVIC_IPR_BASE[register_index] &= ~(0xF << shift);
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a2e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	210f      	movs	r1, #15
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a48:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

    /*Set the new priority value*/
    NVIC_IPR_BASE[register_index] |= (priority & 0xF) << shift;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a58:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	f003 010f 	and.w	r1, r3, #15
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001a74:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <MCAL_RCC_GET_SYSCLK>:
* @return_value :   The system clock frequency.
* Note			:   none.
======================================================================================================================
*/
uint32 MCAL_RCC_GET_SYSCLK(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
	uint32 LOC_CLKFreq = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: Not applicable
    */
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MCAL_RCC_GET_SYSCLK+0x40>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d007      	beq.n	8001ab0 <MCAL_RCC_GET_SYSCLK+0x28>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d302      	bcc.n	8001aaa <MCAL_RCC_GET_SYSCLK+0x22>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d006      	beq.n	8001ab6 <MCAL_RCC_GET_SYSCLK+0x2e>
 8001aa8:	e008      	b.n	8001abc <MCAL_RCC_GET_SYSCLK+0x34>
	{
	case 0:

		LOC_CLKFreq = HSI_RC_Clk ;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MCAL_RCC_GET_SYSCLK+0x44>)
 8001aac:	607b      	str	r3, [r7, #4]
		break ;
 8001aae:	e005      	b.n	8001abc <MCAL_RCC_GET_SYSCLK+0x34>

	case 1:

		/*todo need to calculate  it "HSE User Should Specify it"*/
		LOC_CLKFreq = HSE_Clock ;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MCAL_RCC_GET_SYSCLK+0x48>)
 8001ab2:	607b      	str	r3, [r7, #4]
		break ;
 8001ab4:	e002      	b.n	8001abc <MCAL_RCC_GET_SYSCLK+0x34>

	case 2:

		/*todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX*/
		LOC_CLKFreq = 16000000 ;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MCAL_RCC_GET_SYSCLK+0x48>)
 8001ab8:	607b      	str	r3, [r7, #4]
		break ;
 8001aba:	bf00      	nop

	}

	return LOC_CLKFreq;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	007a1200 	.word	0x007a1200
 8001ad0:	00f42400 	.word	0x00f42400

08001ad4 <MCAL_SPI_GPIO_Set_Pins>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
static void MCAL_SPI_GPIO_Set_Pins(volatile SPI_Typedef * SPIx)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    uint8 index, SCK_pin, MOSI_Pin, MISO_Pin, SS_Pin;
    volatile GPIO_t* GPIOx;
    GPIO_Pin_Config_t GPIO_Config;
    if(SPIx == SPI1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a6b      	ldr	r2, [pc, #428]	; (8001c8c <MCAL_SPI_GPIO_Set_Pins+0x1b8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10c      	bne.n	8001afe <MCAL_SPI_GPIO_Set_Pins+0x2a>
    {
        index = SPI1_INDEX;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	75fb      	strb	r3, [r7, #23]
        *       SPI1_MISO   : PA6
        *       SPI1_MOSI   : PA7
        * @}
        */

       SS_Pin   = GPIO_PIN4;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	74fb      	strb	r3, [r7, #19]
       SCK_pin  = GPIO_PIN5; 
 8001aec:	2305      	movs	r3, #5
 8001aee:	75bb      	strb	r3, [r7, #22]
       MISO_Pin = GPIO_PIN6; 
 8001af0:	2306      	movs	r3, #6
 8001af2:	753b      	strb	r3, [r7, #20]
       MOSI_Pin = GPIO_PIN7; 
 8001af4:	2307      	movs	r3, #7
 8001af6:	757b      	strb	r3, [r7, #21]

       GPIOx = GPIOA;
 8001af8:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <MCAL_SPI_GPIO_Set_Pins+0x1bc>)
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e00b      	b.n	8001b16 <MCAL_SPI_GPIO_Set_Pins+0x42>
    }else
    {
        index = SPI2_INDEX;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
        *       SPI2_SCK    : PB13
        *       SPI2_MISO   : PB14
        *       SPI2_MOSI   : PB15
        * @}
        */
       SS_Pin   = GPIO_PIN12;
 8001b02:	230c      	movs	r3, #12
 8001b04:	74fb      	strb	r3, [r7, #19]
       SCK_pin  = GPIO_PIN13; 
 8001b06:	230d      	movs	r3, #13
 8001b08:	75bb      	strb	r3, [r7, #22]
       MISO_Pin = GPIO_PIN14; 
 8001b0a:	230e      	movs	r3, #14
 8001b0c:	753b      	strb	r3, [r7, #20]
       MOSI_Pin = GPIO_PIN15; 
 8001b0e:	230f      	movs	r3, #15
 8001b10:	757b      	strb	r3, [r7, #21]

       GPIOx = GPIOB;
 8001b12:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <MCAL_SPI_GPIO_Set_Pins+0x1c0>)
 8001b14:	60fb      	str	r3, [r7, #12]
    }

    if(SPI_Config[index].SPI_Mode == SPI_MODE_MASTER)
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	4a5f      	ldr	r2, [pc, #380]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d159      	bne.n	8001bd8 <MCAL_SPI_GPIO_Set_Pins+0x104>
    {
        /*SPIx_SCK: Master ====> Alternate function push-pull*/
        GPIO_Config.pinNumber = SCK_pin;
 8001b24:	7dbb      	ldrb	r3, [r7, #22]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	813b      	strh	r3, [r7, #8]
        GPIO_Config.pinMode = GPIO_MODE_AF_OUTPUT_PP_10MHZ;
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	817b      	strh	r3, [r7, #10]
        MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fe8d 	bl	8001854 <MCAL_GPIO_Init>

        /*SPIx_MOSI: Full duplex/master ===> Alternate function push-pull,
        Simplex bidirectional data wire / master Alternate function push-pull*/
        GPIO_Config.pinNumber = MOSI_Pin;
 8001b3a:	7d7b      	ldrb	r3, [r7, #21]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	813b      	strh	r3, [r7, #8]
        GPIO_Config.pinMode = GPIO_MODE_AF_OUTPUT_PP_10MHZ;
 8001b40:	2309      	movs	r3, #9
 8001b42:	817b      	strh	r3, [r7, #10]
        MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4619      	mov	r1, r3
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe82 	bl	8001854 <MCAL_GPIO_Init>

        /*SPIx_MISO: Full duplex/master ===> Input floating / Input pull-up
        Simplex bidirectional data wire/master ===> Not used. Can be used as a GPIO*/
        if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX ||
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <MCAL_SPI_GPIO_Set_Pins+0x9e>
           SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_RX_ONLY)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	4a4d      	ldr	r2, [pc, #308]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	881b      	ldrh	r3, [r3, #0]
        if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX ||
 8001b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b70:	d10a      	bne.n	8001b88 <MCAL_SPI_GPIO_Set_Pins+0xb4>
        {
            GPIO_Config.pinNumber = MISO_Pin;
 8001b72:	7d3b      	ldrb	r3, [r7, #20]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	813b      	strh	r3, [r7, #8]
            GPIO_Config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	817b      	strh	r3, [r7, #10]
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff fe66 	bl	8001854 <MCAL_GPIO_Init>
        }

        /*SPIx_NSS: Hardware master/slave ===> Input floating/ Input pull-up / Input pull-down*/
        if(SPI_Config[index].SPI_NSS_Managment == SPI_NSS_HW_INPUT)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	4413      	add	r3, r2
 8001b90:	330c      	adds	r3, #12
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <MCAL_SPI_GPIO_Set_Pins+0xdc>
        {
            GPIO_Config.pinNumber = SS_Pin;
 8001b98:	7cfb      	ldrb	r3, [r7, #19]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	813b      	strh	r3, [r7, #8]
            GPIO_Config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	817b      	strh	r3, [r7, #10]
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff fe53 	bl	8001854 <MCAL_GPIO_Init>
            GPIO_Config.pinMode = GPIO_MODE_INPUT_FLOATING;
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
        }
    }

}
 8001bae:	e069      	b.n	8001c84 <MCAL_SPI_GPIO_Set_Pins+0x1b0>
        else if(SPI_Config[index].SPI_NSS_Managment == SPI_NSS_HW_OUTPUT)
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	4a39      	ldr	r2, [pc, #228]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	330c      	adds	r3, #12
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d161      	bne.n	8001c84 <MCAL_SPI_GPIO_Set_Pins+0x1b0>
            GPIO_Config.pinNumber = SS_Pin;
 8001bc0:	7cfb      	ldrb	r3, [r7, #19]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	813b      	strh	r3, [r7, #8]
            GPIO_Config.pinMode = GPIO_MODE_AF_OUTPUT_PP_10MHZ;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	817b      	strh	r3, [r7, #10]
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff fe3f 	bl	8001854 <MCAL_GPIO_Init>
}
 8001bd6:	e055      	b.n	8001c84 <MCAL_SPI_GPIO_Set_Pins+0x1b0>
        GPIO_Config.pinNumber = SCK_pin;
 8001bd8:	7dbb      	ldrb	r3, [r7, #22]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	813b      	strh	r3, [r7, #8]
        GPIO_Config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8001bde:	2304      	movs	r3, #4
 8001be0:	817b      	strh	r3, [r7, #10]
        MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fe33 	bl	8001854 <MCAL_GPIO_Init>
        if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX ||
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <MCAL_SPI_GPIO_Set_Pins+0x13c>
           SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_RX_ONLY)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	3302      	adds	r3, #2
 8001c08:	881b      	ldrh	r3, [r3, #0]
        if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX ||
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d10a      	bne.n	8001c26 <MCAL_SPI_GPIO_Set_Pins+0x152>
            GPIO_Config.pinNumber = MOSI_Pin;
 8001c10:	7d7b      	ldrb	r3, [r7, #21]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	813b      	strh	r3, [r7, #8]
            GPIO_Config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8001c16:	2304      	movs	r3, #4
 8001c18:	817b      	strh	r3, [r7, #10]
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4619      	mov	r1, r3
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fe17 	bl	8001854 <MCAL_GPIO_Init>
        if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX ||
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <MCAL_SPI_GPIO_Set_Pins+0x174>
           SPI_Config[index].SPI_Direction == SPI_DIRECTION_1LINE_TX)
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	881b      	ldrh	r3, [r3, #0]
        if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX ||
 8001c42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c46:	d10a      	bne.n	8001c5e <MCAL_SPI_GPIO_Set_Pins+0x18a>
            GPIO_Config.pinNumber = MISO_Pin;
 8001c48:	7d3b      	ldrb	r3, [r7, #20]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	813b      	strh	r3, [r7, #8]
            GPIO_Config.pinMode = GPIO_MODE_AF_OUTPUT_PP_10MHZ;
 8001c4e:	2309      	movs	r3, #9
 8001c50:	817b      	strh	r3, [r7, #10]
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4619      	mov	r1, r3
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fdfb 	bl	8001854 <MCAL_GPIO_Init>
        if(SPI_Config[index].SPI_NSS_Managment == SPI_NSS_HW_INPUT)
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <MCAL_SPI_GPIO_Set_Pins+0x1c4>)
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	330c      	adds	r3, #12
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <MCAL_SPI_GPIO_Set_Pins+0x1b0>
            GPIO_Config.pinNumber = SS_Pin;
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	813b      	strh	r3, [r7, #8]
            GPIO_Config.pinMode = GPIO_MODE_INPUT_FLOATING;
 8001c74:	2304      	movs	r3, #4
 8001c76:	817b      	strh	r3, [r7, #10]
            MCAL_GPIO_Init(GPIOx, &GPIO_Config);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fde8 	bl	8001854 <MCAL_GPIO_Init>
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40013000 	.word	0x40013000
 8001c90:	40010800 	.word	0x40010800
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	2000008c 	.word	0x2000008c

08001c9c <MCAL_SPI_Init>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
void MCAL_SPI_Init(volatile SPI_Typedef* SPIx, SPI_Config_t* config)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    /*Activate the peripheral clock and save the config in a global variable to be used
        in other functions in the driver.*/
    if(SPIx == SPI1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a34      	ldr	r2, [pc, #208]	; (8001d7c <MCAL_SPI_Init+0xe0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10e      	bne.n	8001ccc <MCAL_SPI_Init+0x30>
    {
        APB2_PERI_CLOCK_EN(APB2_SPI1);
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <MCAL_SPI_Init+0xe4>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <MCAL_SPI_Init+0xe4>)
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb8:	6193      	str	r3, [r2, #24]
        SPI_Config[SPI1_INDEX] = *config;
 8001cba:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <MCAL_SPI_Init+0xe8>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4614      	mov	r4, r2
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cca:	e00f      	b.n	8001cec <MCAL_SPI_Init+0x50>
    }else{
        APB1_PERI_CLOCK_EN(APB1_SPI2);
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <MCAL_SPI_Init+0xe4>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <MCAL_SPI_Init+0xe4>)
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd6:	61d3      	str	r3, [r2, #28]
        SPI_Config[SPI2_INDEX] = *config;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MCAL_SPI_Init+0xe8>)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	f103 0410 	add.w	r4, r3, #16
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    }

    SPIx->CR1 = 0;  /*Reset the Register to its original state*/
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    /* Set LSBFirst bit according to SPI_BitOrder value */
    /* Set BR bits according to SPI_BR_Prescaler value */
    /* Set CPOL bit according to SPI_ClockPolarity value */
    /* Set CPHA bit according to SPI_ClockPhase value */

    SPIx->CR1 |= (config->SPI_Direction | config->SPI_Mode | config->SPI_BitOrder | 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	8851      	ldrh	r1, [r2, #2]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	8812      	ldrh	r2, [r2, #0]
                  config->SPI_DataSize | config->SPI_BR_Prescaler | config->SPI_ClockPolarity |
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	b291      	uxth	r1, r2
    SPIx->CR1 |= (config->SPI_Direction | config->SPI_Mode | config->SPI_BitOrder | 
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	88d2      	ldrh	r2, [r2, #6]
                  config->SPI_DataSize | config->SPI_BR_Prescaler | config->SPI_ClockPolarity |
 8001d06:	430a      	orrs	r2, r1
 8001d08:	b291      	uxth	r1, r2
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	8892      	ldrh	r2, [r2, #4]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	b291      	uxth	r1, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	89d2      	ldrh	r2, [r2, #14]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	b291      	uxth	r1, r2
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	8912      	ldrh	r2, [r2, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	b291      	uxth	r1, r2
                  config->SPI_ClockPhase);
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	8952      	ldrh	r2, [r2, #10]
                  config->SPI_DataSize | config->SPI_BR_Prescaler | config->SPI_ClockPolarity |
 8001d26:	430a      	orrs	r2, r1
 8001d28:	b292      	uxth	r2, r2
    SPIx->CR1 |= (config->SPI_Direction | config->SPI_Mode | config->SPI_BitOrder | 
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	601a      	str	r2, [r3, #0]

    /*Configure the NSS bit according to SPI_NSS_Managment*/
    if(config->SPI_NSS_Managment == SPI_NSS_SW_SET || config->SPI_NSS_Managment == SPI_NSS_SW_RESET)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	899b      	ldrh	r3, [r3, #12]
 8001d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d38:	d004      	beq.n	8001d44 <MCAL_SPI_Init+0xa8>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	899b      	ldrh	r3, [r3, #12]
 8001d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d42:	d107      	bne.n	8001d54 <MCAL_SPI_Init+0xb8>
    {
        SPIx->CR1 |= config->SPI_NSS_Managment;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	8992      	ldrh	r2, [r2, #12]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e006      	b.n	8001d62 <MCAL_SPI_Init+0xc6>
    }else{
        SPIx->CR2 |= config->SPI_NSS_Managment;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	8992      	ldrh	r2, [r2, #12]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	605a      	str	r2, [r3, #4]
    }
    
    /*Enable the SPI*/
    SPIx->CR1 |= SPI_CR1_SPE_SET;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]

    /*Set the GPIO pins for the SPI*/
    MCAL_SPI_GPIO_Set_Pins(SPIx);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff feb0 	bl	8001ad4 <MCAL_SPI_GPIO_Set_Pins>
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	2000008c 	.word	0x2000008c

08001d88 <MCAL_SPI_SendData>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
void MCAL_SPI_SendData(volatile SPI_Typedef* SPIx, uint16* pTxBuffer, enum Polling_mechanism polling)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	71fb      	strb	r3, [r7, #7]
    uint8 index;
    index = (SPIx == SPI1)? SPI1_INDEX : SPI2_INDEX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <MCAL_SPI_SendData+0x68>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	bf14      	ite	ne
 8001d9e:	2301      	movne	r3, #1
 8001da0:	2300      	moveq	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	75fb      	strb	r3, [r7, #23]
    
    if(polling == PollingEnable)
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d106      	bne.n	8001dba <MCAL_SPI_SendData+0x32>
    {
        /*Loop as long as the TXE flag is zero*/
        while(!(SPIx->SR & SPI_SR_TXE));
 8001dac:	bf00      	nop
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f9      	beq.n	8001dae <MCAL_SPI_SendData+0x26>
    }
    
    /*Send normally if you are in full duplex mode or half duplex transmit mode*/
    if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX || 
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <MCAL_SPI_SendData+0x6c>)
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <MCAL_SPI_SendData+0x54>
        SPI_Config[index].SPI_Direction == SPI_DIRECTION_1LINE_TX)
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <MCAL_SPI_SendData+0x6c>)
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
    if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX || 
 8001dd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001dda:	d104      	bne.n	8001de6 <MCAL_SPI_SendData+0x5e>
    {
        SPIx->DR = *pTxBuffer;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	60da      	str	r2, [r3, #12]
    }else 
    {

    }
    
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40013000 	.word	0x40013000
 8001df4:	2000008c 	.word	0x2000008c

08001df8 <MCAL_SPI_ReceiveData>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
void MCAL_SPI_ReceiveData(volatile SPI_Typedef* SPIx, uint16* pRxBuffer, enum Polling_mechanism polling)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	4613      	mov	r3, r2
 8001e04:	71fb      	strb	r3, [r7, #7]
    uint8 index;
    index = (SPIx == SPI1)? SPI1_INDEX : SPI2_INDEX;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <MCAL_SPI_ReceiveData+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	75fb      	strb	r3, [r7, #23]

    if(polling == PollingEnable)
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <MCAL_SPI_ReceiveData+0x32>
    {
        /*Loop as long as the TXE flag is zero*/
        while(!(SPIx->SR & SPI_SR_RXNE));
 8001e1c:	bf00      	nop
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f9      	beq.n	8001e1e <MCAL_SPI_ReceiveData+0x26>
    }

     /*Receive normally if you are in full duplex mode or half duplex receive mode*/
    if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX || 
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <MCAL_SPI_ReceiveData+0x80>)
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	3302      	adds	r3, #2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <MCAL_SPI_ReceiveData+0x66>
        SPI_Config[index].SPI_Direction == SPI_DIRECTION_1LINE_RX ||
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <MCAL_SPI_ReceiveData+0x80>)
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	3302      	adds	r3, #2
 8001e44:	881b      	ldrh	r3, [r3, #0]
    if(SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_FULL_DUPLEX || 
 8001e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4a:	d008      	beq.n	8001e5e <MCAL_SPI_ReceiveData+0x66>
        SPI_Config[index].SPI_Direction == SPI_DIRECTION_2LINES_RX_ONLY)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <MCAL_SPI_ReceiveData+0x80>)
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	3302      	adds	r3, #2
 8001e56:	881b      	ldrh	r3, [r3, #0]
        SPI_Config[index].SPI_Direction == SPI_DIRECTION_1LINE_RX ||
 8001e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5c:	d104      	bne.n	8001e68 <MCAL_SPI_ReceiveData+0x70>
    {
        *pRxBuffer = SPIx->DR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	801a      	strh	r2, [r3, #0]
    }else
    {
       
    }
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40013000 	.word	0x40013000
 8001e78:	2000008c 	.word	0x2000008c

08001e7c <MCAL_SPI_Interrupt_EN>:
* @return_value :   none.
* Note			:   none.
======================================================================================================================
*/
void MCAL_SPI_Interrupt_EN(volatile SPI_Typedef * SPIx, uint8 IRQ, void (* p_IRQ_callback)(void))
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	460b      	mov	r3, r1
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	72fb      	strb	r3, [r7, #11]
    if(SPIx == SPI1)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <MCAL_SPI_Interrupt_EN+0x58>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10b      	bne.n	8001eaa <MCAL_SPI_Interrupt_EN+0x2e>
    {
        MCAL_NVIC_EnableIRQ(NVIC_SPI1_IVT_INDEX);
 8001e92:	2023      	movs	r0, #35	; 0x23
 8001e94:	f7ff fd75 	bl	8001982 <MCAL_NVIC_EnableIRQ>
        p_IRQ_callback_SPI1[IRQ >> 6] = p_IRQ_callback;
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	099b      	lsrs	r3, r3, #6
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <MCAL_SPI_Interrupt_EN+0x5c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001ea8:	e00a      	b.n	8001ec0 <MCAL_SPI_Interrupt_EN+0x44>
    }else{
        MCAL_NVIC_EnableIRQ(NVIC_SPI2_IVT_INDEX);
 8001eaa:	2024      	movs	r0, #36	; 0x24
 8001eac:	f7ff fd69 	bl	8001982 <MCAL_NVIC_EnableIRQ>
        p_IRQ_callback_SPI2[IRQ >> 6] = p_IRQ_callback;
 8001eb0:	7afb      	ldrb	r3, [r7, #11]
 8001eb2:	099b      	lsrs	r3, r3, #6
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <MCAL_SPI_Interrupt_EN+0x60>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }

    /*Enable the Interrupt in CR2*/
    SPIx->CR2 |= IRQ;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	200000ac 	.word	0x200000ac
 8001edc:	200000b8 	.word	0x200000b8

08001ee0 <SPI1_IRQHandler>:
*               SPI ISR functions
*===============================================
*/

void SPI1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    if((SPI1->CR2 & SPI_IRQ_ERRIE) && ((SPI1->SR & SPI_SR_OVR) || (SPI1->SR & SPI_SR_MODF)))
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <SPI1_IRQHandler+0x2e>
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <SPI1_IRQHandler+0x28>
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <SPI1_IRQHandler+0x2e>
    {
        p_IRQ_callback_SPI1[SPI_IRQ_ERRIE >> 6]();
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <SPI1_IRQHandler+0x74>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4798      	blx	r3
    }

    if((SPI1->CR2 & SPI_IRQ_RXNEIE) && (SPI1->SR & SPI_SR_RXNE))
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <SPI1_IRQHandler+0x4c>
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <SPI1_IRQHandler+0x4c>
    {
        p_IRQ_callback_SPI1[SPI_IRQ_RXNEIE >> 6]();
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <SPI1_IRQHandler+0x74>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4798      	blx	r3
    }
    
    if((SPI1->CR2 & SPI_IRQ_TXEIE) && (SPI1->SR & SPI_SR_TXE))
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <SPI1_IRQHandler+0x6a>
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <SPI1_IRQHandler+0x70>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <SPI1_IRQHandler+0x6a>
    {
        p_IRQ_callback_SPI1[SPI_IRQ_TXEIE >> 6]();
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <SPI1_IRQHandler+0x74>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4798      	blx	r3
    }
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40013000 	.word	0x40013000
 8001f54:	200000ac 	.word	0x200000ac

08001f58 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    if((SPI2->CR2 & SPI_IRQ_ERRIE) && ((SPI2->SR & SPI_SR_OVR) || (SPI2->SR & SPI_SR_MODF)))
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <SPI2_IRQHandler+0x2e>
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <SPI2_IRQHandler+0x28>
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <SPI2_IRQHandler+0x2e>
    {
        p_IRQ_callback_SPI2[SPI_IRQ_ERRIE >> 6]();
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <SPI2_IRQHandler+0x74>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4798      	blx	r3
    }

    if((SPI2->CR2 & SPI_IRQ_RXNEIE) && (SPI2->SR & SPI_SR_RXNE))
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <SPI2_IRQHandler+0x4c>
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <SPI2_IRQHandler+0x4c>
    {
        p_IRQ_callback_SPI2[SPI_IRQ_RXNEIE >> 6]();
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <SPI2_IRQHandler+0x74>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4798      	blx	r3
    }
    
    if((SPI2->CR2 & SPI_IRQ_TXEIE) && (SPI2->SR & SPI_SR_TXE))
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <SPI2_IRQHandler+0x6a>
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SPI2_IRQHandler+0x70>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <SPI2_IRQHandler+0x6a>
    {
        p_IRQ_callback_SPI2[SPI_IRQ_TXEIE >> 6]();
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <SPI2_IRQHandler+0x74>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4798      	blx	r3
    }
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40003800 	.word	0x40003800
 8001fcc:	200000b8 	.word	0x200000b8

08001fd0 <MCAL_SYST_CalculateCLKFreq>:
===============================================
*       Local Functions
*===============================================
*/
static uint32 MCAL_SYST_CalculateCLKFreq(uint32 copy_TimeUnit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    uint32 LOC_SYST_Clk = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
    
    /*Calculates the clock of the systick timer*/
    #if SYST_CLKSRC == SYST_INTERNAL_CLK_DIV_1
        LOC_SYST_Clk = MCAL_RCC_GET_SYSCLK();
 8001fdc:	f7ff fd54 	bl	8001a88 <MCAL_RCC_GET_SYSCLK>
 8001fe0:	60f8      	str	r0, [r7, #12]
    #else
        #error "Please choose an acceptable clock source"
    #endif

    /*Divide by the time unit to avoid doing floating point operations*/
    LOC_SYST_Clk /= copy_TimeUnit;  
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]

    return LOC_SYST_Clk;
 8001fec:	68fb      	ldr	r3, [r7, #12]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <MCAL_SYST_Init>:
* @return       :    E_OK on success, E_NOK on failure..
* @note			:   Actual timer duration is based on the clock frequency.
======================================================================================================================
*/
eStatus_t MCAL_SYST_Init(uint32 copy_ReloadVal)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    eStatus_t LOC_estatus = E_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
    
    if((SYST_ASSERT_RELOAD_VALUE(copy_ReloadVal)) &&
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200a:	d217      	bcs.n	800203c <MCAL_SYST_Init+0x44>
       (SYST_ASSERT_CLK(SYST_CLKSRC)) && (SYST_ASSERT_TICKINT(SYST_TICKINT)))
    {
        /*Disable the systick timer*/
        MCAL_SYST_Stop();
 800200c:	f000 f82e 	bl	800206c <MCAL_SYST_Stop>
        
        /*1. Program reload value.*/
        SYST->RVR = copy_ReloadVal;
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <MCAL_SYST_Init+0x54>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6053      	str	r3, [r2, #4]
        
        /*2. Clear current value.
            A write of any value clears the field to 0,
            and also clears the SYST_CSR COUNTFLAG bit to 0.
        */
        SYST->CVR = 0;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <MCAL_SYST_Init+0x54>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]

        /*3. Program Control and Status register.*/
        SYST->CSR |= (SYST->CSR & ~(SYST_CSR_CLKSRC_MASK | SYST_CSR_TICKINT_MASK)); /*Clear the CLKSRC and TICKINT bits*/
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MCAL_SYST_Init+0x54>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0206 	bic.w	r2, r3, #6
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MCAL_SYST_Init+0x54>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4908      	ldr	r1, [pc, #32]	; (800204c <MCAL_SYST_Init+0x54>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
        SYST->CSR |= (SYST_CLKSRC | SYST_TICKINT);
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <MCAL_SYST_Init+0x54>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a06      	ldr	r2, [pc, #24]	; (800204c <MCAL_SYST_Init+0x54>)
 8002034:	f043 0306 	orr.w	r3, r3, #6
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e001      	b.n	8002040 <MCAL_SYST_Init+0x48>
    }else{
        LOC_estatus = E_NOK;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
    }

    return LOC_estatus;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <MCAL_SYST_Start>:
* @return       :   none.
* @note			:   none.
======================================================================================================================
*/
void MCAL_SYST_Start(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
    SYST->CSR |= SYST_CSR_EN_MASK;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <MCAL_SYST_Start+0x18>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <MCAL_SYST_Start+0x18>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	e000e010 	.word	0xe000e010

0800206c <MCAL_SYST_Stop>:
* @return       :   none.
* @note			:   none.
======================================================================================================================
*/
void MCAL_SYST_Stop(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
    SYST->CSR &= ~SYST_CSR_EN_MASK;
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <MCAL_SYST_Stop+0x18>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <MCAL_SYST_Stop+0x18>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	e000e010 	.word	0xe000e010

08002088 <MCAL_SYST_SetIntervalPeriodic>:
* @return       :   E_OK on success, E_NOK on failure.
* @note			:   none.
======================================================================================================================
*/
eStatus_t MCAL_SYST_SetIntervalPeriodic(uint32 copy_Microseconds, fptr_Callback callback)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
    eStatus_t LOC_eStatus = E_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	77fb      	strb	r3, [r7, #31]
    uint64 LOC_u32TicksCount = 0;
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f04f 0400 	mov.w	r4, #0
 800209e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    uint32 LOC_SYST_Clk = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
    
    LOC_SYST_Clk = MCAL_SYST_CalculateCLKFreq(SYST_DELAY_US);
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <MCAL_SYST_SetIntervalPeriodic+0x84>)
 80020a8:	f7ff ff92 	bl	8001fd0 <MCAL_SYST_CalculateCLKFreq>
 80020ac:	60f8      	str	r0, [r7, #12]
    
    /*Calculate the required number of ticks*/
    LOC_u32TicksCount = copy_Microseconds * LOC_SYST_Clk;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	f04f 0400 	mov.w	r4, #0
 80020ba:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if(SYST_ASSERT_RELOAD_VALUE(LOC_u32TicksCount) && callback)
 80020be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	42a2      	cmp	r2, r4
 80020cc:	bf08      	it	eq
 80020ce:	4299      	cmpeq	r1, r3
 80020d0:	d315      	bcc.n	80020fe <MCAL_SYST_SetIntervalPeriodic+0x76>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <MCAL_SYST_SetIntervalPeriodic+0x76>
    {
        MCAL_SYST_Init(LOC_u32TicksCount);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff8c 	bl	8001ff8 <MCAL_SYST_Init>

        /*Set the callback function to be called when the interrupt is raised*/
        Glob_SYSTCallback = callback;
 80020e0:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <MCAL_SYST_SetIntervalPeriodic+0x88>)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6013      	str	r3, [r2, #0]

        /*Set the timer mode*/
        Glob_SYSTMode = SYST_PERIODIC_MODE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MCAL_SYST_SetIntervalPeriodic+0x8c>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    
        /*Enable the interrupt*/
        SYST->CSR |= SYST_CSR_TICKINT_MASK;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <MCAL_SYST_SetIntervalPeriodic+0x90>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a09      	ldr	r2, [pc, #36]	; (8002118 <MCAL_SYST_SetIntervalPeriodic+0x90>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6013      	str	r3, [r2, #0]

        /*Start the counter*/
        MCAL_SYST_Start();
 80020f8:	f7ff ffaa 	bl	8002050 <MCAL_SYST_Start>
 80020fc:	e001      	b.n	8002102 <MCAL_SYST_SetIntervalPeriodic+0x7a>

    }else{
        LOC_eStatus = E_NOK;
 80020fe:	2301      	movs	r3, #1
 8002100:	77fb      	strb	r3, [r7, #31]
    }

    return LOC_eStatus;
 8002102:	7ffb      	ldrb	r3, [r7, #31]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3724      	adds	r7, #36	; 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}
 800210c:	000f4240 	.word	0x000f4240
 8002110:	200000c4 	.word	0x200000c4
 8002114:	200000c8 	.word	0x200000c8
 8002118:	e000e010 	.word	0xe000e010

0800211c <SysTick_Handler>:
*       SYSTICK_ISR_DEFINITION
*===============================================
*/

void SysTick_Handler(void)
{   
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
    /*Stop the counter if we are in the single use mode*/
    if(Glob_SYSTMode == SYST_SINGLE_MODE)
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <SysTick_Handler+0x30>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <SysTick_Handler+0x10>
    {
        MCAL_SYST_Stop();
 8002128:	f7ff ffa0 	bl	800206c <MCAL_SYST_Stop>
    }

    if(Glob_SYSTCallback)
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <SysTick_Handler+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <SysTick_Handler+0x1e>
    {
        Glob_SYSTCallback();
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SysTick_Handler+0x34>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4798      	blx	r3
    }

    SYST->CSR &= ~SYST_CSR_COUNT_FLAG_MASK;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <SysTick_Handler+0x38>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <SysTick_Handler+0x38>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200000c8 	.word	0x200000c8
 8002150:	200000c4 	.word	0x200000c4
 8002154:	e000e010 	.word	0xe000e010

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2500      	movs	r5, #0
 800215c:	4e0c      	ldr	r6, [pc, #48]	; (8002190 <__libc_init_array+0x38>)
 800215e:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 8002160:	1ba4      	subs	r4, r4, r6
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	42a5      	cmp	r5, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	f000 f822 	bl	80021b0 <_init>
 800216c:	2500      	movs	r5, #0
 800216e:	4e0a      	ldr	r6, [pc, #40]	; (8002198 <__libc_init_array+0x40>)
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <__libc_init_array+0x44>)
 8002172:	1ba4      	subs	r4, r4, r6
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	42a5      	cmp	r5, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002180:	4798      	blx	r3
 8002182:	3501      	adds	r5, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800218a:	4798      	blx	r3
 800218c:	3501      	adds	r5, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	08002320 	.word	0x08002320
 8002194:	08002320 	.word	0x08002320
 8002198:	08002320 	.word	0x08002320
 800219c:	08002324 	.word	0x08002324

080021a0 <strcpy>:
 80021a0:	4603      	mov	r3, r0
 80021a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021a6:	f803 2b01 	strb.w	r2, [r3], #1
 80021aa:	2a00      	cmp	r2, #0
 80021ac:	d1f9      	bne.n	80021a2 <strcpy+0x2>
 80021ae:	4770      	bx	lr

080021b0 <_init>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr

080021bc <_fini>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr
